
4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002c24  08002c24  00012c24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  7 .bss          00000148  20000068  20000068  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b0  200001b0  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   000117eb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002435  00000000  00000000  00031883  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000507f  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000768  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a78  00000000  00000000  000394a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005504  00000000  00000000  00039f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003257  00000000  00000000  0003f41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042673  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000017c0  00000000  00000000  000426f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002c0c 	.word	0x08002c0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002c0c 	.word	0x08002c0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <HAL_InitTick+0x24>)
{
 8000284:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000290:	f000 fd2c 	bl	8000cec <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000294:	2200      	movs	r2, #0
 8000296:	4621      	mov	r1, r4
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 fce6 	bl	8000c6c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002a0:	2000      	movs	r0, #0
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_Init+0x20>)
{
 80002aa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	f043 0310 	orr.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b4:	2003      	movs	r0, #3
 80002b6:	f000 fcc7 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f7ff ffe0 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002c0:	f001 ff38 	bl	8002134 <HAL_MspInit>
}
 80002c4:	2000      	movs	r0, #0
 80002c6:	bd08      	pop	{r3, pc}
 80002c8:	40022000 	.word	0x40022000

080002cc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <HAL_IncTick+0xc>)
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000090 	.word	0x20000090

080002dc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002dc:	4b01      	ldr	r3, [pc, #4]	; (80002e4 <HAL_GetTick+0x8>)
 80002de:	6818      	ldr	r0, [r3, #0]
}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000090 	.word	0x20000090

080002e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff fff6 	bl	80002dc <HAL_GetTick>
  uint32_t wait = Delay;
 80002f0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f2:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80002f4:	4605      	mov	r5, r0
  {
     wait++;
 80002f6:	bf18      	it	ne
 80002f8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002fa:	f7ff ffef 	bl	80002dc <HAL_GetTick>
 80002fe:	1b40      	subs	r0, r0, r5
 8000300:	42a0      	cmp	r0, r4
 8000302:	d3fa      	bcc.n	80002fa <HAL_Delay+0x12>
  {
  }
}
 8000304:	b003      	add	sp, #12
 8000306:	bd30      	pop	{r4, r5, pc}

08000308 <HAL_ADC_ConvHalfCpltCallback>:
 8000308:	4770      	bx	lr

0800030a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800030a:	4770      	bx	lr

0800030c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800030c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800030e:	6803      	ldr	r3, [r0, #0]
{
 8000310:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000312:	6898      	ldr	r0, [r3, #8]
 8000314:	f000 0003 	and.w	r0, r0, #3
 8000318:	2801      	cmp	r0, #1
 800031a:	d001      	beq.n	8000320 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800031c:	2000      	movs	r0, #0
 800031e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	07d2      	lsls	r2, r2, #31
 8000324:	d5fa      	bpl.n	800031c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	f002 020d 	and.w	r2, r2, #13
 800032c:	2a01      	cmp	r2, #1
 800032e:	d11b      	bne.n	8000368 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000330:	689a      	ldr	r2, [r3, #8]
 8000332:	f042 0202 	orr.w	r2, r2, #2
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	2203      	movs	r2, #3
 800033a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800033c:	f7ff ffce 	bl	80002dc <HAL_GetTick>
 8000340:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	07db      	lsls	r3, r3, #31
 8000348:	d5e8      	bpl.n	800031c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800034a:	f7ff ffc7 	bl	80002dc <HAL_GetTick>
 800034e:	1b40      	subs	r0, r0, r5
 8000350:	2802      	cmp	r0, #2
 8000352:	d9f6      	bls.n	8000342 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000354:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800035c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000364:	2001      	movs	r0, #1
 8000366:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000368:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000370:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000378:	bd38      	pop	{r3, r4, r5, pc}
	...

0800037c <ADC_Enable>:
{
 800037c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800037e:	6803      	ldr	r3, [r0, #0]
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	f002 0203 	and.w	r2, r2, #3
 8000386:	2a01      	cmp	r2, #1
{
 8000388:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038a:	d104      	bne.n	8000396 <ADC_Enable+0x1a>
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	07d2      	lsls	r2, r2, #31
 8000390:	d501      	bpl.n	8000396 <ADC_Enable+0x1a>
  return HAL_OK;
 8000392:	2000      	movs	r0, #0
 8000394:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000396:	6899      	ldr	r1, [r3, #8]
 8000398:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <ADC_Enable+0x58>)
 800039a:	4211      	tst	r1, r2
 800039c:	d10f      	bne.n	80003be <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	f042 0201 	orr.w	r2, r2, #1
 80003a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80003a6:	f7ff ff99 	bl	80002dc <HAL_GetTick>
 80003aa:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003ac:	6823      	ldr	r3, [r4, #0]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	07db      	lsls	r3, r3, #31
 80003b2:	d4ee      	bmi.n	8000392 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003b4:	f7ff ff92 	bl	80002dc <HAL_GetTick>
 80003b8:	1b40      	subs	r0, r0, r5
 80003ba:	2802      	cmp	r0, #2
 80003bc:	d9f6      	bls.n	80003ac <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003c0:	f043 0310 	orr.w	r3, r3, #16
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80003ce:	2001      	movs	r0, #1
 80003d0:	bd38      	pop	{r3, r4, r5, pc}
 80003d2:	bf00      	nop
 80003d4:	8000003f 	.word	0x8000003f

080003d8 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80003da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e0:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80003e2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 80003ea:	f7ff bf8e 	b.w	800030a <HAL_ADC_ErrorCallback>

080003ee <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80003ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80003f0:	f7ff bf8a 	b.w	8000308 <HAL_ADC_ConvHalfCpltCallback>

080003f4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80003f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80003f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003f8:	f012 0f50 	tst.w	r2, #80	; 0x50
 80003fc:	d118      	bne.n	8000430 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80003fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000404:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	68d2      	ldr	r2, [r2, #12]
 800040a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800040e:	d10c      	bne.n	800042a <ADC_DMAConvCplt+0x36>
 8000410:	69da      	ldr	r2, [r3, #28]
 8000412:	b952      	cbnz	r2, 800042a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800041a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800041c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800041e:	04d2      	lsls	r2, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000420:	bf5e      	ittt	pl
 8000422:	6c5a      	ldrpl	r2, [r3, #68]	; 0x44
 8000424:	f042 0201 	orrpl.w	r2, r2, #1
 8000428:	645a      	strpl	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 800042a:	4618      	mov	r0, r3
 800042c:	f001 bd62 	b.w	8001ef4 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4718      	bx	r3
	...

08000438 <HAL_ADC_Init>:
{
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 800043c:	2300      	movs	r3, #0
 800043e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000440:	4604      	mov	r4, r0
 8000442:	2800      	cmp	r0, #0
 8000444:	f000 8091 	beq.w	800056a <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000448:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800044a:	06d2      	lsls	r2, r2, #27
 800044c:	d463      	bmi.n	8000516 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800044e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000450:	2b00      	cmp	r3, #0
 8000452:	d02e      	beq.n	80004b2 <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000454:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000456:	6823      	ldr	r3, [r4, #0]
 8000458:	689a      	ldr	r2, [r3, #8]
 800045a:	00d1      	lsls	r1, r2, #3
 800045c:	d502      	bpl.n	8000464 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800045e:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000460:	009a      	lsls	r2, r3, #2
 8000462:	d50a      	bpl.n	800047a <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8000464:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000466:	f023 0312 	bic.w	r3, r3, #18
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000470:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000478:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800047a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800047c:	06db      	lsls	r3, r3, #27
 800047e:	d46e      	bmi.n	800055e <HAL_ADC_Init+0x126>
 8000480:	2800      	cmp	r0, #0
 8000482:	d16c      	bne.n	800055e <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000484:	6823      	ldr	r3, [r4, #0]
 8000486:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000488:	f015 0504 	ands.w	r5, r5, #4
 800048c:	d167      	bne.n	800055e <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800048e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000490:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000494:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000498:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800049c:	6462      	str	r2, [r4, #68]	; 0x44
 800049e:	4a78      	ldr	r2, [pc, #480]	; (8000680 <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004a0:	d065      	beq.n	800056e <HAL_ADC_Init+0x136>
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d166      	bne.n	8000574 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004aa:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004ac:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80004b0:	e066      	b.n	8000580 <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 80004b2:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80004b4:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80004b6:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80004b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80004bc:	f001 fe78 	bl	80021b0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	00de      	lsls	r6, r3, #3
 80004c6:	d4c5      	bmi.n	8000454 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 80004c8:	4620      	mov	r0, r4
 80004ca:	f7ff ff1f 	bl	800030c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80004d0:	06d5      	lsls	r5, r2, #27
 80004d2:	d4c0      	bmi.n	8000456 <HAL_ADC_Init+0x1e>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d1be      	bne.n	8000456 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80004d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80004de:	f023 0302 	bic.w	r3, r3, #2
 80004e2:	f043 0302 	orr.w	r3, r3, #2
 80004e6:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	689a      	ldr	r2, [r3, #8]
 80004ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80004f0:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80004f2:	689a      	ldr	r2, [r3, #8]
 80004f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004f8:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004fa:	4b62      	ldr	r3, [pc, #392]	; (8000684 <HAL_ADC_Init+0x24c>)
 80004fc:	4a62      	ldr	r2, [pc, #392]	; (8000688 <HAL_ADC_Init+0x250>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	fbb3 f2f2 	udiv	r2, r3, r2
 8000504:	230a      	movs	r3, #10
 8000506:	4353      	muls	r3, r2
            wait_loop_index--;
 8000508:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800050a:	9b00      	ldr	r3, [sp, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0a1      	beq.n	8000454 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8000510:	9b00      	ldr	r3, [sp, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	e7f8      	b.n	8000508 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000516:	4618      	mov	r0, r3
 8000518:	e7af      	b.n	800047a <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800051a:	4293      	cmp	r3, r2
 800051c:	bf0c      	ite	eq
 800051e:	9101      	streq	r1, [sp, #4]
 8000520:	9001      	strne	r0, [sp, #4]
 8000522:	e02c      	b.n	800057e <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 8000524:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000526:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800052a:	f042 0220 	orr.w	r2, r2, #32
 800052e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000530:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	64a2      	str	r2, [r4, #72]	; 0x48
 8000538:	e052      	b.n	80005e0 <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800053a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800053e:	e06d      	b.n	800061c <HAL_ADC_Init+0x1e4>
 8000540:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000544:	e06a      	b.n	800061c <HAL_ADC_Init+0x1e4>
 8000546:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800054a:	e067      	b.n	800061c <HAL_ADC_Init+0x1e4>
 800054c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000550:	e064      	b.n	800061c <HAL_ADC_Init+0x1e4>
 8000552:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000556:	e061      	b.n	800061c <HAL_ADC_Init+0x1e4>
 8000558:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800055c:	e05e      	b.n	800061c <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 800055e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000560:	f023 0312 	bic.w	r3, r3, #18
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800056a:	2001      	movs	r0, #1
 800056c:	e085      	b.n	800067a <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800056e:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000570:	4a46      	ldr	r2, [pc, #280]	; (800068c <HAL_ADC_Init+0x254>)
 8000572:	e005      	b.n	8000580 <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000574:	4946      	ldr	r1, [pc, #280]	; (8000690 <HAL_ADC_Init+0x258>)
 8000576:	4a47      	ldr	r2, [pc, #284]	; (8000694 <HAL_ADC_Init+0x25c>)
 8000578:	428b      	cmp	r3, r1
 800057a:	d1ce      	bne.n	800051a <HAL_ADC_Init+0xe2>
 800057c:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800057e:	4a46      	ldr	r2, [pc, #280]	; (8000698 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000580:	6899      	ldr	r1, [r3, #8]
 8000582:	f001 0103 	and.w	r1, r1, #3
 8000586:	2901      	cmp	r1, #1
 8000588:	d102      	bne.n	8000590 <HAL_ADC_Init+0x158>
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	07ce      	lsls	r6, r1, #31
 800058e:	d40f      	bmi.n	80005b0 <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000590:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000592:	b139      	cbz	r1, 80005a4 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000594:	688e      	ldr	r6, [r1, #8]
 8000596:	f006 0603 	and.w	r6, r6, #3
 800059a:	2e01      	cmp	r6, #1
 800059c:	d102      	bne.n	80005a4 <HAL_ADC_Init+0x16c>
 800059e:	6809      	ldr	r1, [r1, #0]
 80005a0:	07c9      	lsls	r1, r1, #31
 80005a2:	d405      	bmi.n	80005b0 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80005a4:	6891      	ldr	r1, [r2, #8]
 80005a6:	6866      	ldr	r6, [r4, #4]
 80005a8:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80005ac:	4331      	orrs	r1, r6
 80005ae:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80005b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80005b2:	68a6      	ldr	r6, [r4, #8]
 80005b4:	69e2      	ldr	r2, [r4, #28]
 80005b6:	2901      	cmp	r1, #1
 80005b8:	68e1      	ldr	r1, [r4, #12]
 80005ba:	ea41 0106 	orr.w	r1, r1, r6
 80005be:	bf18      	it	ne
 80005c0:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 80005c4:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 80005c8:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80005cc:	2d01      	cmp	r5, #1
 80005ce:	d107      	bne.n	80005e0 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d1a7      	bne.n	8000524 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80005d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005d6:	3a01      	subs	r2, #1
 80005d8:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 80005dc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	d01d      	beq.n	8000622 <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80005e6:	4d2a      	ldr	r5, [pc, #168]	; (8000690 <HAL_ADC_Init+0x258>)
 80005e8:	42ab      	cmp	r3, r5
 80005ea:	d003      	beq.n	80005f4 <HAL_ADC_Init+0x1bc>
 80005ec:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80005f0:	42ab      	cmp	r3, r5
 80005f2:	d1a2      	bne.n	800053a <HAL_ADC_Init+0x102>
 80005f4:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 80005f8:	d0a2      	beq.n	8000540 <HAL_ADC_Init+0x108>
 80005fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80005fe:	d0a2      	beq.n	8000546 <HAL_ADC_Init+0x10e>
 8000600:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8000604:	d0a2      	beq.n	800054c <HAL_ADC_Init+0x114>
 8000606:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 800060a:	d0a2      	beq.n	8000552 <HAL_ADC_Init+0x11a>
 800060c:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000610:	d0a2      	beq.n	8000558 <HAL_ADC_Init+0x120>
 8000612:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8000616:	bf08      	it	eq
 8000618:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800061c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800061e:	4329      	orrs	r1, r5
 8000620:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000622:	689a      	ldr	r2, [r3, #8]
 8000624:	f012 0f0c 	tst.w	r2, #12
 8000628:	d10b      	bne.n	8000642 <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800062a:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800062c:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800062e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000632:	f022 0202 	bic.w	r2, r2, #2
 8000636:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000638:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8000640:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000642:	68dd      	ldr	r5, [r3, #12]
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <HAL_ADC_Init+0x264>)
 8000646:	402a      	ands	r2, r5
 8000648:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800064a:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800064c:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800064e:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000650:	bf05      	ittet	eq
 8000652:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000654:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000656:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000658:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800065c:	bf06      	itte	eq
 800065e:	f021 010f 	biceq.w	r1, r1, #15
 8000662:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000664:	f022 020f 	bicne.w	r2, r2, #15
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800066a:	2300      	movs	r3, #0
 800066c:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800066e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000670:	f023 0303 	bic.w	r3, r3, #3
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6463      	str	r3, [r4, #68]	; 0x44
}
 800067a:	b016      	add	sp, #88	; 0x58
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	bf00      	nop
 8000680:	50000100 	.word	0x50000100
 8000684:	20000000 	.word	0x20000000
 8000688:	000f4240 	.word	0x000f4240
 800068c:	50000300 	.word	0x50000300
 8000690:	50000400 	.word	0x50000400
 8000694:	50000500 	.word	0x50000500
 8000698:	50000700 	.word	0x50000700
 800069c:	fff0c007 	.word	0xfff0c007

080006a0 <HAL_ADC_Start_DMA>:
{
 80006a0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a4:	6803      	ldr	r3, [r0, #0]
{
 80006a6:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	0756      	lsls	r6, r2, #29
{
 80006ac:	4604      	mov	r4, r0
 80006ae:	460f      	mov	r7, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006b0:	f100 8092 	bmi.w	80007d8 <HAL_ADC_Start_DMA+0x138>
    __HAL_LOCK(hadc);
 80006b4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	f000 808d 	beq.w	80007d8 <HAL_ADC_Start_DMA+0x138>
 80006be:	2201      	movs	r2, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80006c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    __HAL_LOCK(hadc);
 80006c4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80006c8:	d002      	beq.n	80006d0 <HAL_ADC_Start_DMA+0x30>
 80006ca:	4a44      	ldr	r2, [pc, #272]	; (80007dc <HAL_ADC_Start_DMA+0x13c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d135      	bne.n	800073c <HAL_ADC_Start_DMA+0x9c>
 80006d0:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <HAL_ADC_Start_DMA+0x140>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	f013 0f1f 	tst.w	r3, #31
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d076      	beq.n	80007d0 <HAL_ADC_Start_DMA+0x130>
      tmp_hal_status = ADC_Enable(hadc);
 80006e2:	4620      	mov	r0, r4
 80006e4:	f7ff fe4a 	bl	800037c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80006e8:	4606      	mov	r6, r0
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d16c      	bne.n	80007c8 <HAL_ADC_Start_DMA+0x128>
        ADC_STATE_CLR_SET(hadc->State,
 80006ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006f0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80006f2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 80006f6:	f020 0001 	bic.w	r0, r0, #1
 80006fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006fe:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 8000702:	6460      	str	r0, [r4, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000704:	d002      	beq.n	800070c <HAL_ADC_Start_DMA+0x6c>
 8000706:	4b35      	ldr	r3, [pc, #212]	; (80007dc <HAL_ADC_Start_DMA+0x13c>)
 8000708:	4299      	cmp	r1, r3
 800070a:	d119      	bne.n	8000740 <HAL_ADC_Start_DMA+0xa0>
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <HAL_ADC_Start_DMA+0x140>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	06d8      	lsls	r0, r3, #27
 8000712:	d005      	beq.n	8000720 <HAL_ADC_Start_DMA+0x80>
 8000714:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000718:	d002      	beq.n	8000720 <HAL_ADC_Start_DMA+0x80>
 800071a:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <HAL_ADC_Start_DMA+0x144>)
 800071c:	4299      	cmp	r1, r3
 800071e:	d11c      	bne.n	800075a <HAL_ADC_Start_DMA+0xba>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000720:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000726:	6463      	str	r3, [r4, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000728:	68cb      	ldr	r3, [r1, #12]
 800072a:	019b      	lsls	r3, r3, #6
 800072c:	d523      	bpl.n	8000776 <HAL_ADC_Start_DMA+0xd6>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800072e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000738:	6463      	str	r3, [r4, #68]	; 0x44
 800073a:	e01c      	b.n	8000776 <HAL_ADC_Start_DMA+0xd6>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <HAL_ADC_Start_DMA+0x148>)
 800073e:	e7c8      	b.n	80006d2 <HAL_ADC_Start_DMA+0x32>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <HAL_ADC_Start_DMA+0x148>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	06da      	lsls	r2, r3, #27
 8000746:	d0eb      	beq.n	8000720 <HAL_ADC_Start_DMA+0x80>
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_ADC_Start_DMA+0x144>)
 800074a:	4299      	cmp	r1, r3
 800074c:	d0e8      	beq.n	8000720 <HAL_ADC_Start_DMA+0x80>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800074e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000754:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <HAL_ADC_Start_DMA+0x144>)
 8000758:	e008      	b.n	800076c <HAL_ADC_Start_DMA+0xcc>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800075a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800075c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000760:	6463      	str	r3, [r4, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <HAL_ADC_Start_DMA+0x13c>)
 8000764:	4299      	cmp	r1, r3
 8000766:	d1f6      	bne.n	8000756 <HAL_ADC_Start_DMA+0xb6>
 8000768:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800076c:	68d8      	ldr	r0, [r3, #12]
 800076e:	f3c0 6040 	ubfx	r0, r0, #25, #1
 8000772:	2800      	cmp	r0, #0
 8000774:	d1db      	bne.n	800072e <HAL_ADC_Start_DMA+0x8e>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000776:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000778:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800077a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800077e:	bf1c      	itt	ne
 8000780:	6ca3      	ldrne	r3, [r4, #72]	; 0x48
 8000782:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8000786:	64a3      	str	r3, [r4, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 8000788:	2300      	movs	r3, #0
 800078a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_ADC_Start_DMA+0x14c>)
 8000790:	6283      	str	r3, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_ADC_Start_DMA+0x150>)
 8000794:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_ADC_Start_DMA+0x154>)
 8000798:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800079a:	231c      	movs	r3, #28
 800079c:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800079e:	684b      	ldr	r3, [r1, #4]
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80007a6:	68cb      	ldr	r3, [r1, #12]
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007ae:	463a      	mov	r2, r7
 80007b0:	4643      	mov	r3, r8
 80007b2:	3140      	adds	r1, #64	; 0x40
 80007b4:	f000 fb0f 	bl	8000dd6 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80007b8:	6822      	ldr	r2, [r4, #0]
 80007ba:	6893      	ldr	r3, [r2, #8]
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6093      	str	r3, [r2, #8]
}
 80007c2:	4630      	mov	r0, r6
 80007c4:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80007c8:	2300      	movs	r3, #0
 80007ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80007ce:	e7f8      	b.n	80007c2 <HAL_ADC_Start_DMA+0x122>
      __HAL_UNLOCK(hadc);
 80007d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80007d4:	2601      	movs	r6, #1
 80007d6:	e7f4      	b.n	80007c2 <HAL_ADC_Start_DMA+0x122>
    tmp_hal_status = HAL_BUSY;
 80007d8:	2602      	movs	r6, #2
 80007da:	e7f2      	b.n	80007c2 <HAL_ADC_Start_DMA+0x122>
 80007dc:	50000100 	.word	0x50000100
 80007e0:	50000300 	.word	0x50000300
 80007e4:	50000400 	.word	0x50000400
 80007e8:	50000700 	.word	0x50000700
 80007ec:	080003f5 	.word	0x080003f5
 80007f0:	080003ef 	.word	0x080003ef
 80007f4:	080003d9 	.word	0x080003d9

080007f8 <HAL_ADC_ConfigChannel>:
{
 80007f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fa:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8000800:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000804:	2b01      	cmp	r3, #1
{
 8000806:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000808:	f000 8163 	beq.w	8000ad2 <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800080c:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800080e:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000810:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8000812:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000814:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 8000816:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800081a:	f100 8155 	bmi.w	8000ac8 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 800081e:	6848      	ldr	r0, [r1, #4]
 8000820:	680c      	ldr	r4, [r1, #0]
 8000822:	2804      	cmp	r0, #4
 8000824:	f04f 0206 	mov.w	r2, #6
 8000828:	d831      	bhi.n	800088e <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 800082a:	4342      	muls	r2, r0
 800082c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800082e:	201f      	movs	r0, #31
 8000830:	4090      	lsls	r0, r2
 8000832:	ea27 0000 	bic.w	r0, r7, r0
 8000836:	fa04 f202 	lsl.w	r2, r4, r2
 800083a:	4302      	orrs	r2, r0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	f012 0f0c 	tst.w	r2, #12
 8000844:	d162      	bne.n	800090c <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000846:	2c09      	cmp	r4, #9
 8000848:	ea4f 0244 	mov.w	r2, r4, lsl #1
 800084c:	688f      	ldr	r7, [r1, #8]
 800084e:	d946      	bls.n	80008de <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000850:	4422      	add	r2, r4
 8000852:	6998      	ldr	r0, [r3, #24]
 8000854:	3a1e      	subs	r2, #30
 8000856:	f04f 0e07 	mov.w	lr, #7
 800085a:	fa0e fe02 	lsl.w	lr, lr, r2
 800085e:	ea20 000e 	bic.w	r0, r0, lr
 8000862:	fa07 f202 	lsl.w	r2, r7, r2
 8000866:	4302      	orrs	r2, r0
 8000868:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000870:	694a      	ldr	r2, [r1, #20]
 8000872:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000876:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 800087a:	690a      	ldr	r2, [r1, #16]
 800087c:	3a01      	subs	r2, #1
 800087e:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8000882:	2a03      	cmp	r2, #3
 8000884:	d873      	bhi.n	800096e <HAL_ADC_ConfigChannel+0x176>
 8000886:	e8df f002 	tbb	[pc, r2]
 800088a:	5137      	.short	0x5137
 800088c:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 800088e:	2809      	cmp	r0, #9
 8000890:	d80b      	bhi.n	80008aa <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8000892:	4342      	muls	r2, r0
 8000894:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000896:	3a1e      	subs	r2, #30
 8000898:	201f      	movs	r0, #31
 800089a:	4090      	lsls	r0, r2
 800089c:	ea27 0000 	bic.w	r0, r7, r0
 80008a0:	fa04 f202 	lsl.w	r2, r4, r2
 80008a4:	4302      	orrs	r2, r0
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34
 80008a8:	e7c9      	b.n	800083e <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 80008aa:	280e      	cmp	r0, #14
 80008ac:	d80b      	bhi.n	80008c6 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80008ae:	4342      	muls	r2, r0
 80008b0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80008b2:	3a3c      	subs	r2, #60	; 0x3c
 80008b4:	201f      	movs	r0, #31
 80008b6:	4090      	lsls	r0, r2
 80008b8:	ea27 0000 	bic.w	r0, r7, r0
 80008bc:	fa04 f202 	lsl.w	r2, r4, r2
 80008c0:	4302      	orrs	r2, r0
 80008c2:	639a      	str	r2, [r3, #56]	; 0x38
 80008c4:	e7bb      	b.n	800083e <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80008c6:	4342      	muls	r2, r0
 80008c8:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80008ca:	3a5a      	subs	r2, #90	; 0x5a
 80008cc:	201f      	movs	r0, #31
 80008ce:	4090      	lsls	r0, r2
 80008d0:	ea27 0000 	bic.w	r0, r7, r0
 80008d4:	fa04 f202 	lsl.w	r2, r4, r2
 80008d8:	4302      	orrs	r2, r0
 80008da:	63da      	str	r2, [r3, #60]	; 0x3c
 80008dc:	e7af      	b.n	800083e <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80008de:	6958      	ldr	r0, [r3, #20]
 80008e0:	4422      	add	r2, r4
 80008e2:	f04f 0e07 	mov.w	lr, #7
 80008e6:	fa0e fe02 	lsl.w	lr, lr, r2
 80008ea:	ea20 000e 	bic.w	r0, r0, lr
 80008ee:	fa07 f202 	lsl.w	r2, r7, r2
 80008f2:	4302      	orrs	r2, r0
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	e7b8      	b.n	800086a <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80008f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008fa:	4f83      	ldr	r7, [pc, #524]	; (8000b08 <HAL_ADC_ConfigChannel+0x310>)
 80008fc:	4017      	ands	r7, r2
 80008fe:	ea47 020c 	orr.w	r2, r7, ip
 8000902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000906:	ea42 020e 	orr.w	r2, r2, lr
 800090a:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	f002 0203 	and.w	r2, r2, #3
 8000912:	2a01      	cmp	r2, #1
 8000914:	f040 80df 	bne.w	8000ad6 <HAL_ADC_ConfigChannel+0x2de>
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	07d7      	lsls	r7, r2, #31
 800091c:	f140 80db 	bpl.w	8000ad6 <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000920:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000922:	2300      	movs	r3, #0
 8000924:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000928:	b017      	add	sp, #92	; 0x5c
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 800092c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800092e:	4f76      	ldr	r7, [pc, #472]	; (8000b08 <HAL_ADC_ConfigChannel+0x310>)
 8000930:	4017      	ands	r7, r2
 8000932:	ea47 020c 	orr.w	r2, r7, ip
 8000936:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800093a:	ea42 020e 	orr.w	r2, r2, lr
 800093e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000940:	e7e4      	b.n	800090c <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000942:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000944:	4870      	ldr	r0, [pc, #448]	; (8000b08 <HAL_ADC_ConfigChannel+0x310>)
 8000946:	4010      	ands	r0, r2
 8000948:	ea40 020c 	orr.w	r2, r0, ip
 800094c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000950:	ea42 020e 	orr.w	r2, r2, lr
 8000954:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8000956:	e7d9      	b.n	800090c <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000958:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800095a:	4a6b      	ldr	r2, [pc, #428]	; (8000b08 <HAL_ADC_ConfigChannel+0x310>)
 800095c:	4002      	ands	r2, r0
 800095e:	ea42 020c 	orr.w	r2, r2, ip
 8000962:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000966:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800096a:	66da      	str	r2, [r3, #108]	; 0x6c
 800096c:	e7ce      	b.n	800090c <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800096e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000970:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000974:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000976:	bf02      	ittt	eq
 8000978:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800097a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800097e:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000980:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000982:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000986:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000988:	bf02      	ittt	eq
 800098a:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 800098c:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000990:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000992:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000994:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000998:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800099a:	bf02      	ittt	eq
 800099c:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 800099e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80009a2:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80009a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80009a6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80009aa:	4594      	cmp	ip, r2
 80009ac:	d1ae      	bne.n	800090c <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80009ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80009b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80009b4:	e7d9      	b.n	800096a <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80009b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80009ba:	2101      	movs	r1, #1
 80009bc:	40a1      	lsls	r1, r4
 80009be:	ea22 0201 	bic.w	r2, r2, r1
 80009c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009ca:	d01e      	beq.n	8000a0a <HAL_ADC_ConfigChannel+0x212>
 80009cc:	494f      	ldr	r1, [pc, #316]	; (8000b0c <HAL_ADC_ConfigChannel+0x314>)
 80009ce:	4a50      	ldr	r2, [pc, #320]	; (8000b10 <HAL_ADC_ConfigChannel+0x318>)
 80009d0:	4850      	ldr	r0, [pc, #320]	; (8000b14 <HAL_ADC_ConfigChannel+0x31c>)
 80009d2:	4283      	cmp	r3, r0
 80009d4:	bf08      	it	eq
 80009d6:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009d8:	2c10      	cmp	r4, #16
 80009da:	d118      	bne.n	8000a0e <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009dc:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009de:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009e2:	d19d      	bne.n	8000920 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009e8:	494a      	ldr	r1, [pc, #296]	; (8000b14 <HAL_ADC_ConfigChannel+0x31c>)
 80009ea:	d11c      	bne.n	8000a26 <HAL_ADC_ConfigChannel+0x22e>
 80009ec:	9101      	str	r1, [sp, #4]
 80009ee:	e024      	b.n	8000a3a <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 80009f0:	1c60      	adds	r0, r4, #1
 80009f2:	6959      	ldr	r1, [r3, #20]
 80009f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009f8:	2207      	movs	r2, #7
 80009fa:	4082      	lsls	r2, r0
 80009fc:	ea21 0102 	bic.w	r1, r1, r2
 8000a00:	fa06 f200 	lsl.w	r2, r6, r0
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	e7dd      	b.n	80009c6 <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_ADC_ConfigChannel+0x314>)
 8000a0c:	e7e4      	b.n	80009d8 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a0e:	2c11      	cmp	r4, #17
 8000a10:	d103      	bne.n	8000a1a <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a12:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a14:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000a18:	e7e3      	b.n	80009e2 <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a1a:	2c12      	cmp	r4, #18
 8000a1c:	d180      	bne.n	8000920 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000a1e:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a20:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000a24:	e7dd      	b.n	80009e2 <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d102      	bne.n	8000a30 <HAL_ADC_ConfigChannel+0x238>
 8000a2a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000a2e:	e7dd      	b.n	80009ec <HAL_ADC_ConfigChannel+0x1f4>
 8000a30:	4939      	ldr	r1, [pc, #228]	; (8000b18 <HAL_ADC_ConfigChannel+0x320>)
 8000a32:	483a      	ldr	r0, [pc, #232]	; (8000b1c <HAL_ADC_ConfigChannel+0x324>)
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d12b      	bne.n	8000a90 <HAL_ADC_ConfigChannel+0x298>
 8000a38:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a3a:	6899      	ldr	r1, [r3, #8]
 8000a3c:	f001 0103 	and.w	r1, r1, #3
 8000a40:	2901      	cmp	r1, #1
 8000a42:	d102      	bne.n	8000a4a <HAL_ADC_ConfigChannel+0x252>
 8000a44:	6819      	ldr	r1, [r3, #0]
 8000a46:	07c8      	lsls	r0, r1, #31
 8000a48:	d438      	bmi.n	8000abc <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a4a:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a4c:	b139      	cbz	r1, 8000a5e <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a4e:	6888      	ldr	r0, [r1, #8]
 8000a50:	f000 0003 	and.w	r0, r0, #3
 8000a54:	2801      	cmp	r0, #1
 8000a56:	d102      	bne.n	8000a5e <HAL_ADC_ConfigChannel+0x266>
 8000a58:	6809      	ldr	r1, [r1, #0]
 8000a5a:	07c9      	lsls	r1, r1, #31
 8000a5c:	d42e      	bmi.n	8000abc <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a5e:	2c10      	cmp	r4, #16
 8000a60:	d11a      	bne.n	8000a98 <HAL_ADC_ConfigChannel+0x2a0>
 8000a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a66:	f47f af5b 	bne.w	8000920 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000a6a:	6893      	ldr	r3, [r2, #8]
 8000a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a70:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_ADC_ConfigChannel+0x328>)
 8000a74:	4a2b      	ldr	r2, [pc, #172]	; (8000b24 <HAL_ADC_ConfigChannel+0x32c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000a80:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000a82:	9b00      	ldr	r3, [sp, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f43f af4b 	beq.w	8000920 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000a8a:	9b00      	ldr	r3, [sp, #0]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	e7f7      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a90:	4283      	cmp	r3, r0
 8000a92:	bf18      	it	ne
 8000a94:	2100      	movne	r1, #0
 8000a96:	e7a9      	b.n	80009ec <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000a98:	2c11      	cmp	r4, #17
 8000a9a:	d108      	bne.n	8000aae <HAL_ADC_ConfigChannel+0x2b6>
 8000a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aa0:	f47f af3e 	bne.w	8000920 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000aa4:	6893      	ldr	r3, [r2, #8]
 8000aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000aaa:	6093      	str	r3, [r2, #8]
 8000aac:	e738      	b.n	8000920 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000aae:	2c12      	cmp	r4, #18
 8000ab0:	f47f af36 	bne.w	8000920 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000ab4:	6893      	ldr	r3, [r2, #8]
 8000ab6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aba:	e7f6      	b.n	8000aaa <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000abc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000abe:	f043 0320 	orr.w	r3, r3, #32
 8000ac2:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	e72c      	b.n	8000922 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	646b      	str	r3, [r5, #68]	; 0x44
 8000ad0:	e727      	b.n	8000922 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	e728      	b.n	8000928 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ad6:	2e01      	cmp	r6, #1
 8000ad8:	f47f af6d 	bne.w	80009b6 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000adc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000ae0:	40a6      	lsls	r6, r4
 8000ae2:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ae4:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ae6:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000aea:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000aec:	d980      	bls.n	80009f0 <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000aee:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000af2:	6999      	ldr	r1, [r3, #24]
 8000af4:	3a1b      	subs	r2, #27
 8000af6:	2007      	movs	r0, #7
 8000af8:	4090      	lsls	r0, r2
 8000afa:	ea21 0100 	bic.w	r1, r1, r0
 8000afe:	fa06 f202 	lsl.w	r2, r6, r2
 8000b02:	430a      	orrs	r2, r1
 8000b04:	619a      	str	r2, [r3, #24]
 8000b06:	e75e      	b.n	80009c6 <HAL_ADC_ConfigChannel+0x1ce>
 8000b08:	83fff000 	.word	0x83fff000
 8000b0c:	50000300 	.word	0x50000300
 8000b10:	50000700 	.word	0x50000700
 8000b14:	50000100 	.word	0x50000100
 8000b18:	50000400 	.word	0x50000400
 8000b1c:	50000500 	.word	0x50000500
 8000b20:	20000000 	.word	0x20000000
 8000b24:	000f4240 	.word	0x000f4240

08000b28 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b2a:	6802      	ldr	r2, [r0, #0]
 8000b2c:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000b2e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8000b32:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b34:	d101      	bne.n	8000b3a <HAL_ADCEx_MultiModeConfigChannel+0x12>
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	e009      	b.n	8000b4e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d102      	bne.n	8000b44 <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8000b3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b42:	e7f8      	b.n	8000b36 <HAL_ADCEx_MultiModeConfigChannel+0xe>
 8000b44:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000b46:	4c3d      	ldr	r4, [pc, #244]	; (8000c3c <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d130      	bne.n	8000bae <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000b4c:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000b4e:	9c01      	ldr	r4, [sp, #4]
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d058      	beq.n	8000c06 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8000b54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d056      	beq.n	8000c0a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000b62:	6893      	ldr	r3, [r2, #8]
 8000b64:	075b      	lsls	r3, r3, #29
 8000b66:	d443      	bmi.n	8000bf0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000b68:	68a3      	ldr	r3, [r4, #8]
 8000b6a:	075f      	lsls	r7, r3, #29
 8000b6c:	d440      	bmi.n	8000bf0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b6e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000b72:	d020      	beq.n	8000bb6 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8000b74:	4d32      	ldr	r5, [pc, #200]	; (8000c40 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8000b78:	4e2e      	ldr	r6, [pc, #184]	; (8000c34 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000b7a:	42b2      	cmp	r2, r6
 8000b7c:	bf08      	it	eq
 8000b7e:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000b80:	680d      	ldr	r5, [r1, #0]
 8000b82:	b1d5      	cbz	r5, 8000bba <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000b84:	684e      	ldr	r6, [r1, #4]
 8000b86:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000b8a:	4637      	mov	r7, r6
 8000b8c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000b8e:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8000b92:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8000b96:	433e      	orrs	r6, r7
 8000b98:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000b9a:	6896      	ldr	r6, [r2, #8]
 8000b9c:	f006 0603 	and.w	r6, r6, #3
 8000ba0:	2e01      	cmp	r6, #1
 8000ba2:	d134      	bne.n	8000c0e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	07d6      	lsls	r6, r2, #31
 8000ba8:	d531      	bpl.n	8000c0e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e025      	b.n	8000bfa <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000bae:	42a2      	cmp	r2, r4
 8000bb0:	bf18      	it	ne
 8000bb2:	2300      	movne	r3, #0
 8000bb4:	e7bf      	b.n	8000b36 <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000bb8:	e7e2      	b.n	8000b80 <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000bba:	6899      	ldr	r1, [r3, #8]
 8000bbc:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000bc0:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000bc2:	6891      	ldr	r1, [r2, #8]
 8000bc4:	f001 0103 	and.w	r1, r1, #3
 8000bc8:	2901      	cmp	r1, #1
 8000bca:	d102      	bne.n	8000bd2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	07d1      	lsls	r1, r2, #31
 8000bd0:	d4eb      	bmi.n	8000baa <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000bd2:	68a2      	ldr	r2, [r4, #8]
 8000bd4:	f002 0203 	and.w	r2, r2, #3
 8000bd8:	2a01      	cmp	r2, #1
 8000bda:	d102      	bne.n	8000be2 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8000bdc:	6822      	ldr	r2, [r4, #0]
 8000bde:	07d2      	lsls	r2, r2, #31
 8000be0:	d4e3      	bmi.n	8000baa <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000be8:	f022 020f 	bic.w	r2, r2, #15
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	e7dc      	b.n	8000baa <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8000c00:	4618      	mov	r0, r3
 8000c02:	b017      	add	sp, #92	; 0x5c
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e7fa      	b.n	8000c00 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e7f8      	b.n	8000c00 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000c0e:	68a2      	ldr	r2, [r4, #8]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	2a01      	cmp	r2, #1
 8000c16:	d102      	bne.n	8000c1e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000c18:	6822      	ldr	r2, [r4, #0]
 8000c1a:	07d4      	lsls	r4, r2, #31
 8000c1c:	d4c5      	bmi.n	8000baa <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	6889      	ldr	r1, [r1, #8]
 8000c22:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000c26:	430d      	orrs	r5, r1
 8000c28:	f022 020f 	bic.w	r2, r2, #15
 8000c2c:	4315      	orrs	r5, r2
 8000c2e:	609d      	str	r5, [r3, #8]
 8000c30:	e7bb      	b.n	8000baa <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8000c32:	bf00      	nop
 8000c34:	50000100 	.word	0x50000100
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	50000500 	.word	0x50000500
 8000c40:	50000300 	.word	0x50000300
 8000c44:	50000700 	.word	0x50000700

08000c48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	0c1b      	lsrs	r3, r3, #16
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c58:	0200      	lsls	r0, r0, #8
 8000c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c64:	60d3      	str	r3, [r2, #12]
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b530      	push	{r4, r5, lr}
 8000c70:	68dc      	ldr	r4, [r3, #12]
 8000c72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	bf28      	it	cs
 8000c80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 0501 	mov.w	r5, #1
 8000c88:	fa05 f303 	lsl.w	r3, r5, r3
 8000c8c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c90:	bf8c      	ite	hi
 8000c92:	3c03      	subhi	r4, #3
 8000c94:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c96:	4019      	ands	r1, r3
 8000c98:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9a:	fa05 f404 	lsl.w	r4, r5, r4
 8000c9e:	3c01      	subs	r4, #1
 8000ca0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ca2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	ea42 0201 	orr.w	r2, r2, r1
 8000ca8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	bfaf      	iteee	ge
 8000cae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	f000 000f 	andlt.w	r0, r0, #15
 8000cb6:	4b06      	ldrlt	r3, [pc, #24]	; (8000cd0 <HAL_NVIC_SetPriority+0x64>)
 8000cb8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	bfa5      	ittet	ge
 8000cbc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000cc0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cc8:	bd30      	pop	{r4, r5, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	e000ed14 	.word	0xe000ed14

08000cd4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cd4:	0942      	lsrs	r2, r0, #5
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f000 001f 	and.w	r0, r0, #31
 8000cdc:	fa03 f000 	lsl.w	r0, r3, r0
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <HAL_NVIC_EnableIRQ+0x14>)
 8000ce2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	3801      	subs	r0, #1
 8000cee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cf2:	d20a      	bcs.n	8000d0a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	21f0      	movs	r1, #240	; 0xf0
 8000cfc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d1a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d1c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d1e:	bf0c      	ite	eq
 8000d20:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d24:	f022 0204 	bicne.w	r2, r2, #4
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d30:	4770      	bx	lr

08000d32 <HAL_SYSTICK_IRQHandler>:
{
 8000d32:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000d34:	f7ff fffc 	bl	8000d30 <HAL_SYSTICK_Callback>
 8000d38:	bd08      	pop	{r3, pc}
	...

08000d3c <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d3c:	6801      	ldr	r1, [r0, #0]
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <DMA_CalcBaseAndBitshift+0x34>)
 8000d40:	4299      	cmp	r1, r3
{
 8000d42:	b510      	push	{r4, lr}
 8000d44:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d48:	d809      	bhi.n	8000d5e <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <DMA_CalcBaseAndBitshift+0x38>)
 8000d4c:	440a      	add	r2, r1
 8000d4e:	fbb2 f2f4 	udiv	r2, r2, r4
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d56:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8000d5a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000d5c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <DMA_CalcBaseAndBitshift+0x3c>)
 8000d60:	440b      	add	r3, r1
 8000d62:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <DMA_CalcBaseAndBitshift+0x40>)
 8000d6c:	e7f5      	b.n	8000d5a <DMA_CalcBaseAndBitshift+0x1e>
 8000d6e:	bf00      	nop
 8000d70:	40020407 	.word	0x40020407
 8000d74:	bffdfff8 	.word	0xbffdfff8
 8000d78:	bffdfbf8 	.word	0xbffdfbf8
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_DMA_Init>:
{ 
 8000d80:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 8000d82:	4604      	mov	r4, r0
 8000d84:	b328      	cbz	r0, 8000dd2 <HAL_DMA_Init+0x52>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d86:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 8000d88:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d8a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 8000d8e:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000d90:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8000d92:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d94:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000d96:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d98:	432b      	orrs	r3, r5
 8000d9a:	6905      	ldr	r5, [r0, #16]
 8000d9c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9e:	6945      	ldr	r5, [r0, #20]
 8000da0:	432b      	orrs	r3, r5
 8000da2:	6985      	ldr	r5, [r0, #24]
 8000da4:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da6:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000dac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db0:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000db2:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000db4:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000db6:	f7ff ffc1 	bl	8000d3c <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000dba:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8000dbe:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000dc0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000dc2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000dc4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000dcc:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 8000dd0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
}  
 8000dd4:	bd38      	pop	{r3, r4, r5, pc}

08000dd6 <HAL_DMA_Start_IT>:
{
 8000dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000dd8:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000ddc:	2c01      	cmp	r4, #1
 8000dde:	d035      	beq.n	8000e4c <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000de0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000de4:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000de6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000de8:	f880 4020 	strb.w	r4, [r0, #32]
 8000dec:	f04f 0600 	mov.w	r6, #0
 8000df0:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000df4:	d128      	bne.n	8000e48 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000df6:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dfa:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dfc:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dfe:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e00:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e02:	f026 0601 	bic.w	r6, r6, #1
 8000e06:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e08:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000e0a:	40bd      	lsls	r5, r7
 8000e0c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000e0e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e10:	6843      	ldr	r3, [r0, #4]
 8000e12:	6805      	ldr	r5, [r0, #0]
 8000e14:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000e16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000e18:	bf0b      	itete	eq
 8000e1a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000e1c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e1e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8000e20:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000e22:	b14b      	cbz	r3, 8000e38 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e2a:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000e34:	2000      	movs	r0, #0
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	f043 030a 	orr.w	r3, r3, #10
 8000e3e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	f023 0304 	bic.w	r3, r3, #4
 8000e46:	e7f0      	b.n	8000e2a <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000e48:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000e4c:	2002      	movs	r0, #2
} 
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e50 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e50:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e52:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000e54:	6803      	ldr	r3, [r0, #0]
{
 8000e56:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e58:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e5a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e5c:	2404      	movs	r4, #4
 8000e5e:	4094      	lsls	r4, r2
 8000e60:	4226      	tst	r6, r4
 8000e62:	d00e      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x32>
 8000e64:	f015 0f04 	tst.w	r5, #4
 8000e68:	d00b      	beq.n	8000e82 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e6e:	bf5e      	ittt	pl
 8000e70:	681a      	ldrpl	r2, [r3, #0]
 8000e72:	f022 0204 	bicpl.w	r2, r2, #4
 8000e76:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e7a:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000e7c:	b373      	cbz	r3, 8000edc <HAL_DMA_IRQHandler+0x8c>
}  
 8000e7e:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8000e80:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e82:	2402      	movs	r4, #2
 8000e84:	4094      	lsls	r4, r2
 8000e86:	4226      	tst	r6, r4
 8000e88:	d012      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x60>
 8000e8a:	f015 0f02 	tst.w	r5, #2
 8000e8e:	d00f      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	0695      	lsls	r5, r2, #26
 8000e94:	d406      	bmi.n	8000ea4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f022 020a 	bic.w	r2, r2, #10
 8000e9c:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000ea4:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ea6:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000ea8:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000eac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000eae:	e7e5      	b.n	8000e7c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eb0:	2408      	movs	r4, #8
 8000eb2:	4094      	lsls	r4, r2
 8000eb4:	4234      	tst	r4, r6
 8000eb6:	d011      	beq.n	8000edc <HAL_DMA_IRQHandler+0x8c>
 8000eb8:	072c      	lsls	r4, r5, #28
 8000eba:	d50f      	bpl.n	8000edc <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ebc:	681c      	ldr	r4, [r3, #0]
 8000ebe:	f024 040e 	bic.w	r4, r4, #14
 8000ec2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	fa03 f202 	lsl.w	r2, r3, r2
 8000eca:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ecc:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000ece:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000ed8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000eda:	e7cf      	b.n	8000e7c <HAL_DMA_IRQHandler+0x2c>
}  
 8000edc:	bc70      	pop	{r4, r5, r6}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ee4:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800107c <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4a61      	ldr	r2, [pc, #388]	; (8001074 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000eee:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ef0:	fa38 f403 	lsrs.w	r4, r8, r3
 8000ef4:	d102      	bne.n	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000ef6:	b003      	add	sp, #12
 8000ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000efc:	f04f 0e01 	mov.w	lr, #1
 8000f00:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000f04:	ea18 060e 	ands.w	r6, r8, lr
 8000f08:	f000 80a6 	beq.w	8001058 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	684c      	ldr	r4, [r1, #4]
 8000f0e:	f024 0710 	bic.w	r7, r4, #16
 8000f12:	2f02      	cmp	r7, #2
 8000f14:	d116      	bne.n	8000f44 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000f16:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f1a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000f22:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f2a:	f04f 0c0f 	mov.w	ip, #15
 8000f2e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f32:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f36:	690d      	ldr	r5, [r1, #16]
 8000f38:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f3c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f40:	f8ca 5020 	str.w	r5, [sl, #32]
 8000f44:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f48:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f4a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f52:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f58:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f62:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f66:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f68:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6c:	d811      	bhi.n	8000f92 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000f6e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f74:	68cf      	ldr	r7, [r1, #12]
 8000f76:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f7a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f7e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f80:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f82:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f86:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f8a:	409f      	lsls	r7, r3
 8000f8c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f90:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f92:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f94:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f96:	688f      	ldr	r7, [r1, #8]
 8000f98:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f9c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f9e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa0:	00e5      	lsls	r5, r4, #3
 8000fa2:	d559      	bpl.n	8001058 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000fa8:	f045 0501 	orr.w	r5, r5, #1
 8000fac:	f8c9 5018 	str.w	r5, [r9, #24]
 8000fb0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000fb4:	f023 0703 	bic.w	r7, r3, #3
 8000fb8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fbc:	f005 0501 	and.w	r5, r5, #1
 8000fc0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000fc4:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fc6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000fcc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fd2:	f04f 0e0f 	mov.w	lr, #15
 8000fd6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fda:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fde:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fe2:	d03b      	beq.n	800105c <HAL_GPIO_Init+0x17c>
 8000fe4:	4d24      	ldr	r5, [pc, #144]	; (8001078 <HAL_GPIO_Init+0x198>)
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d03a      	beq.n	8001060 <HAL_GPIO_Init+0x180>
 8000fea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fee:	42a8      	cmp	r0, r5
 8000ff0:	d038      	beq.n	8001064 <HAL_GPIO_Init+0x184>
 8000ff2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ff6:	42a8      	cmp	r0, r5
 8000ff8:	d036      	beq.n	8001068 <HAL_GPIO_Init+0x188>
 8000ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ffe:	42a8      	cmp	r0, r5
 8001000:	d034      	beq.n	800106c <HAL_GPIO_Init+0x18c>
 8001002:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001006:	42a8      	cmp	r0, r5
 8001008:	d032      	beq.n	8001070 <HAL_GPIO_Init+0x190>
 800100a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100e:	42a8      	cmp	r0, r5
 8001010:	bf14      	ite	ne
 8001012:	2507      	movne	r5, #7
 8001014:	2506      	moveq	r5, #6
 8001016:	fa05 f50c 	lsl.w	r5, r5, ip
 800101a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800101e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001020:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001022:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001024:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001028:	bf0c      	ite	eq
 800102a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800102c:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800102e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001030:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001036:	bf0c      	ite	eq
 8001038:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800103a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800103c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800103e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001044:	bf0c      	ite	eq
 8001046:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001048:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800104a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800104c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001050:	bf54      	ite	pl
 8001052:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001054:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001056:	60d5      	str	r5, [r2, #12]
    position++;
 8001058:	3301      	adds	r3, #1
 800105a:	e749      	b.n	8000ef0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800105c:	2500      	movs	r5, #0
 800105e:	e7da      	b.n	8001016 <HAL_GPIO_Init+0x136>
 8001060:	2501      	movs	r5, #1
 8001062:	e7d8      	b.n	8001016 <HAL_GPIO_Init+0x136>
 8001064:	2502      	movs	r5, #2
 8001066:	e7d6      	b.n	8001016 <HAL_GPIO_Init+0x136>
 8001068:	2503      	movs	r5, #3
 800106a:	e7d4      	b.n	8001016 <HAL_GPIO_Init+0x136>
 800106c:	2504      	movs	r5, #4
 800106e:	e7d2      	b.n	8001016 <HAL_GPIO_Init+0x136>
 8001070:	2505      	movs	r5, #5
 8001072:	e7d0      	b.n	8001016 <HAL_GPIO_Init+0x136>
 8001074:	40010400 	.word	0x40010400
 8001078:	48000400 	.word	0x48000400
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	b10a      	cbz	r2, 8001086 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001082:	6181      	str	r1, [r0, #24]
 8001084:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001086:	6281      	str	r1, [r0, #40]	; 0x28
 8001088:	4770      	bx	lr

0800108a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800108a:	6943      	ldr	r3, [r0, #20]
 800108c:	4059      	eors	r1, r3
 800108e:	6141      	str	r1, [r0, #20]
 8001090:	4770      	bx	lr
	...

08001094 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001094:	6803      	ldr	r3, [r0, #0]
{
 8001096:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	07df      	lsls	r7, r3, #31
{
 800109c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109e:	d411      	bmi.n	80010c4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	079e      	lsls	r6, r3, #30
 80010a4:	f100 808b 	bmi.w	80011be <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	071c      	lsls	r4, r3, #28
 80010ac:	f100 80fe 	bmi.w	80012ac <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	0758      	lsls	r0, r3, #29
 80010b4:	f100 8147 	bmi.w	8001346 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b8:	69aa      	ldr	r2, [r5, #24]
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	f040 81dd 	bne.w	800147a <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010c0:	2000      	movs	r0, #0
 80010c2:	e024      	b.n	800110e <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010c4:	4cbd      	ldr	r4, [pc, #756]	; (80013bc <HAL_RCC_OscConfig+0x328>)
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d00a      	beq.n	80010e6 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d0:	6863      	ldr	r3, [r4, #4]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d11c      	bne.n	8001114 <HAL_RCC_OscConfig+0x80>
 80010da:	6863      	ldr	r3, [r4, #4]
 80010dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d116      	bne.n	8001114 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	6821      	ldr	r1, [r4, #0]
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	2201      	movs	r2, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	420b      	tst	r3, r1
 8001104:	d0cc      	beq.n	80010a0 <HAL_RCC_OscConfig+0xc>
 8001106:	686b      	ldr	r3, [r5, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1c9      	bne.n	80010a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
}
 800110e:	b002      	add	sp, #8
 8001110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001114:	686b      	ldr	r3, [r5, #4]
 8001116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111a:	d11e      	bne.n	800115a <HAL_RCC_OscConfig+0xc6>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001124:	f7ff f8da 	bl	80002dc <HAL_GetTick>
 8001128:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800112c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	2701      	movs	r7, #1
 8001130:	fa96 f3a6 	rbit	r3, r6
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	fa96 f3a6 	rbit	r3, r6
 800113a:	fab3 f383 	clz	r3, r3
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	fa07 f303 	lsl.w	r3, r7, r3
 8001146:	4213      	tst	r3, r2
 8001148:	d1aa      	bne.n	80010a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114a:	f7ff f8c7 	bl	80002dc <HAL_GetTick>
 800114e:	eba0 0008 	sub.w	r0, r0, r8
 8001152:	2864      	cmp	r0, #100	; 0x64
 8001154:	d9ec      	bls.n	8001130 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8001156:	2003      	movs	r0, #3
 8001158:	e7d9      	b.n	800110e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	bb0b      	cbnz	r3, 80011a0 <HAL_RCC_OscConfig+0x10c>
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800116c:	f7ff f8b6 	bl	80002dc <HAL_GetTick>
 8001170:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001174:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	2701      	movs	r7, #1
 8001178:	fa96 f3a6 	rbit	r3, r6
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	fa96 f3a6 	rbit	r3, r6
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	f003 031f 	and.w	r3, r3, #31
 800118a:	fa07 f303 	lsl.w	r3, r7, r3
 800118e:	4213      	tst	r3, r2
 8001190:	d086      	beq.n	80010a0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001192:	f7ff f8a3 	bl	80002dc <HAL_GetTick>
 8001196:	eba0 0008 	sub.w	r0, r0, r8
 800119a:	2864      	cmp	r0, #100	; 0x64
 800119c:	d9ec      	bls.n	8001178 <HAL_RCC_OscConfig+0xe4>
 800119e:	e7da      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	d103      	bne.n	80011b0 <HAL_RCC_OscConfig+0x11c>
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	e7b5      	b.n	800111c <HAL_RCC_OscConfig+0x88>
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6023      	str	r3, [r4, #0]
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	e7b1      	b.n	8001122 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011be:	4c7f      	ldr	r4, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x328>)
 80011c0:	6863      	ldr	r3, [r4, #4]
 80011c2:	f013 0f0c 	tst.w	r3, #12
 80011c6:	d00a      	beq.n	80011de <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d124      	bne.n	800121c <HAL_RCC_OscConfig+0x188>
 80011d2:	6863      	ldr	r3, [r4, #4]
 80011d4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011dc:	d11e      	bne.n	800121c <HAL_RCC_OscConfig+0x188>
 80011de:	2302      	movs	r3, #2
 80011e0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e4:	6821      	ldr	r1, [r4, #0]
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	2201      	movs	r2, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	420b      	tst	r3, r1
 80011fa:	d002      	beq.n	8001202 <HAL_RCC_OscConfig+0x16e>
 80011fc:	68eb      	ldr	r3, [r5, #12]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d184      	bne.n	800110c <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	6821      	ldr	r1, [r4, #0]
 8001204:	23f8      	movs	r3, #248	; 0xf8
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	fab3 f283 	clz	r2, r3
 800120e:	692b      	ldr	r3, [r5, #16]
 8001210:	4093      	lsls	r3, r2
 8001212:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001216:	4313      	orrs	r3, r2
 8001218:	6023      	str	r3, [r4, #0]
 800121a:	e745      	b.n	80010a8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121c:	68ea      	ldr	r2, [r5, #12]
 800121e:	2601      	movs	r6, #1
 8001220:	b30a      	cbz	r2, 8001266 <HAL_RCC_OscConfig+0x1d2>
 8001222:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800122e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	2702      	movs	r7, #2
 8001236:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001238:	f7ff f850 	bl	80002dc <HAL_GetTick>
 800123c:	4680      	mov	r8, r0
 800123e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	fa97 f3a7 	rbit	r3, r7
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	fa06 f303 	lsl.w	r3, r6, r3
 8001254:	4213      	tst	r3, r2
 8001256:	d1d4      	bne.n	8001202 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff f840 	bl	80002dc <HAL_GetTick>
 800125c:	eba0 0008 	sub.w	r0, r0, r8
 8001260:	2802      	cmp	r0, #2
 8001262:	d9ec      	bls.n	800123e <HAL_RCC_OscConfig+0x1aa>
 8001264:	e777      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
 8001266:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001272:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	2702      	movs	r7, #2
 800127a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800127c:	f7ff f82e 	bl	80002dc <HAL_GetTick>
 8001280:	4680      	mov	r8, r0
 8001282:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	6822      	ldr	r2, [r4, #0]
 8001288:	fa97 f3a7 	rbit	r3, r7
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	fa06 f303 	lsl.w	r3, r6, r3
 8001298:	4213      	tst	r3, r2
 800129a:	f43f af05 	beq.w	80010a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff f81d 	bl	80002dc <HAL_GetTick>
 80012a2:	eba0 0008 	sub.w	r0, r0, r8
 80012a6:	2802      	cmp	r0, #2
 80012a8:	d9eb      	bls.n	8001282 <HAL_RCC_OscConfig+0x1ee>
 80012aa:	e754      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ac:	696a      	ldr	r2, [r5, #20]
 80012ae:	4e43      	ldr	r6, [pc, #268]	; (80013bc <HAL_RCC_OscConfig+0x328>)
 80012b0:	4943      	ldr	r1, [pc, #268]	; (80013c0 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	2401      	movs	r4, #1
 80012b4:	b31a      	cbz	r2, 80012fe <HAL_RCC_OscConfig+0x26a>
 80012b6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	440b      	add	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	2702      	movs	r7, #2
 80012c4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80012c6:	f7ff f809 	bl	80002dc <HAL_GetTick>
 80012ca:	4680      	mov	r8, r0
 80012cc:	fa97 f3a7 	rbit	r3, r7
 80012d0:	fa97 f3a7 	rbit	r3, r7
 80012d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80012da:	fa97 f3a7 	rbit	r3, r7
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	fa04 f303 	lsl.w	r3, r4, r3
 80012ea:	4213      	tst	r3, r2
 80012ec:	f47f aee0 	bne.w	80010b0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7fe fff4 	bl	80002dc <HAL_GetTick>
 80012f4:	eba0 0008 	sub.w	r0, r0, r8
 80012f8:	2802      	cmp	r0, #2
 80012fa:	d9e7      	bls.n	80012cc <HAL_RCC_OscConfig+0x238>
 80012fc:	e72b      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
 80012fe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	440b      	add	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	2702      	movs	r7, #2
 800130c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800130e:	f7fe ffe5 	bl	80002dc <HAL_GetTick>
 8001312:	4680      	mov	r8, r0
 8001314:	fa97 f3a7 	rbit	r3, r7
 8001318:	fa97 f3a7 	rbit	r3, r7
 800131c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001322:	fa97 f3a7 	rbit	r3, r7
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	fa04 f303 	lsl.w	r3, r4, r3
 8001332:	4213      	tst	r3, r2
 8001334:	f43f aebc 	beq.w	80010b0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7fe ffd0 	bl	80002dc <HAL_GetTick>
 800133c:	eba0 0008 	sub.w	r0, r0, r8
 8001340:	2802      	cmp	r0, #2
 8001342:	d9e7      	bls.n	8001314 <HAL_RCC_OscConfig+0x280>
 8001344:	e707      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001346:	4c1d      	ldr	r4, [pc, #116]	; (80013bc <HAL_RCC_OscConfig+0x328>)
 8001348:	69e3      	ldr	r3, [r4, #28]
 800134a:	00d9      	lsls	r1, r3, #3
 800134c:	d434      	bmi.n	80013b8 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	69e3      	ldr	r3, [r4, #28]
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61e3      	str	r3, [r4, #28]
 8001356:	69e3      	ldr	r3, [r4, #28]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001360:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4f18      	ldr	r7, [pc, #96]	; (80013c4 <HAL_RCC_OscConfig+0x330>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	05da      	lsls	r2, r3, #23
 8001368:	d52e      	bpl.n	80013c8 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136a:	68ab      	ldr	r3, [r5, #8]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d13c      	bne.n	80013ea <HAL_RCC_OscConfig+0x356>
 8001370:	6a23      	ldr	r3, [r4, #32]
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001378:	f7fe ffb0 	bl	80002dc <HAL_GetTick>
 800137c:	2702      	movs	r7, #2
 800137e:	4682      	mov	sl, r0
 8001380:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001382:	f04f 0801 	mov.w	r8, #1
 8001386:	fa97 f3a7 	rbit	r3, r7
 800138a:	fa97 f3a7 	rbit	r3, r7
 800138e:	2b00      	cmp	r3, #0
 8001390:	d06b      	beq.n	800146a <HAL_RCC_OscConfig+0x3d6>
 8001392:	6a22      	ldr	r2, [r4, #32]
 8001394:	fa99 f3a9 	rbit	r3, r9
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa08 f303 	lsl.w	r3, r8, r3
 80013a4:	4213      	tst	r3, r2
 80013a6:	d057      	beq.n	8001458 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 80013a8:	2e00      	cmp	r6, #0
 80013aa:	f43f ae85 	beq.w	80010b8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ae:	69e3      	ldr	r3, [r4, #28]
 80013b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61e3      	str	r3, [r4, #28]
 80013b6:	e67f      	b.n	80010b8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80013b8:	2600      	movs	r6, #0
 80013ba:	e7d2      	b.n	8001362 <HAL_RCC_OscConfig+0x2ce>
 80013bc:	40021000 	.word	0x40021000
 80013c0:	10908120 	.word	0x10908120
 80013c4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80013d0:	f7fe ff84 	bl	80002dc <HAL_GetTick>
 80013d4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	d4c6      	bmi.n	800136a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013dc:	f7fe ff7e 	bl	80002dc <HAL_GetTick>
 80013e0:	eba0 0008 	sub.w	r0, r0, r8
 80013e4:	2864      	cmp	r0, #100	; 0x64
 80013e6:	d9f6      	bls.n	80013d6 <HAL_RCC_OscConfig+0x342>
 80013e8:	e6b5      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	bb3b      	cbnz	r3, 800143c <HAL_RCC_OscConfig+0x3a8>
 80013ec:	6a23      	ldr	r3, [r4, #32]
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6223      	str	r3, [r4, #32]
 80013f4:	6a23      	ldr	r3, [r4, #32]
 80013f6:	f023 0304 	bic.w	r3, r3, #4
 80013fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013fc:	f7fe ff6e 	bl	80002dc <HAL_GetTick>
 8001400:	2702      	movs	r7, #2
 8001402:	4682      	mov	sl, r0
 8001404:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001406:	f04f 0801 	mov.w	r8, #1
 800140a:	fa97 f3a7 	rbit	r3, r7
 800140e:	fa97 f3a7 	rbit	r3, r7
 8001412:	b373      	cbz	r3, 8001472 <HAL_RCC_OscConfig+0x3de>
 8001414:	6a22      	ldr	r2, [r4, #32]
 8001416:	fa99 f3a9 	rbit	r3, r9
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	fa08 f303 	lsl.w	r3, r8, r3
 8001426:	4213      	tst	r3, r2
 8001428:	d0be      	beq.n	80013a8 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7fe ff57 	bl	80002dc <HAL_GetTick>
 800142e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001432:	eba0 000a 	sub.w	r0, r0, sl
 8001436:	4298      	cmp	r0, r3
 8001438:	d9e7      	bls.n	800140a <HAL_RCC_OscConfig+0x376>
 800143a:	e68c      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	2b05      	cmp	r3, #5
 800143e:	6a23      	ldr	r3, [r4, #32]
 8001440:	d103      	bne.n	800144a <HAL_RCC_OscConfig+0x3b6>
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6223      	str	r3, [r4, #32]
 8001448:	e792      	b.n	8001370 <HAL_RCC_OscConfig+0x2dc>
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6223      	str	r3, [r4, #32]
 8001450:	6a23      	ldr	r3, [r4, #32]
 8001452:	f023 0304 	bic.w	r3, r3, #4
 8001456:	e78e      	b.n	8001376 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7fe ff40 	bl	80002dc <HAL_GetTick>
 800145c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001460:	eba0 000a 	sub.w	r0, r0, sl
 8001464:	4298      	cmp	r0, r3
 8001466:	d98e      	bls.n	8001386 <HAL_RCC_OscConfig+0x2f2>
 8001468:	e675      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
 800146a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001470:	e790      	b.n	8001394 <HAL_RCC_OscConfig+0x300>
 8001472:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001478:	e7cd      	b.n	8001416 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800147a:	4c44      	ldr	r4, [pc, #272]	; (800158c <HAL_RCC_OscConfig+0x4f8>)
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	f43f ae42 	beq.w	800110c <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001488:	2a02      	cmp	r2, #2
 800148a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800148e:	d158      	bne.n	8001542 <HAL_RCC_OscConfig+0x4ae>
 8001490:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800149c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014a6:	f7fe ff19 	bl	80002dc <HAL_GetTick>
 80014aa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80014ae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	2601      	movs	r6, #1
 80014b2:	fa97 f3a7 	rbit	r3, r7
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	fa97 f3a7 	rbit	r3, r7
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa06 f303 	lsl.w	r3, r6, r3
 80014c8:	4213      	tst	r3, r2
 80014ca:	d133      	bne.n	8001534 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80014d0:	f023 030f 	bic.w	r3, r3, #15
 80014d4:	4313      	orrs	r3, r2
 80014d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014d8:	6862      	ldr	r2, [r4, #4]
 80014da:	6a2b      	ldr	r3, [r5, #32]
 80014dc:	69e9      	ldr	r1, [r5, #28]
 80014de:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80014e2:	430b      	orrs	r3, r1
 80014e4:	4313      	orrs	r3, r2
 80014e6:	6063      	str	r3, [r4, #4]
 80014e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001502:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001504:	f7fe feea 	bl	80002dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001508:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800150a:	4607      	mov	r7, r0
 800150c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	fa95 f3a5 	rbit	r3, r5
 8001516:	fab3 f383 	clz	r3, r3
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	fa06 f303 	lsl.w	r3, r6, r3
 8001522:	4213      	tst	r3, r2
 8001524:	f47f adcc 	bne.w	80010c0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7fe fed8 	bl	80002dc <HAL_GetTick>
 800152c:	1bc0      	subs	r0, r0, r7
 800152e:	2802      	cmp	r0, #2
 8001530:	d9ec      	bls.n	800150c <HAL_RCC_OscConfig+0x478>
 8001532:	e610      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7fe fed2 	bl	80002dc <HAL_GetTick>
 8001538:	eba0 0008 	sub.w	r0, r0, r8
 800153c:	2802      	cmp	r0, #2
 800153e:	d9b8      	bls.n	80014b2 <HAL_RCC_OscConfig+0x41e>
 8001540:	e609      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
 8001542:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800154e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001558:	f7fe fec0 	bl	80002dc <HAL_GetTick>
 800155c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001560:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001562:	2601      	movs	r6, #1
 8001564:	fa95 f3a5 	rbit	r3, r5
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	fa95 f3a5 	rbit	r3, r5
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa06 f303 	lsl.w	r3, r6, r3
 800157a:	4213      	tst	r3, r2
 800157c:	f43f ada0 	beq.w	80010c0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001580:	f7fe feac 	bl	80002dc <HAL_GetTick>
 8001584:	1bc0      	subs	r0, r0, r7
 8001586:	2802      	cmp	r0, #2
 8001588:	d9ec      	bls.n	8001564 <HAL_RCC_OscConfig+0x4d0>
 800158a:	e5e4      	b.n	8001156 <HAL_RCC_OscConfig+0xc2>
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001590:	4911      	ldr	r1, [pc, #68]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x48>)
 8001592:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001594:	f003 020c 	and.w	r2, r3, #12
 8001598:	2a08      	cmp	r2, #8
 800159a:	d11a      	bne.n	80015d2 <HAL_RCC_GetSysClockFreq+0x42>
 800159c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80015a0:	fa92 f2a2 	rbit	r2, r2
 80015a4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015a6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80015ac:	fa90 f0a0 	rbit	r0, r0
 80015b0:	fab0 f080 	clz	r0, r0
 80015b4:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015bc:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015be:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80015c4:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80015c8:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015cc:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80015ce:	4348      	muls	r0, r1
 80015d0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002c24 	.word	0x08002c24
 80015e0:	08002c34 	.word	0x08002c34
 80015e4:	007a1200 	.word	0x007a1200

080015e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015e8:	4a5c      	ldr	r2, [pc, #368]	; (800175c <HAL_RCC_ClockConfig+0x174>)
 80015ea:	6813      	ldr	r3, [r2, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	428b      	cmp	r3, r1
{
 80015f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f6:	4606      	mov	r6, r0
 80015f8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015fa:	d330      	bcc.n	800165e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	6832      	ldr	r2, [r6, #0]
 80015fe:	0791      	lsls	r1, r2, #30
 8001600:	d43a      	bmi.n	8001678 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	07d2      	lsls	r2, r2, #31
 8001604:	d440      	bmi.n	8001688 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001606:	4a55      	ldr	r2, [pc, #340]	; (800175c <HAL_RCC_ClockConfig+0x174>)
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	429d      	cmp	r5, r3
 8001610:	f0c0 8092 	bcc.w	8001738 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	6832      	ldr	r2, [r6, #0]
 8001616:	4c52      	ldr	r4, [pc, #328]	; (8001760 <HAL_RCC_ClockConfig+0x178>)
 8001618:	f012 0f04 	tst.w	r2, #4
 800161c:	f040 8097 	bne.w	800174e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	0713      	lsls	r3, r2, #28
 8001622:	d506      	bpl.n	8001632 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	6932      	ldr	r2, [r6, #16]
 8001628:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800162c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001630:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001632:	f7ff ffad 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001636:	6863      	ldr	r3, [r4, #4]
 8001638:	22f0      	movs	r2, #240	; 0xf0
 800163a:	fa92 f2a2 	rbit	r2, r2
 800163e:	fab2 f282 	clz	r2, r2
 8001642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001646:	40d3      	lsrs	r3, r2
 8001648:	4a46      	ldr	r2, [pc, #280]	; (8001764 <HAL_RCC_ClockConfig+0x17c>)
 800164a:	5cd3      	ldrb	r3, [r2, r3]
 800164c:	40d8      	lsrs	r0, r3
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_ClockConfig+0x180>)
 8001650:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f7fe fe14 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 8001658:	2000      	movs	r0, #0
}
 800165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	f023 0307 	bic.w	r3, r3, #7
 8001664:	430b      	orrs	r3, r1
 8001666:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	4299      	cmp	r1, r3
 8001670:	d0c4      	beq.n	80015fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
 8001674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4939      	ldr	r1, [pc, #228]	; (8001760 <HAL_RCC_ClockConfig+0x178>)
 800167a:	68b0      	ldr	r0, [r6, #8]
 800167c:	684b      	ldr	r3, [r1, #4]
 800167e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001682:	4303      	orrs	r3, r0
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e7bc      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	6872      	ldr	r2, [r6, #4]
 800168a:	4c35      	ldr	r4, [pc, #212]	; (8001760 <HAL_RCC_ClockConfig+0x178>)
 800168c:	2a01      	cmp	r2, #1
 800168e:	d128      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xfa>
 8001690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001694:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001698:	6821      	ldr	r1, [r4, #0]
 800169a:	fa93 f3a3 	rbit	r3, r3
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	d0e1      	beq.n	8001672 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	431a      	orrs	r2, r3
 80016b6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80016b8:	f7fe fe10 	bl	80002dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016bc:	6873      	ldr	r3, [r6, #4]
 80016be:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80016c0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	d11f      	bne.n	8001708 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d099      	beq.n	8001606 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7fe fe03 	bl	80002dc <HAL_GetTick>
 80016d6:	1bc0      	subs	r0, r0, r7
 80016d8:	4540      	cmp	r0, r8
 80016da:	d9f5      	bls.n	80016c8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80016dc:	2003      	movs	r0, #3
 80016de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e2:	2a02      	cmp	r2, #2
 80016e4:	bf0c      	ite	eq
 80016e6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80016ea:	2302      	movne	r3, #2
 80016ec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f0:	6820      	ldr	r0, [r4, #0]
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4203      	tst	r3, r0
 8001706:	e7d1      	b.n	80016ac <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001708:	2b02      	cmp	r3, #2
 800170a:	d110      	bne.n	800172e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b08      	cmp	r3, #8
 8001714:	f43f af77 	beq.w	8001606 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001718:	f7fe fde0 	bl	80002dc <HAL_GetTick>
 800171c:	1bc0      	subs	r0, r0, r7
 800171e:	4540      	cmp	r0, r8
 8001720:	d9f4      	bls.n	800170c <HAL_RCC_ClockConfig+0x124>
 8001722:	e7db      	b.n	80016dc <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7fe fdda 	bl	80002dc <HAL_GetTick>
 8001728:	1bc0      	subs	r0, r0, r7
 800172a:	4540      	cmp	r0, r8
 800172c:	d8d6      	bhi.n	80016dc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	6863      	ldr	r3, [r4, #4]
 8001730:	f013 0f0c 	tst.w	r3, #12
 8001734:	d1f6      	bne.n	8001724 <HAL_RCC_ClockConfig+0x13c>
 8001736:	e766      	b.n	8001606 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f023 0307 	bic.w	r3, r3, #7
 800173e:	432b      	orrs	r3, r5
 8001740:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	429d      	cmp	r5, r3
 800174a:	d192      	bne.n	8001672 <HAL_RCC_ClockConfig+0x8a>
 800174c:	e762      	b.n	8001614 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	68f1      	ldr	r1, [r6, #12]
 8001752:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001756:	430b      	orrs	r3, r1
 8001758:	6063      	str	r3, [r4, #4]
 800175a:	e761      	b.n	8001620 <HAL_RCC_ClockConfig+0x38>
 800175c:	40022000 	.word	0x40022000
 8001760:	40021000 	.word	0x40021000
 8001764:	08002c71 	.word	0x08002c71
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800176c:	4b01      	ldr	r3, [pc, #4]	; (8001774 <HAL_RCC_GetHCLKFreq+0x8>)
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000

08001778 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_RCC_GetPCLK1Freq+0x24>)
 800177a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	fa92 f2a2 	rbit	r2, r2
 8001784:	fab2 f282 	clz	r2, r2
 8001788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800178c:	40d3      	lsrs	r3, r2
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001794:	6810      	ldr	r0, [r2, #0]
}    
 8001796:	40d8      	lsrs	r0, r3
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	08002c81 	.word	0x08002c81
 80017a4:	20000000 	.word	0x20000000

080017a8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	fa92 f2a2 	rbit	r2, r2
 80017b4:	fab2 f282 	clz	r2, r2
 80017b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017bc:	40d3      	lsrs	r3, r2
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017c4:	6810      	ldr	r0, [r2, #0]
} 
 80017c6:	40d8      	lsrs	r0, r3
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	08002c81 	.word	0x08002c81
 80017d4:	20000000 	.word	0x20000000

080017d8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017d8:	6803      	ldr	r3, [r0, #0]
{
 80017da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017de:	03df      	lsls	r7, r3, #15
{
 80017e0:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017e2:	d523      	bpl.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e4:	4d9b      	ldr	r5, [pc, #620]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017e6:	69eb      	ldr	r3, [r5, #28]
 80017e8:	00de      	lsls	r6, r3, #3
 80017ea:	f100 80d7 	bmi.w	800199c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	69eb      	ldr	r3, [r5, #28]
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61eb      	str	r3, [r5, #28]
 80017f6:	69eb      	ldr	r3, [r5, #28]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001800:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	4f95      	ldr	r7, [pc, #596]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	05d8      	lsls	r0, r3, #23
 8001808:	f140 80ca 	bpl.w	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800180c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800180e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001812:	f040 80da 	bne.w	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001816:	6a2b      	ldr	r3, [r5, #32]
 8001818:	6862      	ldr	r2, [r4, #4]
 800181a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800181e:	4313      	orrs	r3, r2
 8001820:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001822:	b11e      	cbz	r6, 800182c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	69eb      	ldr	r3, [r5, #28]
 8001826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800182c:	6820      	ldr	r0, [r4, #0]
 800182e:	07c3      	lsls	r3, r0, #31
 8001830:	d506      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001832:	4a88      	ldr	r2, [pc, #544]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001834:	68a1      	ldr	r1, [r4, #8]
 8001836:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001838:	f023 0303 	bic.w	r3, r3, #3
 800183c:	430b      	orrs	r3, r1
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001840:	0787      	lsls	r7, r0, #30
 8001842:	d506      	bpl.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001844:	4a83      	ldr	r2, [pc, #524]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001846:	68e1      	ldr	r1, [r4, #12]
 8001848:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800184a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800184e:	430b      	orrs	r3, r1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001852:	0746      	lsls	r6, r0, #29
 8001854:	d506      	bpl.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001856:	4a7f      	ldr	r2, [pc, #508]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001858:	6921      	ldr	r1, [r4, #16]
 800185a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800185c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001860:	430b      	orrs	r3, r1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001864:	0685      	lsls	r5, r0, #26
 8001866:	d506      	bpl.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001868:	4a7a      	ldr	r2, [pc, #488]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800186a:	69e1      	ldr	r1, [r4, #28]
 800186c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800186e:	f023 0310 	bic.w	r3, r3, #16
 8001872:	430b      	orrs	r3, r1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001876:	0381      	lsls	r1, r0, #14
 8001878:	d506      	bpl.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800187a:	4a76      	ldr	r2, [pc, #472]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800187c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001884:	430b      	orrs	r3, r1
 8001886:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001888:	0642      	lsls	r2, r0, #25
 800188a:	d506      	bpl.n	800189a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800188c:	4a71      	ldr	r2, [pc, #452]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800188e:	6a21      	ldr	r1, [r4, #32]
 8001890:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001892:	f023 0320 	bic.w	r3, r3, #32
 8001896:	430b      	orrs	r3, r1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800189a:	0343      	lsls	r3, r0, #13
 800189c:	d506      	bpl.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800189e:	4a6d      	ldr	r2, [pc, #436]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018ac:	0707      	lsls	r7, r0, #28
 80018ae:	d506      	bpl.n	80018be <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018b0:	4a68      	ldr	r2, [pc, #416]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018b2:	6961      	ldr	r1, [r4, #20]
 80018b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018ba:	430b      	orrs	r3, r1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80018be:	06c6      	lsls	r6, r0, #27
 80018c0:	d506      	bpl.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80018c2:	4a64      	ldr	r2, [pc, #400]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018c4:	69a1      	ldr	r1, [r4, #24]
 80018c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80018d0:	0585      	lsls	r5, r0, #22
 80018d2:	d506      	bpl.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80018d4:	4a5f      	ldr	r2, [pc, #380]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018d8:	6853      	ldr	r3, [r2, #4]
 80018da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018de:	430b      	orrs	r3, r1
 80018e0:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80018e2:	0601      	lsls	r1, r0, #24
 80018e4:	d506      	bpl.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80018e6:	4a5b      	ldr	r2, [pc, #364]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80018ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80018ec:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80018f0:	430b      	orrs	r3, r1
 80018f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80018f4:	05c2      	lsls	r2, r0, #23
 80018f6:	d506      	bpl.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80018f8:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80018fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80018fe:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001902:	430b      	orrs	r3, r1
 8001904:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001906:	04c3      	lsls	r3, r0, #19
 8001908:	d506      	bpl.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800190a:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800190c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800190e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001914:	430b      	orrs	r3, r1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001918:	0487      	lsls	r7, r0, #18
 800191a:	d506      	bpl.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800191e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001920:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001922:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001926:	430b      	orrs	r3, r1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800192a:	02c6      	lsls	r6, r0, #11
 800192c:	d506      	bpl.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800192e:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001930:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001932:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001938:	430b      	orrs	r3, r1
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800193c:	0285      	lsls	r5, r0, #10
 800193e:	d506      	bpl.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001940:	4a44      	ldr	r2, [pc, #272]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001942:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001944:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001946:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800194a:	430b      	orrs	r3, r1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800194e:	0241      	lsls	r1, r0, #9
 8001950:	d506      	bpl.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001952:	4a40      	ldr	r2, [pc, #256]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001954:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001956:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800195c:	430b      	orrs	r3, r1
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001960:	0202      	lsls	r2, r0, #8
 8001962:	d506      	bpl.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001964:	4a3b      	ldr	r2, [pc, #236]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001966:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001968:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800196a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800196e:	430b      	orrs	r3, r1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001972:	01c3      	lsls	r3, r0, #7
 8001974:	d506      	bpl.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001976:	4a37      	ldr	r2, [pc, #220]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001978:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800197a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800197c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001980:	430b      	orrs	r3, r1
 8001982:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001984:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001988:	d01c      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800198c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800198e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001994:	430b      	orrs	r3, r1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001998:	2000      	movs	r0, #0
 800199a:	e013      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 800199c:	2600      	movs	r6, #0
 800199e:	e730      	b.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80019a8:	f7fe fc98 	bl	80002dc <HAL_GetTick>
 80019ac:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	05d9      	lsls	r1, r3, #23
 80019b2:	f53f af2b 	bmi.w	800180c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7fe fc91 	bl	80002dc <HAL_GetTick>
 80019ba:	eba0 0008 	sub.w	r0, r0, r8
 80019be:	2864      	cmp	r0, #100	; 0x64
 80019c0:	d9f5      	bls.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
}
 80019c4:	b002      	add	sp, #8
 80019c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ca:	6862      	ldr	r2, [r4, #4]
 80019cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019d0:	4293      	cmp	r3, r2
 80019d2:	f43f af20 	beq.w	8001816 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019d6:	6a29      	ldr	r1, [r5, #32]
 80019d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019dc:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80019e0:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80019e4:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001a5c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80019e8:	fab2 f282 	clz	r2, r2
 80019ec:	4472      	add	r2, lr
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	2701      	movs	r7, #1
 80019f2:	6017      	str	r7, [r2, #0]
 80019f4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	4473      	add	r3, lr
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a04:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001a06:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a08:	f57f af05 	bpl.w	8001816 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001a0c:	f7fe fc66 	bl	80002dc <HAL_GetTick>
 8001a10:	f04f 0802 	mov.w	r8, #2
 8001a14:	4682      	mov	sl, r0
 8001a16:	46c1      	mov	r9, r8
 8001a18:	fa98 f3a8 	rbit	r3, r8
 8001a1c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	b1a3      	cbz	r3, 8001a4c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001a22:	6a2a      	ldr	r2, [r5, #32]
 8001a24:	fa99 f3a9 	rbit	r3, r9
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	fa07 f303 	lsl.w	r3, r7, r3
 8001a34:	4213      	tst	r3, r2
 8001a36:	f47f aeee 	bne.w	8001816 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7fe fc4f 	bl	80002dc <HAL_GetTick>
 8001a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a42:	eba0 000a 	sub.w	r0, r0, sl
 8001a46:	4298      	cmp	r0, r3
 8001a48:	d9e6      	bls.n	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001a4a:	e7ba      	b.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001a4c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a52:	e7e7      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	10908100 	.word	0x10908100

08001a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a64:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a66:	6921      	ldr	r1, [r4, #16]
 8001a68:	68a2      	ldr	r2, [r4, #8]
 8001a6a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a6c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	6961      	ldr	r1, [r4, #20]
 8001a72:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a74:	4977      	ldr	r1, [pc, #476]	; (8001c54 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a76:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a78:	4001      	ands	r1, r0
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a7e:	686a      	ldr	r2, [r5, #4]
 8001a80:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001a82:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a84:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001a8c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001a8e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001a90:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001a94:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a9a:	4a6f      	ldr	r2, [pc, #444]	; (8001c58 <UART_SetConfig+0x1f8>)
 8001a9c:	4295      	cmp	r5, r2
 8001a9e:	d112      	bne.n	8001ac6 <UART_SetConfig+0x66>
 8001aa0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001aa4:	496d      	ldr	r1, [pc, #436]	; (8001c5c <UART_SetConfig+0x1fc>)
 8001aa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aa8:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab0:	5c8a      	ldrb	r2, [r1, r2]
 8001ab2:	d066      	beq.n	8001b82 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001ab4:	2a08      	cmp	r2, #8
 8001ab6:	d819      	bhi.n	8001aec <UART_SetConfig+0x8c>
 8001ab8:	e8df f002 	tbb	[pc, r2]
 8001abc:	189e92c2 	.word	0x189e92c2
 8001ac0:	181818a9 	.word	0x181818a9
 8001ac4:	ac          	.byte	0xac
 8001ac5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ac6:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <UART_SetConfig+0x200>)
 8001ac8:	4295      	cmp	r5, r2
 8001aca:	d124      	bne.n	8001b16 <UART_SetConfig+0xb6>
 8001acc:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001ad0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ad2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001ad6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001ada:	f000 80a0 	beq.w	8001c1e <UART_SetConfig+0x1be>
 8001ade:	d807      	bhi.n	8001af0 <UART_SetConfig+0x90>
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	f000 80aa 	beq.w	8001c3a <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aea:	d076      	beq.n	8001bda <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001aec:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001aee:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001af0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001af4:	f000 8099 	beq.w	8001c2a <UART_SetConfig+0x1ca>
 8001af8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001afc:	d1f3      	bne.n	8001ae6 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b02:	d179      	bne.n	8001bf8 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b04:	6860      	ldr	r0, [r4, #4]
 8001b06:	0843      	lsrs	r3, r0, #1
 8001b08:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001b0c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b10:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b14:	e054      	b.n	8001bc0 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b16:	4a53      	ldr	r2, [pc, #332]	; (8001c64 <UART_SetConfig+0x204>)
 8001b18:	4295      	cmp	r5, r2
 8001b1a:	d10e      	bne.n	8001b3a <UART_SetConfig+0xda>
 8001b1c:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001b20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b22:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001b26:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001b2a:	d078      	beq.n	8001c1e <UART_SetConfig+0x1be>
 8001b2c:	d9d8      	bls.n	8001ae0 <UART_SetConfig+0x80>
 8001b2e:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001b32:	d07a      	beq.n	8001c2a <UART_SetConfig+0x1ca>
 8001b34:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001b38:	e7e0      	b.n	8001afc <UART_SetConfig+0x9c>
 8001b3a:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <UART_SetConfig+0x208>)
 8001b3c:	4295      	cmp	r5, r2
 8001b3e:	d10e      	bne.n	8001b5e <UART_SetConfig+0xfe>
 8001b40:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b46:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8001b4a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001b4e:	d066      	beq.n	8001c1e <UART_SetConfig+0x1be>
 8001b50:	d9c6      	bls.n	8001ae0 <UART_SetConfig+0x80>
 8001b52:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001b56:	d068      	beq.n	8001c2a <UART_SetConfig+0x1ca>
 8001b58:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001b5c:	e7ce      	b.n	8001afc <UART_SetConfig+0x9c>
 8001b5e:	4a43      	ldr	r2, [pc, #268]	; (8001c6c <UART_SetConfig+0x20c>)
 8001b60:	4295      	cmp	r5, r2
 8001b62:	d1c0      	bne.n	8001ae6 <UART_SetConfig+0x86>
 8001b64:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b6a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001b6e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001b72:	d054      	beq.n	8001c1e <UART_SetConfig+0x1be>
 8001b74:	d9b4      	bls.n	8001ae0 <UART_SetConfig+0x80>
 8001b76:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001b7a:	d056      	beq.n	8001c2a <UART_SetConfig+0x1ca>
 8001b7c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001b80:	e7bc      	b.n	8001afc <UART_SetConfig+0x9c>
    switch (clocksource)
 8001b82:	2a08      	cmp	r2, #8
 8001b84:	d829      	bhi.n	8001bda <UART_SetConfig+0x17a>
 8001b86:	a301      	add	r3, pc, #4	; (adr r3, 8001b8c <UART_SetConfig+0x12c>)
 8001b88:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001b8c:	08001bb1 	.word	0x08001bb1
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001b05 	.word	0x08001b05
 8001b98:	08001bdb 	.word	0x08001bdb
 8001b9c:	08001c25 	.word	0x08001c25
 8001ba0:	08001bdb 	.word	0x08001bdb
 8001ba4:	08001bdb 	.word	0x08001bdb
 8001ba8:	08001bdb 	.word	0x08001bdb
 8001bac:	08001c31 	.word	0x08001c31
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bb0:	f7ff fde2 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001bb4:	6861      	ldr	r1, [r4, #4]
 8001bb6:	084a      	lsrs	r2, r1, #1
 8001bb8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001bbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bc2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001bc4:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001bc8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bca:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001bd4:	f7ff fde8 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	e7ec      	b.n	8001bb4 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8001bda:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e7f1      	b.n	8001bc4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001be0:	f7ff fde2 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001bea:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <UART_SetConfig+0x1f8>)
 8001bf0:	b280      	uxth	r0, r0
 8001bf2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bf4:	2000      	movs	r0, #0
        break;
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	0853      	lsrs	r3, r2, #1
 8001bfc:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001c00:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	60eb      	str	r3, [r5, #12]
 8001c0c:	e7f2      	b.n	8001bf4 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c0e:	f7ff fcbf 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001c12:	e017      	b.n	8001c44 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c14:	6862      	ldr	r2, [r4, #4]
 8001c16:	0853      	lsrs	r3, r2, #1
 8001c18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c1c:	e7f2      	b.n	8001c04 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c22:	d1f4      	bne.n	8001c0e <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c24:	f7ff fcb4 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001c28:	e7c4      	b.n	8001bb4 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c2e:	d1f1      	bne.n	8001c14 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c30:	6860      	ldr	r0, [r4, #4]
 8001c32:	0843      	lsrs	r3, r0, #1
 8001c34:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c38:	e76a      	b.n	8001b10 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3e:	d0b7      	beq.n	8001bb0 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c40:	f7ff fd9a 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c44:	6863      	ldr	r3, [r4, #4]
 8001c46:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c4e:	b280      	uxth	r0, r0
 8001c50:	60e8      	str	r0, [r5, #12]
 8001c52:	e7cf      	b.n	8001bf4 <UART_SetConfig+0x194>
 8001c54:	efff69f3 	.word	0xefff69f3
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	08002c44 	.word	0x08002c44
 8001c60:	40004400 	.word	0x40004400
 8001c64:	40004800 	.word	0x40004800
 8001c68:	40004c00 	.word	0x40004c00
 8001c6c:	40005000 	.word	0x40005000

08001c70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c72:	07da      	lsls	r2, r3, #31
{
 8001c74:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c76:	d506      	bpl.n	8001c86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c78:	6801      	ldr	r1, [r0, #0]
 8001c7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c7c:	684a      	ldr	r2, [r1, #4]
 8001c7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c82:	4322      	orrs	r2, r4
 8001c84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c86:	079c      	lsls	r4, r3, #30
 8001c88:	d506      	bpl.n	8001c98 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c8a:	6801      	ldr	r1, [r0, #0]
 8001c8c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c8e:	684a      	ldr	r2, [r1, #4]
 8001c90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c94:	4322      	orrs	r2, r4
 8001c96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c98:	0759      	lsls	r1, r3, #29
 8001c9a:	d506      	bpl.n	8001caa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c9c:	6801      	ldr	r1, [r0, #0]
 8001c9e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ca0:	684a      	ldr	r2, [r1, #4]
 8001ca2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001caa:	071a      	lsls	r2, r3, #28
 8001cac:	d506      	bpl.n	8001cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cae:	6801      	ldr	r1, [r0, #0]
 8001cb0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cb2:	684a      	ldr	r2, [r1, #4]
 8001cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb8:	4322      	orrs	r2, r4
 8001cba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cbc:	06dc      	lsls	r4, r3, #27
 8001cbe:	d506      	bpl.n	8001cce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cc0:	6801      	ldr	r1, [r0, #0]
 8001cc2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001cc4:	688a      	ldr	r2, [r1, #8]
 8001cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cca:	4322      	orrs	r2, r4
 8001ccc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cce:	0699      	lsls	r1, r3, #26
 8001cd0:	d506      	bpl.n	8001ce0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cd2:	6801      	ldr	r1, [r0, #0]
 8001cd4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001cd6:	688a      	ldr	r2, [r1, #8]
 8001cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cdc:	4322      	orrs	r2, r4
 8001cde:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ce0:	065a      	lsls	r2, r3, #25
 8001ce2:	d50f      	bpl.n	8001d04 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ce4:	6801      	ldr	r1, [r0, #0]
 8001ce6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ce8:	684a      	ldr	r2, [r1, #4]
 8001cea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001cee:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cf0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cf4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cf6:	d105      	bne.n	8001d04 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cf8:	684a      	ldr	r2, [r1, #4]
 8001cfa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001cfc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d00:	4322      	orrs	r2, r4
 8001d02:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	d506      	bpl.n	8001d16 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d08:	6802      	ldr	r2, [r0, #0]
 8001d0a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d0c:	6853      	ldr	r3, [r2, #4]
 8001d0e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d12:	430b      	orrs	r3, r1
 8001d14:	6053      	str	r3, [r2, #4]
 8001d16:	bd10      	pop	{r4, pc}

08001d18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1c:	9d06      	ldr	r5, [sp, #24]
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460f      	mov	r7, r1
 8001d22:	4616      	mov	r6, r2
 8001d24:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d26:	6821      	ldr	r1, [r4, #0]
 8001d28:	69ca      	ldr	r2, [r1, #28]
 8001d2a:	ea37 0302 	bics.w	r3, r7, r2
 8001d2e:	bf0c      	ite	eq
 8001d30:	2201      	moveq	r2, #1
 8001d32:	2200      	movne	r2, #0
 8001d34:	42b2      	cmp	r2, r6
 8001d36:	d002      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
}
 8001d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001d3e:	1c6b      	adds	r3, r5, #1
 8001d40:	d0f2      	beq.n	8001d28 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d42:	b99d      	cbnz	r5, 8001d6c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001d56:	2320      	movs	r3, #32
 8001d58:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001d5c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001d60:	2300      	movs	r3, #0
 8001d62:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001d66:	2003      	movs	r0, #3
 8001d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d6c:	f7fe fab6 	bl	80002dc <HAL_GetTick>
 8001d70:	eba0 0008 	sub.w	r0, r0, r8
 8001d74:	4285      	cmp	r5, r0
 8001d76:	d2d6      	bcs.n	8001d26 <UART_WaitOnFlagUntilTimeout+0xe>
 8001d78:	e7e4      	b.n	8001d44 <UART_WaitOnFlagUntilTimeout+0x2c>

08001d7a <HAL_UART_Transmit>:
{
 8001d7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d7e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001d80:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001d84:	2b20      	cmp	r3, #32
{
 8001d86:	4604      	mov	r4, r0
 8001d88:	460d      	mov	r5, r1
 8001d8a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001d8c:	d14c      	bne.n	8001e28 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001d8e:	2900      	cmp	r1, #0
 8001d90:	d048      	beq.n	8001e24 <HAL_UART_Transmit+0xaa>
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	d046      	beq.n	8001e24 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001d96:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d044      	beq.n	8001e28 <HAL_UART_Transmit+0xae>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da8:	2321      	movs	r3, #33	; 0x21
 8001daa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001dae:	f7fe fa95 	bl	80002dc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001db2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001db6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001db8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001dbc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	b962      	cbnz	r2, 8001dde <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dc4:	9700      	str	r7, [sp, #0]
 8001dc6:	4633      	mov	r3, r6
 8001dc8:	2140      	movs	r1, #64	; 0x40
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff ffa4 	bl	8001d18 <UART_WaitOnFlagUntilTimeout>
 8001dd0:	b998      	cbnz	r0, 8001dfa <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001dd8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001ddc:	e00e      	b.n	8001dfc <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001dde:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001de2:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	2200      	movs	r2, #0
 8001dee:	4633      	mov	r3, r6
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	4620      	mov	r0, r4
 8001df4:	f7ff ff90 	bl	8001d18 <UART_WaitOnFlagUntilTimeout>
 8001df8:	b118      	cbz	r0, 8001e02 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
}
 8001dfc:	b002      	add	sp, #8
 8001dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e02:	68a3      	ldr	r3, [r4, #8]
 8001e04:	6822      	ldr	r2, [r4, #0]
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	d107      	bne.n	8001e1c <HAL_UART_Transmit+0xa2>
 8001e0c:	6923      	ldr	r3, [r4, #16]
 8001e0e:	b92b      	cbnz	r3, 8001e1c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e10:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e18:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001e1a:	e7cf      	b.n	8001dbc <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e1c:	782b      	ldrb	r3, [r5, #0]
 8001e1e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001e20:	3501      	adds	r5, #1
 8001e22:	e7cb      	b.n	8001dbc <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
 8001e26:	e7e9      	b.n	8001dfc <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001e28:	2002      	movs	r0, #2
 8001e2a:	e7e7      	b.n	8001dfc <HAL_UART_Transmit+0x82>

08001e2c <UART_CheckIdleState>:
{
 8001e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e2e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	2600      	movs	r6, #0
 8001e32:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001e34:	f7fe fa52 	bl	80002dc <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001e3e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e40:	d417      	bmi.n	8001e72 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	075b      	lsls	r3, r3, #29
 8001e48:	d50a      	bpl.n	8001e60 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	462b      	mov	r3, r5
 8001e54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff ff5d 	bl	8001d18 <UART_WaitOnFlagUntilTimeout>
 8001e5e:	b9a0      	cbnz	r0, 8001e8a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001e60:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e62:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001e64:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001e68:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001e6c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001e70:	e00c      	b.n	8001e8c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	4632      	mov	r2, r6
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff ff49 	bl	8001d18 <UART_WaitOnFlagUntilTimeout>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d0db      	beq.n	8001e42 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
}
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}

08001e90 <HAL_UART_Init>:
{
 8001e90:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e92:	4604      	mov	r4, r0
 8001e94:	b360      	cbz	r0, 8001ef0 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e96:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e9e:	b91b      	cbnz	r3, 8001ea8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ea0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001ea4:	f000 f9ca 	bl	800223c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ea8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001eaa:	2324      	movs	r3, #36	; 0x24
 8001eac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f7ff fdd1 	bl	8001a60 <UART_SetConfig>
 8001ebe:	2801      	cmp	r0, #1
 8001ec0:	d016      	beq.n	8001ef0 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ec4:	b113      	cbz	r3, 8001ecc <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff fed2 	bl	8001c70 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001edc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001ee4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001eec:	f7ff bf9e 	b.w	8001e2c <UART_CheckIdleState>
}
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <HAL_ADC_ConvCpltCallback>:
uint32_t adc[2];
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adc[0]=adc_buf[0];
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <HAL_ADC_ConvCpltCallback+0x10>)
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_ADC_ConvCpltCallback+0x14>)
 8001ef8:	6811      	ldr	r1, [r2, #0]
	adc[1]=adc_buf[1];
 8001efa:	6852      	ldr	r2, [r2, #4]
	adc[0]=adc_buf[0];
 8001efc:	6019      	str	r1, [r3, #0]
	adc[1]=adc_buf[1];
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000134 	.word	0x20000134
 8001f08:	2000012c 	.word	0x2000012c

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f10:	2302      	movs	r3, #2
 8001f12:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f14:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f16:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f1c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f1e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f20:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001f22:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f24:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f26:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001f28:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f2a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2c:	f7ff f8b2 	bl	8001094 <HAL_RCC_OscConfig>
 8001f30:	4601      	mov	r1, r0
 8001f32:	b100      	cbz	r0, 8001f36 <SystemClock_Config+0x2a>
 8001f34:	e7fe      	b.n	8001f34 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f36:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f38:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f3c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f3e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f40:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f42:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f44:	f7ff fb50 	bl	80015e8 <HAL_RCC_ClockConfig>
 8001f48:	b100      	cbz	r0, 8001f4c <SystemClock_Config+0x40>
 8001f4a:	e7fe      	b.n	8001f4a <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34;
 8001f4c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001f50:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f52:	9013      	str	r0, [sp, #76]	; 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV2;
 8001f54:	f44f 5308 	mov.w	r3, #8704	; 0x2200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV2;
 8001f5a:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5c:	f7ff fc3c 	bl	80017d8 <HAL_RCCEx_PeriphCLKConfig>
 8001f60:	4604      	mov	r4, r0
 8001f62:	b100      	cbz	r0, 8001f66 <SystemClock_Config+0x5a>
 8001f64:	e7fe      	b.n	8001f64 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f66:	f7ff fc01 	bl	800176c <HAL_RCC_GetHCLKFreq>
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f72:	f7fe febb 	bl	8000cec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f76:	2004      	movs	r0, #4
 8001f78:	f7fe fece 	bl	8000d18 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	4621      	mov	r1, r4
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7fe fe72 	bl	8000c6c <HAL_NVIC_SetPriority>
}
 8001f88:	b026      	add	sp, #152	; 0x98
 8001f8a:	bd10      	pop	{r4, pc}

08001f8c <main>:
{
 8001f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f90:	4d5e      	ldr	r5, [pc, #376]	; (800210c <main+0x180>)
{
 8001f92:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8001f94:	f7fe f988 	bl	80002a8 <HAL_Init>
  SystemClock_Config();
 8001f98:	f7ff ffb8 	bl	8001f0c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	696b      	ldr	r3, [r5, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001f9e:	485c      	ldr	r0, [pc, #368]	; (8002110 <main+0x184>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fa4:	616b      	str	r3, [r5, #20]
 8001fa6:	696b      	ldr	r3, [r5, #20]
 8001fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	696b      	ldr	r3, [r5, #20]
 8001fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb6:	616b      	str	r3, [r5, #20]
 8001fb8:	696b      	ldr	r3, [r5, #20]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	696b      	ldr	r3, [r5, #20]
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	616b      	str	r3, [r5, #20]
 8001fca:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001fd2:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	9304      	str	r3, [sp, #16]
 8001fd6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001fd8:	f7ff f852 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2122      	movs	r1, #34	; 0x22
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fe6:	f7ff f84b 	bl	8001080 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fea:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	a908      	add	r1, sp, #32
 8001fee:	4848      	ldr	r0, [pc, #288]	; (8002110 <main+0x184>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ff0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff8:	f7fe ff72 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001ffc:	2322      	movs	r3, #34	; 0x22
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	a908      	add	r1, sp, #32
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002004:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f7fe ff68 	bl	8000ee0 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002010:	696b      	ldr	r3, [r5, #20]
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	616b      	str	r3, [r5, #20]
 8002018:	696b      	ldr	r3, [r5, #20]
  huart2.Instance = USART2;
 800201a:	4d3e      	ldr	r5, [pc, #248]	; (8002114 <main+0x188>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201c:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002020:	4622      	mov	r2, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002022:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002024:	4621      	mov	r1, r4
 8002026:	203c      	movs	r0, #60	; 0x3c
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002028:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800202a:	f7fe fe1f 	bl	8000c6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800202e:	203c      	movs	r0, #60	; 0x3c
 8002030:	f7fe fe50 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 8002034:	4a38      	ldr	r2, [pc, #224]	; (8002118 <main+0x18c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 8002038:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 800203c:	f04f 080c 	mov.w	r8, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002040:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 8002042:	e885 000c 	stmia.w	r5, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002046:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002048:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800204a:	f8c5 8014 	str.w	r8, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	622c      	str	r4, [r5, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002054:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002056:	f7ff ff1b 	bl	8001e90 <HAL_UART_Init>
 800205a:	b100      	cbz	r0, 800205e <main+0xd2>
 800205c:	e7fe      	b.n	800205c <main+0xd0>
  hadc3.Instance = ADC3;
 800205e:	4c2f      	ldr	r4, [pc, #188]	; (800211c <main+0x190>)
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <main+0x194>)
 8002062:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002064:	6060      	str	r0, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002066:	60a0      	str	r0, [r4, #8]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002068:	6260      	str	r0, [r4, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800206a:	6320      	str	r0, [r4, #48]	; 0x30
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800206c:	60e0      	str	r0, [r4, #12]
  hadc3.Init.NbrOfConversion = 2;
 800206e:	2702      	movs	r7, #2
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002070:	2304      	movs	r3, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002072:	61a0      	str	r0, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002074:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002076:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002078:	6126      	str	r6, [r4, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800207a:	61e6      	str	r6, [r4, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800207c:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 2;
 800207e:	6227      	str	r7, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002080:	6366      	str	r6, [r4, #52]	; 0x34
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002082:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002084:	f7fe f9d8 	bl	8000438 <HAL_ADC_Init>
 8002088:	b100      	cbz	r0, 800208c <main+0x100>
 800208a:	e7fe      	b.n	800208a <main+0xfe>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800208c:	a90e      	add	r1, sp, #56	; 0x38
 800208e:	f841 0d24 	str.w	r0, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8002092:	4620      	mov	r0, r4
 8002094:	f7fe fd48 	bl	8000b28 <HAL_ADCEx_MultiModeConfigChannel>
 8002098:	b100      	cbz	r0, 800209c <main+0x110>
 800209a:	e7fe      	b.n	800209a <main+0x10e>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800209c:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800209e:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020a0:	900c      	str	r0, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 80020a2:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020a4:	a908      	add	r1, sp, #32
 80020a6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 80020a8:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ac:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020ae:	f7fe fba3 	bl	80007f8 <HAL_ADC_ConfigChannel>
 80020b2:	b100      	cbz	r0, 80020b6 <main+0x12a>
 80020b4:	e7fe      	b.n	80020b4 <main+0x128>
  sConfig.Channel = ADC_CHANNEL_5;
 80020b6:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020b8:	a908      	add	r1, sp, #32
 80020ba:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 80020bc:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020be:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80020c0:	f7fe fb9a 	bl	80007f8 <HAL_ADC_ConfigChannel>
 80020c4:	b100      	cbz	r0, 80020c8 <main+0x13c>
 80020c6:	e7fe      	b.n	80020c6 <main+0x13a>
  HAL_UART_Transmit(&huart2,"start1\n\r",8,0xFFFF);
 80020c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020cc:	2208      	movs	r2, #8
 80020ce:	4915      	ldr	r1, [pc, #84]	; (8002124 <main+0x198>)
 80020d0:	4628      	mov	r0, r5
 80020d2:	f7ff fe52 	bl	8001d7a <HAL_UART_Transmit>
  HAL_StatusTypeDef status=HAL_ADC_Start_DMA(&hadc3,adc_buf,2);
 80020d6:	463a      	mov	r2, r7
 80020d8:	4913      	ldr	r1, [pc, #76]	; (8002128 <main+0x19c>)
 80020da:	4620      	mov	r0, r4
 80020dc:	f7fe fae0 	bl	80006a0 <HAL_ADC_Start_DMA>
  sprintf(tosen,"%d\n\r",status);
 80020e0:	4912      	ldr	r1, [pc, #72]	; (800212c <main+0x1a0>)
 80020e2:	4602      	mov	r2, r0
 80020e4:	a808      	add	r0, sp, #32
 80020e6:	f000 f965 	bl	80023b4 <siprintf>
  HAL_UART_Transmit(&huart2,tosen,sizeof(tosen),0xFFFF);
 80020ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ee:	2214      	movs	r2, #20
 80020f0:	a908      	add	r1, sp, #32
 80020f2:	4628      	mov	r0, r5
 80020f4:	f7ff fe41 	bl	8001d7a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80020f8:	2120      	movs	r1, #32
 80020fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fe:	f7fe ffc4 	bl	800108a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002106:	f7fe f8ef 	bl	80002e8 <HAL_Delay>
 800210a:	e7f5      	b.n	80020f8 <main+0x16c>
 800210c:	40021000 	.word	0x40021000
 8002110:	48000800 	.word	0x48000800
 8002114:	2000013c 	.word	0x2000013c
 8002118:	40004400 	.word	0x40004400
 800211c:	200000d8 	.word	0x200000d8
 8002120:	50000400 	.word	0x50000400
 8002124:	08002c48 	.word	0x08002c48
 8002128:	20000134 	.word	0x20000134
 800212c:	08002c51 	.word	0x08002c51

08002130 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002130:	e7fe      	b.n	8002130 <_Error_Handler>
	...

08002134 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_MspInit+0x78>)
{
 8002136:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	f7fe fd7c 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	4611      	mov	r1, r2
 8002154:	f06f 000b 	mvn.w	r0, #11
 8002158:	f7fe fd88 	bl	8000c6c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	4611      	mov	r1, r2
 8002160:	f06f 000a 	mvn.w	r0, #10
 8002164:	f7fe fd82 	bl	8000c6c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	4611      	mov	r1, r2
 800216c:	f06f 0009 	mvn.w	r0, #9
 8002170:	f7fe fd7c 	bl	8000c6c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	4611      	mov	r1, r2
 8002178:	f06f 0004 	mvn.w	r0, #4
 800217c:	f7fe fd76 	bl	8000c6c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	4611      	mov	r1, r2
 8002184:	f06f 0003 	mvn.w	r0, #3
 8002188:	f7fe fd70 	bl	8000c6c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	4611      	mov	r1, r2
 8002190:	f06f 0001 	mvn.w	r0, #1
 8002194:	f7fe fd6a 	bl	8000c6c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	4611      	mov	r1, r2
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7fe fd64 	bl	8000c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a4:	b003      	add	sp, #12
 80021a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 80021b2:	6802      	ldr	r2, [r0, #0]
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_ADC_MspInit+0x78>)
 80021b6:	429a      	cmp	r2, r3
{
 80021b8:	b086      	sub	sp, #24
 80021ba:	4606      	mov	r6, r0
  if(hadc->Instance==ADC3)
 80021bc:	d131      	bne.n	8002222 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 80021be:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80021c2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    PB0     ------> ADC3_IN12
    PB13     ------> ADC3_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2500      	movs	r5, #0
    __HAL_RCC_ADC34_CLK_ENABLE();
 80021c8:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	4818      	ldr	r0, [pc, #96]	; (800222c <HAL_ADC_MspInit+0x7c>)

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 80021cc:	4c18      	ldr	r4, [pc, #96]	; (8002230 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 80021ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80021d2:	615a      	str	r2, [r3, #20]
 80021d4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC34_CLK_ENABLE();
 80021d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80021e0:	f242 0301 	movw	r3, #8193	; 0x2001
 80021e4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e8:	2303      	movs	r3, #3
 80021ea:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f7fe fe78 	bl	8000ee0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_ADC_MspInit+0x84>)
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	60a5      	str	r5, [r4, #8]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f4:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	60e3      	str	r3, [r4, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	6123      	str	r3, [r4, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002206:	6163      	str	r3, [r4, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002208:	4620      	mov	r0, r4
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800220a:	2320      	movs	r3, #32
 800220c:	61a3      	str	r3, [r4, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800220e:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002210:	f7fe fdb6 	bl	8000d80 <HAL_DMA_Init>
 8002214:	b118      	cbz	r0, 800221e <HAL_ADC_MspInit+0x6e>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002216:	2173      	movs	r1, #115	; 0x73
 8002218:	4807      	ldr	r0, [pc, #28]	; (8002238 <HAL_ADC_MspInit+0x88>)
 800221a:	f7ff ff89 	bl	8002130 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800221e:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002220:	6266      	str	r6, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002222:	b006      	add	sp, #24
 8002224:	bd70      	pop	{r4, r5, r6, pc}
 8002226:	bf00      	nop
 8002228:	50000400 	.word	0x50000400
 800222c:	48000400 	.word	0x48000400
 8002230:	20000094 	.word	0x20000094
 8002234:	40020458 	.word	0x40020458
 8002238:	08002c56 	.word	0x08002c56

0800223c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800223c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800223e:	6802      	ldr	r2, [r0, #0]
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_UART_MspInit+0x44>)
 8002242:	429a      	cmp	r2, r3
 8002244:	d119      	bne.n	800227a <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002246:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002252:	61da      	str	r2, [r3, #28]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800225e:	230c      	movs	r3, #12
 8002260:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002272:	2307      	movs	r3, #7
 8002274:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f7fe fe33 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800227a:	b007      	add	sp, #28
 800227c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002280:	40004400 	.word	0x40004400

08002284 <NMI_Handler>:
 8002284:	4770      	bx	lr

08002286 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler>

08002288 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002288:	e7fe      	b.n	8002288 <MemManage_Handler>

0800228a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800228a:	e7fe      	b.n	800228a <BusFault_Handler>

0800228c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler>

0800228e <SVC_Handler>:
 800228e:	4770      	bx	lr

08002290 <DebugMon_Handler>:
 8002290:	4770      	bx	lr

08002292 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002294:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002296:	f7fe f819 	bl	80002cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800229e:	f7fe bd48 	b.w	8000d32 <HAL_SYSTICK_IRQHandler>
	...

080022a4 <DMA2_Channel5_IRQHandler>:
void DMA2_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80022a4:	4801      	ldr	r0, [pc, #4]	; (80022ac <DMA2_Channel5_IRQHandler+0x8>)
 80022a6:	f7fe bdd3 	b.w	8000e50 <HAL_DMA_IRQHandler>
 80022aa:	bf00      	nop
 80022ac:	20000094 	.word	0x20000094

080022b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b0:	4915      	ldr	r1, [pc, #84]	; (8002308 <SystemInit+0x58>)
 80022b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <SystemInit+0x5c>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80022c8:	6858      	ldr	r0, [r3, #4]
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <SystemInit+0x60>)
 80022cc:	4002      	ands	r2, r0
 80022ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80022d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022da:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80022ea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	f022 020f 	bic.w	r2, r2, #15
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80022f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <SystemInit+0x64>)
 80022f8:	4002      	ands	r2, r0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	40021000 	.word	0x40021000
 8002310:	f87fc00c 	.word	0xf87fc00c
 8002314:	ff00fccc 	.word	0xff00fccc

08002318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800231c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800231e:	e003      	b.n	8002328 <LoopCopyDataInit>

08002320 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002322:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002324:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002326:	3104      	adds	r1, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <LoopForever+0xa>)
	ldr	r3, =_edata
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <LoopForever+0xe>)
	adds	r2, r0, r1
 800232c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800232e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002330:	d3f6      	bcc.n	8002320 <CopyDataInit>
	ldr	r2, =_sbss
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002334:	e002      	b.n	800233c <LoopFillZerobss>

08002336 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002336:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002338:	f842 3b04 	str.w	r3, [r2], #4

0800233c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <LoopForever+0x16>)
	cmp	r2, r3
 800233e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002340:	d3f9      	bcc.n	8002336 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002342:	f7ff ffb5 	bl	80022b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f000 f811 	bl	800236c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800234a:	f7ff fe1f 	bl	8001f8c <main>

0800234e <LoopForever>:

LoopForever:
    b LoopForever
 800234e:	e7fe      	b.n	800234e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002350:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002354:	08002cc4 	.word	0x08002cc4
	ldr	r0, =_sdata
 8002358:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800235c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002360:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002364:	200001b0 	.word	0x200001b0

08002368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC1_2_IRQHandler>
	...

0800236c <__libc_init_array>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4e0d      	ldr	r6, [pc, #52]	; (80023a4 <__libc_init_array+0x38>)
 8002370:	4c0d      	ldr	r4, [pc, #52]	; (80023a8 <__libc_init_array+0x3c>)
 8002372:	1ba4      	subs	r4, r4, r6
 8002374:	10a4      	asrs	r4, r4, #2
 8002376:	2500      	movs	r5, #0
 8002378:	42a5      	cmp	r5, r4
 800237a:	d109      	bne.n	8002390 <__libc_init_array+0x24>
 800237c:	4e0b      	ldr	r6, [pc, #44]	; (80023ac <__libc_init_array+0x40>)
 800237e:	4c0c      	ldr	r4, [pc, #48]	; (80023b0 <__libc_init_array+0x44>)
 8002380:	f000 fc44 	bl	8002c0c <_init>
 8002384:	1ba4      	subs	r4, r4, r6
 8002386:	10a4      	asrs	r4, r4, #2
 8002388:	2500      	movs	r5, #0
 800238a:	42a5      	cmp	r5, r4
 800238c:	d105      	bne.n	800239a <__libc_init_array+0x2e>
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002394:	4798      	blx	r3
 8002396:	3501      	adds	r5, #1
 8002398:	e7ee      	b.n	8002378 <__libc_init_array+0xc>
 800239a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800239e:	4798      	blx	r3
 80023a0:	3501      	adds	r5, #1
 80023a2:	e7f2      	b.n	800238a <__libc_init_array+0x1e>
 80023a4:	08002cbc 	.word	0x08002cbc
 80023a8:	08002cbc 	.word	0x08002cbc
 80023ac:	08002cbc 	.word	0x08002cbc
 80023b0:	08002cc0 	.word	0x08002cc0

080023b4 <siprintf>:
 80023b4:	b40e      	push	{r1, r2, r3}
 80023b6:	b500      	push	{lr}
 80023b8:	b09c      	sub	sp, #112	; 0x70
 80023ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80023be:	ab1d      	add	r3, sp, #116	; 0x74
 80023c0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80023c4:	9002      	str	r0, [sp, #8]
 80023c6:	9006      	str	r0, [sp, #24]
 80023c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023cc:	480a      	ldr	r0, [pc, #40]	; (80023f8 <siprintf+0x44>)
 80023ce:	9104      	str	r1, [sp, #16]
 80023d0:	9107      	str	r1, [sp, #28]
 80023d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80023da:	f8ad 1016 	strh.w	r1, [sp, #22]
 80023de:	6800      	ldr	r0, [r0, #0]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	a902      	add	r1, sp, #8
 80023e4:	f000 f866 	bl	80024b4 <_svfiprintf_r>
 80023e8:	9b02      	ldr	r3, [sp, #8]
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	b01c      	add	sp, #112	; 0x70
 80023f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80023f4:	b003      	add	sp, #12
 80023f6:	4770      	bx	lr
 80023f8:	20000004 	.word	0x20000004

080023fc <__ssputs_r>:
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002400:	688e      	ldr	r6, [r1, #8]
 8002402:	429e      	cmp	r6, r3
 8002404:	4682      	mov	sl, r0
 8002406:	460c      	mov	r4, r1
 8002408:	4691      	mov	r9, r2
 800240a:	4698      	mov	r8, r3
 800240c:	d835      	bhi.n	800247a <__ssputs_r+0x7e>
 800240e:	898a      	ldrh	r2, [r1, #12]
 8002410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002414:	d031      	beq.n	800247a <__ssputs_r+0x7e>
 8002416:	6825      	ldr	r5, [r4, #0]
 8002418:	6909      	ldr	r1, [r1, #16]
 800241a:	1a6f      	subs	r7, r5, r1
 800241c:	6965      	ldr	r5, [r4, #20]
 800241e:	2302      	movs	r3, #2
 8002420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002424:	fb95 f5f3 	sdiv	r5, r5, r3
 8002428:	f108 0301 	add.w	r3, r8, #1
 800242c:	443b      	add	r3, r7
 800242e:	429d      	cmp	r5, r3
 8002430:	bf38      	it	cc
 8002432:	461d      	movcc	r5, r3
 8002434:	0553      	lsls	r3, r2, #21
 8002436:	d531      	bpl.n	800249c <__ssputs_r+0xa0>
 8002438:	4629      	mov	r1, r5
 800243a:	f000 fb39 	bl	8002ab0 <_malloc_r>
 800243e:	4606      	mov	r6, r0
 8002440:	b950      	cbnz	r0, 8002458 <__ssputs_r+0x5c>
 8002442:	230c      	movs	r3, #12
 8002444:	f8ca 3000 	str.w	r3, [sl]
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244e:	81a3      	strh	r3, [r4, #12]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002458:	463a      	mov	r2, r7
 800245a:	6921      	ldr	r1, [r4, #16]
 800245c:	f000 fab4 	bl	80029c8 <memcpy>
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246a:	81a3      	strh	r3, [r4, #12]
 800246c:	6126      	str	r6, [r4, #16]
 800246e:	6165      	str	r5, [r4, #20]
 8002470:	443e      	add	r6, r7
 8002472:	1bed      	subs	r5, r5, r7
 8002474:	6026      	str	r6, [r4, #0]
 8002476:	60a5      	str	r5, [r4, #8]
 8002478:	4646      	mov	r6, r8
 800247a:	4546      	cmp	r6, r8
 800247c:	bf28      	it	cs
 800247e:	4646      	movcs	r6, r8
 8002480:	4632      	mov	r2, r6
 8002482:	4649      	mov	r1, r9
 8002484:	6820      	ldr	r0, [r4, #0]
 8002486:	f000 faaa 	bl	80029de <memmove>
 800248a:	68a3      	ldr	r3, [r4, #8]
 800248c:	1b9b      	subs	r3, r3, r6
 800248e:	60a3      	str	r3, [r4, #8]
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	441e      	add	r6, r3
 8002494:	6026      	str	r6, [r4, #0]
 8002496:	2000      	movs	r0, #0
 8002498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249c:	462a      	mov	r2, r5
 800249e:	f000 fb65 	bl	8002b6c <_realloc_r>
 80024a2:	4606      	mov	r6, r0
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d1e1      	bne.n	800246c <__ssputs_r+0x70>
 80024a8:	6921      	ldr	r1, [r4, #16]
 80024aa:	4650      	mov	r0, sl
 80024ac:	f000 fab2 	bl	8002a14 <_free_r>
 80024b0:	e7c7      	b.n	8002442 <__ssputs_r+0x46>
	...

080024b4 <_svfiprintf_r>:
 80024b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b8:	b09d      	sub	sp, #116	; 0x74
 80024ba:	4680      	mov	r8, r0
 80024bc:	9303      	str	r3, [sp, #12]
 80024be:	898b      	ldrh	r3, [r1, #12]
 80024c0:	061c      	lsls	r4, r3, #24
 80024c2:	460d      	mov	r5, r1
 80024c4:	4616      	mov	r6, r2
 80024c6:	d50f      	bpl.n	80024e8 <_svfiprintf_r+0x34>
 80024c8:	690b      	ldr	r3, [r1, #16]
 80024ca:	b96b      	cbnz	r3, 80024e8 <_svfiprintf_r+0x34>
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	f000 faef 	bl	8002ab0 <_malloc_r>
 80024d2:	6028      	str	r0, [r5, #0]
 80024d4:	6128      	str	r0, [r5, #16]
 80024d6:	b928      	cbnz	r0, 80024e4 <_svfiprintf_r+0x30>
 80024d8:	230c      	movs	r3, #12
 80024da:	f8c8 3000 	str.w	r3, [r8]
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
 80024e2:	e0c5      	b.n	8002670 <_svfiprintf_r+0x1bc>
 80024e4:	2340      	movs	r3, #64	; 0x40
 80024e6:	616b      	str	r3, [r5, #20]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9309      	str	r3, [sp, #36]	; 0x24
 80024ec:	2320      	movs	r3, #32
 80024ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024f2:	2330      	movs	r3, #48	; 0x30
 80024f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024f8:	f04f 0b01 	mov.w	fp, #1
 80024fc:	4637      	mov	r7, r6
 80024fe:	463c      	mov	r4, r7
 8002500:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d13c      	bne.n	8002582 <_svfiprintf_r+0xce>
 8002508:	ebb7 0a06 	subs.w	sl, r7, r6
 800250c:	d00b      	beq.n	8002526 <_svfiprintf_r+0x72>
 800250e:	4653      	mov	r3, sl
 8002510:	4632      	mov	r2, r6
 8002512:	4629      	mov	r1, r5
 8002514:	4640      	mov	r0, r8
 8002516:	f7ff ff71 	bl	80023fc <__ssputs_r>
 800251a:	3001      	adds	r0, #1
 800251c:	f000 80a3 	beq.w	8002666 <_svfiprintf_r+0x1b2>
 8002520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002522:	4453      	add	r3, sl
 8002524:	9309      	str	r3, [sp, #36]	; 0x24
 8002526:	783b      	ldrb	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 809c 	beq.w	8002666 <_svfiprintf_r+0x1b2>
 800252e:	2300      	movs	r3, #0
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	9304      	str	r3, [sp, #16]
 8002536:	9307      	str	r3, [sp, #28]
 8002538:	9205      	str	r2, [sp, #20]
 800253a:	9306      	str	r3, [sp, #24]
 800253c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002540:	931a      	str	r3, [sp, #104]	; 0x68
 8002542:	2205      	movs	r2, #5
 8002544:	7821      	ldrb	r1, [r4, #0]
 8002546:	4850      	ldr	r0, [pc, #320]	; (8002688 <_svfiprintf_r+0x1d4>)
 8002548:	f7fd fe4a 	bl	80001e0 <memchr>
 800254c:	1c67      	adds	r7, r4, #1
 800254e:	9b04      	ldr	r3, [sp, #16]
 8002550:	b9d8      	cbnz	r0, 800258a <_svfiprintf_r+0xd6>
 8002552:	06d9      	lsls	r1, r3, #27
 8002554:	bf44      	itt	mi
 8002556:	2220      	movmi	r2, #32
 8002558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800255c:	071a      	lsls	r2, r3, #28
 800255e:	bf44      	itt	mi
 8002560:	222b      	movmi	r2, #43	; 0x2b
 8002562:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002566:	7822      	ldrb	r2, [r4, #0]
 8002568:	2a2a      	cmp	r2, #42	; 0x2a
 800256a:	d016      	beq.n	800259a <_svfiprintf_r+0xe6>
 800256c:	9a07      	ldr	r2, [sp, #28]
 800256e:	2100      	movs	r1, #0
 8002570:	200a      	movs	r0, #10
 8002572:	4627      	mov	r7, r4
 8002574:	3401      	adds	r4, #1
 8002576:	783b      	ldrb	r3, [r7, #0]
 8002578:	3b30      	subs	r3, #48	; 0x30
 800257a:	2b09      	cmp	r3, #9
 800257c:	d951      	bls.n	8002622 <_svfiprintf_r+0x16e>
 800257e:	b1c9      	cbz	r1, 80025b4 <_svfiprintf_r+0x100>
 8002580:	e011      	b.n	80025a6 <_svfiprintf_r+0xf2>
 8002582:	2b25      	cmp	r3, #37	; 0x25
 8002584:	d0c0      	beq.n	8002508 <_svfiprintf_r+0x54>
 8002586:	4627      	mov	r7, r4
 8002588:	e7b9      	b.n	80024fe <_svfiprintf_r+0x4a>
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <_svfiprintf_r+0x1d4>)
 800258c:	1a80      	subs	r0, r0, r2
 800258e:	fa0b f000 	lsl.w	r0, fp, r0
 8002592:	4318      	orrs	r0, r3
 8002594:	9004      	str	r0, [sp, #16]
 8002596:	463c      	mov	r4, r7
 8002598:	e7d3      	b.n	8002542 <_svfiprintf_r+0x8e>
 800259a:	9a03      	ldr	r2, [sp, #12]
 800259c:	1d11      	adds	r1, r2, #4
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	9103      	str	r1, [sp, #12]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	db01      	blt.n	80025aa <_svfiprintf_r+0xf6>
 80025a6:	9207      	str	r2, [sp, #28]
 80025a8:	e004      	b.n	80025b4 <_svfiprintf_r+0x100>
 80025aa:	4252      	negs	r2, r2
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	9207      	str	r2, [sp, #28]
 80025b2:	9304      	str	r3, [sp, #16]
 80025b4:	783b      	ldrb	r3, [r7, #0]
 80025b6:	2b2e      	cmp	r3, #46	; 0x2e
 80025b8:	d10e      	bne.n	80025d8 <_svfiprintf_r+0x124>
 80025ba:	787b      	ldrb	r3, [r7, #1]
 80025bc:	2b2a      	cmp	r3, #42	; 0x2a
 80025be:	f107 0101 	add.w	r1, r7, #1
 80025c2:	d132      	bne.n	800262a <_svfiprintf_r+0x176>
 80025c4:	9b03      	ldr	r3, [sp, #12]
 80025c6:	1d1a      	adds	r2, r3, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	9203      	str	r2, [sp, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfb8      	it	lt
 80025d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80025d4:	3702      	adds	r7, #2
 80025d6:	9305      	str	r3, [sp, #20]
 80025d8:	4c2c      	ldr	r4, [pc, #176]	; (800268c <_svfiprintf_r+0x1d8>)
 80025da:	7839      	ldrb	r1, [r7, #0]
 80025dc:	2203      	movs	r2, #3
 80025de:	4620      	mov	r0, r4
 80025e0:	f7fd fdfe 	bl	80001e0 <memchr>
 80025e4:	b138      	cbz	r0, 80025f6 <_svfiprintf_r+0x142>
 80025e6:	2340      	movs	r3, #64	; 0x40
 80025e8:	1b00      	subs	r0, r0, r4
 80025ea:	fa03 f000 	lsl.w	r0, r3, r0
 80025ee:	9b04      	ldr	r3, [sp, #16]
 80025f0:	4303      	orrs	r3, r0
 80025f2:	9304      	str	r3, [sp, #16]
 80025f4:	3701      	adds	r7, #1
 80025f6:	7839      	ldrb	r1, [r7, #0]
 80025f8:	4825      	ldr	r0, [pc, #148]	; (8002690 <_svfiprintf_r+0x1dc>)
 80025fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025fe:	2206      	movs	r2, #6
 8002600:	1c7e      	adds	r6, r7, #1
 8002602:	f7fd fded 	bl	80001e0 <memchr>
 8002606:	2800      	cmp	r0, #0
 8002608:	d035      	beq.n	8002676 <_svfiprintf_r+0x1c2>
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <_svfiprintf_r+0x1e0>)
 800260c:	b9fb      	cbnz	r3, 800264e <_svfiprintf_r+0x19a>
 800260e:	9b03      	ldr	r3, [sp, #12]
 8002610:	3307      	adds	r3, #7
 8002612:	f023 0307 	bic.w	r3, r3, #7
 8002616:	3308      	adds	r3, #8
 8002618:	9303      	str	r3, [sp, #12]
 800261a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800261c:	444b      	add	r3, r9
 800261e:	9309      	str	r3, [sp, #36]	; 0x24
 8002620:	e76c      	b.n	80024fc <_svfiprintf_r+0x48>
 8002622:	fb00 3202 	mla	r2, r0, r2, r3
 8002626:	2101      	movs	r1, #1
 8002628:	e7a3      	b.n	8002572 <_svfiprintf_r+0xbe>
 800262a:	2300      	movs	r3, #0
 800262c:	9305      	str	r3, [sp, #20]
 800262e:	4618      	mov	r0, r3
 8002630:	240a      	movs	r4, #10
 8002632:	460f      	mov	r7, r1
 8002634:	3101      	adds	r1, #1
 8002636:	783a      	ldrb	r2, [r7, #0]
 8002638:	3a30      	subs	r2, #48	; 0x30
 800263a:	2a09      	cmp	r2, #9
 800263c:	d903      	bls.n	8002646 <_svfiprintf_r+0x192>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ca      	beq.n	80025d8 <_svfiprintf_r+0x124>
 8002642:	9005      	str	r0, [sp, #20]
 8002644:	e7c8      	b.n	80025d8 <_svfiprintf_r+0x124>
 8002646:	fb04 2000 	mla	r0, r4, r0, r2
 800264a:	2301      	movs	r3, #1
 800264c:	e7f1      	b.n	8002632 <_svfiprintf_r+0x17e>
 800264e:	ab03      	add	r3, sp, #12
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	462a      	mov	r2, r5
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_svfiprintf_r+0x1e4>)
 8002656:	a904      	add	r1, sp, #16
 8002658:	4640      	mov	r0, r8
 800265a:	f3af 8000 	nop.w
 800265e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002662:	4681      	mov	r9, r0
 8002664:	d1d9      	bne.n	800261a <_svfiprintf_r+0x166>
 8002666:	89ab      	ldrh	r3, [r5, #12]
 8002668:	065b      	lsls	r3, r3, #25
 800266a:	f53f af38 	bmi.w	80024de <_svfiprintf_r+0x2a>
 800266e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002670:	b01d      	add	sp, #116	; 0x74
 8002672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002676:	ab03      	add	r3, sp, #12
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	462a      	mov	r2, r5
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <_svfiprintf_r+0x1e4>)
 800267e:	a904      	add	r1, sp, #16
 8002680:	4640      	mov	r0, r8
 8002682:	f000 f881 	bl	8002788 <_printf_i>
 8002686:	e7ea      	b.n	800265e <_svfiprintf_r+0x1aa>
 8002688:	08002c89 	.word	0x08002c89
 800268c:	08002c8f 	.word	0x08002c8f
 8002690:	08002c93 	.word	0x08002c93
 8002694:	00000000 	.word	0x00000000
 8002698:	080023fd 	.word	0x080023fd

0800269c <_printf_common>:
 800269c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a0:	4691      	mov	r9, r2
 80026a2:	461f      	mov	r7, r3
 80026a4:	688a      	ldr	r2, [r1, #8]
 80026a6:	690b      	ldr	r3, [r1, #16]
 80026a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bfb8      	it	lt
 80026b0:	4613      	movlt	r3, r2
 80026b2:	f8c9 3000 	str.w	r3, [r9]
 80026b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80026ba:	4606      	mov	r6, r0
 80026bc:	460c      	mov	r4, r1
 80026be:	b112      	cbz	r2, 80026c6 <_printf_common+0x2a>
 80026c0:	3301      	adds	r3, #1
 80026c2:	f8c9 3000 	str.w	r3, [r9]
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	0699      	lsls	r1, r3, #26
 80026ca:	bf42      	ittt	mi
 80026cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80026d0:	3302      	addmi	r3, #2
 80026d2:	f8c9 3000 	strmi.w	r3, [r9]
 80026d6:	6825      	ldr	r5, [r4, #0]
 80026d8:	f015 0506 	ands.w	r5, r5, #6
 80026dc:	d107      	bne.n	80026ee <_printf_common+0x52>
 80026de:	f104 0a19 	add.w	sl, r4, #25
 80026e2:	68e3      	ldr	r3, [r4, #12]
 80026e4:	f8d9 2000 	ldr.w	r2, [r9]
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	429d      	cmp	r5, r3
 80026ec:	db29      	blt.n	8002742 <_printf_common+0xa6>
 80026ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	3300      	adds	r3, #0
 80026f6:	bf18      	it	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	0692      	lsls	r2, r2, #26
 80026fc:	d42e      	bmi.n	800275c <_printf_common+0xc0>
 80026fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002702:	4639      	mov	r1, r7
 8002704:	4630      	mov	r0, r6
 8002706:	47c0      	blx	r8
 8002708:	3001      	adds	r0, #1
 800270a:	d021      	beq.n	8002750 <_printf_common+0xb4>
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	68e5      	ldr	r5, [r4, #12]
 8002710:	f8d9 2000 	ldr.w	r2, [r9]
 8002714:	f003 0306 	and.w	r3, r3, #6
 8002718:	2b04      	cmp	r3, #4
 800271a:	bf08      	it	eq
 800271c:	1aad      	subeq	r5, r5, r2
 800271e:	68a3      	ldr	r3, [r4, #8]
 8002720:	6922      	ldr	r2, [r4, #16]
 8002722:	bf0c      	ite	eq
 8002724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002728:	2500      	movne	r5, #0
 800272a:	4293      	cmp	r3, r2
 800272c:	bfc4      	itt	gt
 800272e:	1a9b      	subgt	r3, r3, r2
 8002730:	18ed      	addgt	r5, r5, r3
 8002732:	f04f 0900 	mov.w	r9, #0
 8002736:	341a      	adds	r4, #26
 8002738:	454d      	cmp	r5, r9
 800273a:	d11b      	bne.n	8002774 <_printf_common+0xd8>
 800273c:	2000      	movs	r0, #0
 800273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002742:	2301      	movs	r3, #1
 8002744:	4652      	mov	r2, sl
 8002746:	4639      	mov	r1, r7
 8002748:	4630      	mov	r0, r6
 800274a:	47c0      	blx	r8
 800274c:	3001      	adds	r0, #1
 800274e:	d103      	bne.n	8002758 <_printf_common+0xbc>
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002758:	3501      	adds	r5, #1
 800275a:	e7c2      	b.n	80026e2 <_printf_common+0x46>
 800275c:	18e1      	adds	r1, r4, r3
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	2030      	movs	r0, #48	; 0x30
 8002762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002766:	4422      	add	r2, r4
 8002768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800276c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002770:	3302      	adds	r3, #2
 8002772:	e7c4      	b.n	80026fe <_printf_common+0x62>
 8002774:	2301      	movs	r3, #1
 8002776:	4622      	mov	r2, r4
 8002778:	4639      	mov	r1, r7
 800277a:	4630      	mov	r0, r6
 800277c:	47c0      	blx	r8
 800277e:	3001      	adds	r0, #1
 8002780:	d0e6      	beq.n	8002750 <_printf_common+0xb4>
 8002782:	f109 0901 	add.w	r9, r9, #1
 8002786:	e7d7      	b.n	8002738 <_printf_common+0x9c>

08002788 <_printf_i>:
 8002788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800278c:	4617      	mov	r7, r2
 800278e:	7e0a      	ldrb	r2, [r1, #24]
 8002790:	b085      	sub	sp, #20
 8002792:	2a6e      	cmp	r2, #110	; 0x6e
 8002794:	4698      	mov	r8, r3
 8002796:	4606      	mov	r6, r0
 8002798:	460c      	mov	r4, r1
 800279a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800279c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80027a0:	f000 80bc 	beq.w	800291c <_printf_i+0x194>
 80027a4:	d81a      	bhi.n	80027dc <_printf_i+0x54>
 80027a6:	2a63      	cmp	r2, #99	; 0x63
 80027a8:	d02e      	beq.n	8002808 <_printf_i+0x80>
 80027aa:	d80a      	bhi.n	80027c2 <_printf_i+0x3a>
 80027ac:	2a00      	cmp	r2, #0
 80027ae:	f000 80c8 	beq.w	8002942 <_printf_i+0x1ba>
 80027b2:	2a58      	cmp	r2, #88	; 0x58
 80027b4:	f000 808a 	beq.w	80028cc <_printf_i+0x144>
 80027b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80027c0:	e02a      	b.n	8002818 <_printf_i+0x90>
 80027c2:	2a64      	cmp	r2, #100	; 0x64
 80027c4:	d001      	beq.n	80027ca <_printf_i+0x42>
 80027c6:	2a69      	cmp	r2, #105	; 0x69
 80027c8:	d1f6      	bne.n	80027b8 <_printf_i+0x30>
 80027ca:	6821      	ldr	r1, [r4, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027d2:	d023      	beq.n	800281c <_printf_i+0x94>
 80027d4:	1d11      	adds	r1, r2, #4
 80027d6:	6019      	str	r1, [r3, #0]
 80027d8:	6813      	ldr	r3, [r2, #0]
 80027da:	e027      	b.n	800282c <_printf_i+0xa4>
 80027dc:	2a73      	cmp	r2, #115	; 0x73
 80027de:	f000 80b4 	beq.w	800294a <_printf_i+0x1c2>
 80027e2:	d808      	bhi.n	80027f6 <_printf_i+0x6e>
 80027e4:	2a6f      	cmp	r2, #111	; 0x6f
 80027e6:	d02a      	beq.n	800283e <_printf_i+0xb6>
 80027e8:	2a70      	cmp	r2, #112	; 0x70
 80027ea:	d1e5      	bne.n	80027b8 <_printf_i+0x30>
 80027ec:	680a      	ldr	r2, [r1, #0]
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	600a      	str	r2, [r1, #0]
 80027f4:	e003      	b.n	80027fe <_printf_i+0x76>
 80027f6:	2a75      	cmp	r2, #117	; 0x75
 80027f8:	d021      	beq.n	800283e <_printf_i+0xb6>
 80027fa:	2a78      	cmp	r2, #120	; 0x78
 80027fc:	d1dc      	bne.n	80027b8 <_printf_i+0x30>
 80027fe:	2278      	movs	r2, #120	; 0x78
 8002800:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002804:	496e      	ldr	r1, [pc, #440]	; (80029c0 <_printf_i+0x238>)
 8002806:	e064      	b.n	80028d2 <_printf_i+0x14a>
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800280e:	1d11      	adds	r1, r2, #4
 8002810:	6019      	str	r1, [r3, #0]
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002818:	2301      	movs	r3, #1
 800281a:	e0a3      	b.n	8002964 <_printf_i+0x1dc>
 800281c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002820:	f102 0104 	add.w	r1, r2, #4
 8002824:	6019      	str	r1, [r3, #0]
 8002826:	d0d7      	beq.n	80027d8 <_printf_i+0x50>
 8002828:	f9b2 3000 	ldrsh.w	r3, [r2]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da03      	bge.n	8002838 <_printf_i+0xb0>
 8002830:	222d      	movs	r2, #45	; 0x2d
 8002832:	425b      	negs	r3, r3
 8002834:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002838:	4962      	ldr	r1, [pc, #392]	; (80029c4 <_printf_i+0x23c>)
 800283a:	220a      	movs	r2, #10
 800283c:	e017      	b.n	800286e <_printf_i+0xe6>
 800283e:	6820      	ldr	r0, [r4, #0]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002846:	d003      	beq.n	8002850 <_printf_i+0xc8>
 8002848:	1d08      	adds	r0, r1, #4
 800284a:	6018      	str	r0, [r3, #0]
 800284c:	680b      	ldr	r3, [r1, #0]
 800284e:	e006      	b.n	800285e <_printf_i+0xd6>
 8002850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002854:	f101 0004 	add.w	r0, r1, #4
 8002858:	6018      	str	r0, [r3, #0]
 800285a:	d0f7      	beq.n	800284c <_printf_i+0xc4>
 800285c:	880b      	ldrh	r3, [r1, #0]
 800285e:	4959      	ldr	r1, [pc, #356]	; (80029c4 <_printf_i+0x23c>)
 8002860:	2a6f      	cmp	r2, #111	; 0x6f
 8002862:	bf14      	ite	ne
 8002864:	220a      	movne	r2, #10
 8002866:	2208      	moveq	r2, #8
 8002868:	2000      	movs	r0, #0
 800286a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800286e:	6865      	ldr	r5, [r4, #4]
 8002870:	60a5      	str	r5, [r4, #8]
 8002872:	2d00      	cmp	r5, #0
 8002874:	f2c0 809c 	blt.w	80029b0 <_printf_i+0x228>
 8002878:	6820      	ldr	r0, [r4, #0]
 800287a:	f020 0004 	bic.w	r0, r0, #4
 800287e:	6020      	str	r0, [r4, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d13f      	bne.n	8002904 <_printf_i+0x17c>
 8002884:	2d00      	cmp	r5, #0
 8002886:	f040 8095 	bne.w	80029b4 <_printf_i+0x22c>
 800288a:	4675      	mov	r5, lr
 800288c:	2a08      	cmp	r2, #8
 800288e:	d10b      	bne.n	80028a8 <_printf_i+0x120>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	07da      	lsls	r2, r3, #31
 8002894:	d508      	bpl.n	80028a8 <_printf_i+0x120>
 8002896:	6923      	ldr	r3, [r4, #16]
 8002898:	6862      	ldr	r2, [r4, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	bfde      	ittt	le
 800289e:	2330      	movle	r3, #48	; 0x30
 80028a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80028a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80028a8:	ebae 0305 	sub.w	r3, lr, r5
 80028ac:	6123      	str	r3, [r4, #16]
 80028ae:	f8cd 8000 	str.w	r8, [sp]
 80028b2:	463b      	mov	r3, r7
 80028b4:	aa03      	add	r2, sp, #12
 80028b6:	4621      	mov	r1, r4
 80028b8:	4630      	mov	r0, r6
 80028ba:	f7ff feef 	bl	800269c <_printf_common>
 80028be:	3001      	adds	r0, #1
 80028c0:	d155      	bne.n	800296e <_printf_i+0x1e6>
 80028c2:	f04f 30ff 	mov.w	r0, #4294967295
 80028c6:	b005      	add	sp, #20
 80028c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80028d0:	493c      	ldr	r1, [pc, #240]	; (80029c4 <_printf_i+0x23c>)
 80028d2:	6822      	ldr	r2, [r4, #0]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028da:	f100 0504 	add.w	r5, r0, #4
 80028de:	601d      	str	r5, [r3, #0]
 80028e0:	d001      	beq.n	80028e6 <_printf_i+0x15e>
 80028e2:	6803      	ldr	r3, [r0, #0]
 80028e4:	e002      	b.n	80028ec <_printf_i+0x164>
 80028e6:	0655      	lsls	r5, r2, #25
 80028e8:	d5fb      	bpl.n	80028e2 <_printf_i+0x15a>
 80028ea:	8803      	ldrh	r3, [r0, #0]
 80028ec:	07d0      	lsls	r0, r2, #31
 80028ee:	bf44      	itt	mi
 80028f0:	f042 0220 	orrmi.w	r2, r2, #32
 80028f4:	6022      	strmi	r2, [r4, #0]
 80028f6:	b91b      	cbnz	r3, 8002900 <_printf_i+0x178>
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	f022 0220 	bic.w	r2, r2, #32
 80028fe:	6022      	str	r2, [r4, #0]
 8002900:	2210      	movs	r2, #16
 8002902:	e7b1      	b.n	8002868 <_printf_i+0xe0>
 8002904:	4675      	mov	r5, lr
 8002906:	fbb3 f0f2 	udiv	r0, r3, r2
 800290a:	fb02 3310 	mls	r3, r2, r0, r3
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002914:	4603      	mov	r3, r0
 8002916:	2800      	cmp	r0, #0
 8002918:	d1f5      	bne.n	8002906 <_printf_i+0x17e>
 800291a:	e7b7      	b.n	800288c <_printf_i+0x104>
 800291c:	6808      	ldr	r0, [r1, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	6949      	ldr	r1, [r1, #20]
 8002922:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002926:	d004      	beq.n	8002932 <_printf_i+0x1aa>
 8002928:	1d10      	adds	r0, r2, #4
 800292a:	6018      	str	r0, [r3, #0]
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	6019      	str	r1, [r3, #0]
 8002930:	e007      	b.n	8002942 <_printf_i+0x1ba>
 8002932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002936:	f102 0004 	add.w	r0, r2, #4
 800293a:	6018      	str	r0, [r3, #0]
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	d0f6      	beq.n	800292e <_printf_i+0x1a6>
 8002940:	8019      	strh	r1, [r3, #0]
 8002942:	2300      	movs	r3, #0
 8002944:	6123      	str	r3, [r4, #16]
 8002946:	4675      	mov	r5, lr
 8002948:	e7b1      	b.n	80028ae <_printf_i+0x126>
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	1d11      	adds	r1, r2, #4
 800294e:	6019      	str	r1, [r3, #0]
 8002950:	6815      	ldr	r5, [r2, #0]
 8002952:	6862      	ldr	r2, [r4, #4]
 8002954:	2100      	movs	r1, #0
 8002956:	4628      	mov	r0, r5
 8002958:	f7fd fc42 	bl	80001e0 <memchr>
 800295c:	b108      	cbz	r0, 8002962 <_printf_i+0x1da>
 800295e:	1b40      	subs	r0, r0, r5
 8002960:	6060      	str	r0, [r4, #4]
 8002962:	6863      	ldr	r3, [r4, #4]
 8002964:	6123      	str	r3, [r4, #16]
 8002966:	2300      	movs	r3, #0
 8002968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800296c:	e79f      	b.n	80028ae <_printf_i+0x126>
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	462a      	mov	r2, r5
 8002972:	4639      	mov	r1, r7
 8002974:	4630      	mov	r0, r6
 8002976:	47c0      	blx	r8
 8002978:	3001      	adds	r0, #1
 800297a:	d0a2      	beq.n	80028c2 <_printf_i+0x13a>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	079b      	lsls	r3, r3, #30
 8002980:	d507      	bpl.n	8002992 <_printf_i+0x20a>
 8002982:	2500      	movs	r5, #0
 8002984:	f104 0919 	add.w	r9, r4, #25
 8002988:	68e3      	ldr	r3, [r4, #12]
 800298a:	9a03      	ldr	r2, [sp, #12]
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	429d      	cmp	r5, r3
 8002990:	db05      	blt.n	800299e <_printf_i+0x216>
 8002992:	68e0      	ldr	r0, [r4, #12]
 8002994:	9b03      	ldr	r3, [sp, #12]
 8002996:	4298      	cmp	r0, r3
 8002998:	bfb8      	it	lt
 800299a:	4618      	movlt	r0, r3
 800299c:	e793      	b.n	80028c6 <_printf_i+0x13e>
 800299e:	2301      	movs	r3, #1
 80029a0:	464a      	mov	r2, r9
 80029a2:	4639      	mov	r1, r7
 80029a4:	4630      	mov	r0, r6
 80029a6:	47c0      	blx	r8
 80029a8:	3001      	adds	r0, #1
 80029aa:	d08a      	beq.n	80028c2 <_printf_i+0x13a>
 80029ac:	3501      	adds	r5, #1
 80029ae:	e7eb      	b.n	8002988 <_printf_i+0x200>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1a7      	bne.n	8002904 <_printf_i+0x17c>
 80029b4:	780b      	ldrb	r3, [r1, #0]
 80029b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029be:	e765      	b.n	800288c <_printf_i+0x104>
 80029c0:	08002cab 	.word	0x08002cab
 80029c4:	08002c9a 	.word	0x08002c9a

080029c8 <memcpy>:
 80029c8:	b510      	push	{r4, lr}
 80029ca:	1e43      	subs	r3, r0, #1
 80029cc:	440a      	add	r2, r1
 80029ce:	4291      	cmp	r1, r2
 80029d0:	d100      	bne.n	80029d4 <memcpy+0xc>
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029dc:	e7f7      	b.n	80029ce <memcpy+0x6>

080029de <memmove>:
 80029de:	4288      	cmp	r0, r1
 80029e0:	b510      	push	{r4, lr}
 80029e2:	eb01 0302 	add.w	r3, r1, r2
 80029e6:	d803      	bhi.n	80029f0 <memmove+0x12>
 80029e8:	1e42      	subs	r2, r0, #1
 80029ea:	4299      	cmp	r1, r3
 80029ec:	d10c      	bne.n	8002a08 <memmove+0x2a>
 80029ee:	bd10      	pop	{r4, pc}
 80029f0:	4298      	cmp	r0, r3
 80029f2:	d2f9      	bcs.n	80029e8 <memmove+0xa>
 80029f4:	1881      	adds	r1, r0, r2
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	42d3      	cmn	r3, r2
 80029fa:	d100      	bne.n	80029fe <memmove+0x20>
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a06:	e7f7      	b.n	80029f8 <memmove+0x1a>
 8002a08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a10:	e7eb      	b.n	80029ea <memmove+0xc>
	...

08002a14 <_free_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	4605      	mov	r5, r0
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	d045      	beq.n	8002aa8 <_free_r+0x94>
 8002a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a20:	1f0c      	subs	r4, r1, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bfb8      	it	lt
 8002a26:	18e4      	addlt	r4, r4, r3
 8002a28:	f000 f8d6 	bl	8002bd8 <__malloc_lock>
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <_free_r+0x98>)
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	4610      	mov	r0, r2
 8002a32:	b933      	cbnz	r3, 8002a42 <_free_r+0x2e>
 8002a34:	6063      	str	r3, [r4, #4]
 8002a36:	6014      	str	r4, [r2, #0]
 8002a38:	4628      	mov	r0, r5
 8002a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a3e:	f000 b8cc 	b.w	8002bda <__malloc_unlock>
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	d90c      	bls.n	8002a60 <_free_r+0x4c>
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	1862      	adds	r2, r4, r1
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	bf04      	itt	eq
 8002a4e:	681a      	ldreq	r2, [r3, #0]
 8002a50:	685b      	ldreq	r3, [r3, #4]
 8002a52:	6063      	str	r3, [r4, #4]
 8002a54:	bf04      	itt	eq
 8002a56:	1852      	addeq	r2, r2, r1
 8002a58:	6022      	streq	r2, [r4, #0]
 8002a5a:	6004      	str	r4, [r0, #0]
 8002a5c:	e7ec      	b.n	8002a38 <_free_r+0x24>
 8002a5e:	4613      	mov	r3, r2
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	b10a      	cbz	r2, 8002a68 <_free_r+0x54>
 8002a64:	42a2      	cmp	r2, r4
 8002a66:	d9fa      	bls.n	8002a5e <_free_r+0x4a>
 8002a68:	6819      	ldr	r1, [r3, #0]
 8002a6a:	1858      	adds	r0, r3, r1
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d10b      	bne.n	8002a88 <_free_r+0x74>
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	4401      	add	r1, r0
 8002a74:	1858      	adds	r0, r3, r1
 8002a76:	4282      	cmp	r2, r0
 8002a78:	6019      	str	r1, [r3, #0]
 8002a7a:	d1dd      	bne.n	8002a38 <_free_r+0x24>
 8002a7c:	6810      	ldr	r0, [r2, #0]
 8002a7e:	6852      	ldr	r2, [r2, #4]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	4401      	add	r1, r0
 8002a84:	6019      	str	r1, [r3, #0]
 8002a86:	e7d7      	b.n	8002a38 <_free_r+0x24>
 8002a88:	d902      	bls.n	8002a90 <_free_r+0x7c>
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	602b      	str	r3, [r5, #0]
 8002a8e:	e7d3      	b.n	8002a38 <_free_r+0x24>
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	1821      	adds	r1, r4, r0
 8002a94:	428a      	cmp	r2, r1
 8002a96:	bf04      	itt	eq
 8002a98:	6811      	ldreq	r1, [r2, #0]
 8002a9a:	6852      	ldreq	r2, [r2, #4]
 8002a9c:	6062      	str	r2, [r4, #4]
 8002a9e:	bf04      	itt	eq
 8002aa0:	1809      	addeq	r1, r1, r0
 8002aa2:	6021      	streq	r1, [r4, #0]
 8002aa4:	605c      	str	r4, [r3, #4]
 8002aa6:	e7c7      	b.n	8002a38 <_free_r+0x24>
 8002aa8:	bd38      	pop	{r3, r4, r5, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000084 	.word	0x20000084

08002ab0 <_malloc_r>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	1ccd      	adds	r5, r1, #3
 8002ab4:	f025 0503 	bic.w	r5, r5, #3
 8002ab8:	3508      	adds	r5, #8
 8002aba:	2d0c      	cmp	r5, #12
 8002abc:	bf38      	it	cc
 8002abe:	250c      	movcc	r5, #12
 8002ac0:	2d00      	cmp	r5, #0
 8002ac2:	4606      	mov	r6, r0
 8002ac4:	db01      	blt.n	8002aca <_malloc_r+0x1a>
 8002ac6:	42a9      	cmp	r1, r5
 8002ac8:	d903      	bls.n	8002ad2 <_malloc_r+0x22>
 8002aca:	230c      	movs	r3, #12
 8002acc:	6033      	str	r3, [r6, #0]
 8002ace:	2000      	movs	r0, #0
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	f000 f881 	bl	8002bd8 <__malloc_lock>
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <_malloc_r+0xb4>)
 8002ad8:	6814      	ldr	r4, [r2, #0]
 8002ada:	4621      	mov	r1, r4
 8002adc:	b991      	cbnz	r1, 8002b04 <_malloc_r+0x54>
 8002ade:	4c22      	ldr	r4, [pc, #136]	; (8002b68 <_malloc_r+0xb8>)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	b91b      	cbnz	r3, 8002aec <_malloc_r+0x3c>
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	f000 f867 	bl	8002bb8 <_sbrk_r>
 8002aea:	6020      	str	r0, [r4, #0]
 8002aec:	4629      	mov	r1, r5
 8002aee:	4630      	mov	r0, r6
 8002af0:	f000 f862 	bl	8002bb8 <_sbrk_r>
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d126      	bne.n	8002b46 <_malloc_r+0x96>
 8002af8:	230c      	movs	r3, #12
 8002afa:	6033      	str	r3, [r6, #0]
 8002afc:	4630      	mov	r0, r6
 8002afe:	f000 f86c 	bl	8002bda <__malloc_unlock>
 8002b02:	e7e4      	b.n	8002ace <_malloc_r+0x1e>
 8002b04:	680b      	ldr	r3, [r1, #0]
 8002b06:	1b5b      	subs	r3, r3, r5
 8002b08:	d41a      	bmi.n	8002b40 <_malloc_r+0x90>
 8002b0a:	2b0b      	cmp	r3, #11
 8002b0c:	d90f      	bls.n	8002b2e <_malloc_r+0x7e>
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	50cd      	str	r5, [r1, r3]
 8002b12:	18cc      	adds	r4, r1, r3
 8002b14:	4630      	mov	r0, r6
 8002b16:	f000 f860 	bl	8002bda <__malloc_unlock>
 8002b1a:	f104 000b 	add.w	r0, r4, #11
 8002b1e:	1d23      	adds	r3, r4, #4
 8002b20:	f020 0007 	bic.w	r0, r0, #7
 8002b24:	1ac3      	subs	r3, r0, r3
 8002b26:	d01b      	beq.n	8002b60 <_malloc_r+0xb0>
 8002b28:	425a      	negs	r2, r3
 8002b2a:	50e2      	str	r2, [r4, r3]
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
 8002b2e:	428c      	cmp	r4, r1
 8002b30:	bf0d      	iteet	eq
 8002b32:	6863      	ldreq	r3, [r4, #4]
 8002b34:	684b      	ldrne	r3, [r1, #4]
 8002b36:	6063      	strne	r3, [r4, #4]
 8002b38:	6013      	streq	r3, [r2, #0]
 8002b3a:	bf18      	it	ne
 8002b3c:	460c      	movne	r4, r1
 8002b3e:	e7e9      	b.n	8002b14 <_malloc_r+0x64>
 8002b40:	460c      	mov	r4, r1
 8002b42:	6849      	ldr	r1, [r1, #4]
 8002b44:	e7ca      	b.n	8002adc <_malloc_r+0x2c>
 8002b46:	1cc4      	adds	r4, r0, #3
 8002b48:	f024 0403 	bic.w	r4, r4, #3
 8002b4c:	42a0      	cmp	r0, r4
 8002b4e:	d005      	beq.n	8002b5c <_malloc_r+0xac>
 8002b50:	1a21      	subs	r1, r4, r0
 8002b52:	4630      	mov	r0, r6
 8002b54:	f000 f830 	bl	8002bb8 <_sbrk_r>
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d0cd      	beq.n	8002af8 <_malloc_r+0x48>
 8002b5c:	6025      	str	r5, [r4, #0]
 8002b5e:	e7d9      	b.n	8002b14 <_malloc_r+0x64>
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	bf00      	nop
 8002b64:	20000084 	.word	0x20000084
 8002b68:	20000088 	.word	0x20000088

08002b6c <_realloc_r>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	4607      	mov	r7, r0
 8002b70:	4614      	mov	r4, r2
 8002b72:	460e      	mov	r6, r1
 8002b74:	b921      	cbnz	r1, 8002b80 <_realloc_r+0x14>
 8002b76:	4611      	mov	r1, r2
 8002b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002b7c:	f7ff bf98 	b.w	8002ab0 <_malloc_r>
 8002b80:	b922      	cbnz	r2, 8002b8c <_realloc_r+0x20>
 8002b82:	f7ff ff47 	bl	8002a14 <_free_r>
 8002b86:	4625      	mov	r5, r4
 8002b88:	4628      	mov	r0, r5
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b8c:	f000 f826 	bl	8002bdc <_malloc_usable_size_r>
 8002b90:	4284      	cmp	r4, r0
 8002b92:	d90f      	bls.n	8002bb4 <_realloc_r+0x48>
 8002b94:	4621      	mov	r1, r4
 8002b96:	4638      	mov	r0, r7
 8002b98:	f7ff ff8a 	bl	8002ab0 <_malloc_r>
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d0f2      	beq.n	8002b88 <_realloc_r+0x1c>
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	f7ff ff0f 	bl	80029c8 <memcpy>
 8002baa:	4631      	mov	r1, r6
 8002bac:	4638      	mov	r0, r7
 8002bae:	f7ff ff31 	bl	8002a14 <_free_r>
 8002bb2:	e7e9      	b.n	8002b88 <_realloc_r+0x1c>
 8002bb4:	4635      	mov	r5, r6
 8002bb6:	e7e7      	b.n	8002b88 <_realloc_r+0x1c>

08002bb8 <_sbrk_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4c06      	ldr	r4, [pc, #24]	; (8002bd4 <_sbrk_r+0x1c>)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	4605      	mov	r5, r0
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	f000 f814 	bl	8002bf0 <_sbrk>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d102      	bne.n	8002bd2 <_sbrk_r+0x1a>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	b103      	cbz	r3, 8002bd2 <_sbrk_r+0x1a>
 8002bd0:	602b      	str	r3, [r5, #0]
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	200001ac 	.word	0x200001ac

08002bd8 <__malloc_lock>:
 8002bd8:	4770      	bx	lr

08002bda <__malloc_unlock>:
 8002bda:	4770      	bx	lr

08002bdc <_malloc_usable_size_r>:
 8002bdc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f1a0 0004 	sub.w	r0, r0, #4
 8002be6:	bfbc      	itt	lt
 8002be8:	580b      	ldrlt	r3, [r1, r0]
 8002bea:	18c0      	addlt	r0, r0, r3
 8002bec:	4770      	bx	lr
	...

08002bf0 <_sbrk>:
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <_sbrk+0x14>)
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	b909      	cbnz	r1, 8002bfc <_sbrk+0xc>
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <_sbrk+0x18>)
 8002bfa:	6019      	str	r1, [r3, #0]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	4402      	add	r2, r0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	4770      	bx	lr
 8002c04:	2000008c 	.word	0x2000008c
 8002c08:	200001b0 	.word	0x200001b0

08002c0c <_init>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr

08002c18 <_fini>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr
