
3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002ba0  08002ba0  00012ba0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
  7 .bss          000000f4  20000068  20000068  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000015c  2000015c  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f142  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ebb  00000000  00000000  0002f1da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000049e4  00000000  00000000  00031095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000678  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008f0  00000000  00000000  000360f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b98  00000000  00000000  000369e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002faf  00000000  00000000  0003b580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e52f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000014b4  00000000  00000000  0003e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002b88 	.word	0x08002b88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002b88 	.word	0x08002b88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000280:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <HAL_InitTick+0x24>)
{
 8000284:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000290:	f000 fe0c 	bl	8000eac <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000294:	2200      	movs	r2, #0
 8000296:	4621      	mov	r1, r4
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 fdd2 	bl	8000e44 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002a0:	2000      	movs	r0, #0
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_Init+0x20>)
{
 80002aa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	f043 0310 	orr.w	r3, r3, #16
 80002b2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002b4:	2003      	movs	r0, #3
 80002b6:	f000 fdb3 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ba:	2000      	movs	r0, #0
 80002bc:	f7ff ffe0 	bl	8000280 <HAL_InitTick>
  HAL_MspInit();
 80002c0:	f001 ff1e 	bl	8002100 <HAL_MspInit>
}
 80002c4:	2000      	movs	r0, #0
 80002c6:	bd08      	pop	{r3, pc}
 80002c8:	40022000 	.word	0x40022000

080002cc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <HAL_IncTick+0xc>)
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	6013      	str	r3, [r2, #0]
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	20000090 	.word	0x20000090

080002dc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002dc:	4b01      	ldr	r3, [pc, #4]	; (80002e4 <HAL_GetTick+0x8>)
 80002de:	6818      	ldr	r0, [r3, #0]
}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000090 	.word	0x20000090

080002e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff fff6 	bl	80002dc <HAL_GetTick>
  uint32_t wait = Delay;
 80002f0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f2:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80002f4:	4605      	mov	r5, r0
  {
     wait++;
 80002f6:	bf18      	it	ne
 80002f8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002fa:	f7ff ffef 	bl	80002dc <HAL_GetTick>
 80002fe:	1b40      	subs	r0, r0, r5
 8000300:	42a0      	cmp	r0, r4
 8000302:	d3fa      	bcc.n	80002fa <HAL_Delay+0x12>
  {
  }
}
 8000304:	b003      	add	sp, #12
 8000306:	bd30      	pop	{r4, r5, pc}

08000308 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000308:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800030a:	6803      	ldr	r3, [r0, #0]
{
 800030c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800030e:	6898      	ldr	r0, [r3, #8]
 8000310:	f000 0003 	and.w	r0, r0, #3
 8000314:	2801      	cmp	r0, #1
 8000316:	d001      	beq.n	800031c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000318:	2000      	movs	r0, #0
 800031a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	07d2      	lsls	r2, r2, #31
 8000320:	d5fa      	bpl.n	8000318 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	f002 020d 	and.w	r2, r2, #13
 8000328:	2a01      	cmp	r2, #1
 800032a:	d11b      	bne.n	8000364 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	f042 0202 	orr.w	r2, r2, #2
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	2203      	movs	r2, #3
 8000336:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000338:	f7ff ffd0 	bl	80002dc <HAL_GetTick>
 800033c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800033e:	6823      	ldr	r3, [r4, #0]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	07db      	lsls	r3, r3, #31
 8000344:	d5e8      	bpl.n	8000318 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000346:	f7ff ffc9 	bl	80002dc <HAL_GetTick>
 800034a:	1b40      	subs	r0, r0, r5
 800034c:	2802      	cmp	r0, #2
 800034e:	d9f6      	bls.n	800033e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000358:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000360:	2001      	movs	r0, #1
 8000362:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000364:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800036c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000374:	bd38      	pop	{r3, r4, r5, pc}
	...

08000378 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000378:	6803      	ldr	r3, [r0, #0]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	f012 0f0c 	tst.w	r2, #12
{
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000384:	d101      	bne.n	800038a <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000386:	2000      	movs	r0, #0
 8000388:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	0190      	lsls	r0, r2, #6
 800038e:	d526      	bpl.n	80003de <ADC_ConversionStop+0x66>
 8000390:	69e2      	ldr	r2, [r4, #28]
 8000392:	2a01      	cmp	r2, #1
 8000394:	d123      	bne.n	80003de <ADC_ConversionStop+0x66>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000396:	69a2      	ldr	r2, [r4, #24]
 8000398:	2a01      	cmp	r2, #1
 800039a:	d120      	bne.n	80003de <ADC_ConversionStop+0x66>
 800039c:	4a20      	ldr	r2, [pc, #128]	; (8000420 <ADC_ConversionStop+0xa8>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	0649      	lsls	r1, r1, #25
 80003a2:	d510      	bpl.n	80003c6 <ADC_ConversionStop+0x4e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80003a4:	2240      	movs	r2, #64	; 0x40
 80003a6:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 80003a8:	210c      	movs	r1, #12
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003aa:	689a      	ldr	r2, [r3, #8]
 80003ac:	0756      	lsls	r6, r2, #29
 80003ae:	d506      	bpl.n	80003be <ADC_ConversionStop+0x46>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80003b0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003b2:	0795      	lsls	r5, r2, #30
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80003b4:	bf5e      	ittt	pl
 80003b6:	689a      	ldrpl	r2, [r3, #8]
 80003b8:	f042 0210 	orrpl.w	r2, r2, #16
 80003bc:	609a      	strpl	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80003be:	290c      	cmp	r1, #12
 80003c0:	d10f      	bne.n	80003e2 <ADC_ConversionStop+0x6a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80003c2:	2504      	movs	r5, #4
        break;
 80003c4:	e01e      	b.n	8000404 <ADC_ConversionStop+0x8c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80003c6:	3a01      	subs	r2, #1
 80003c8:	d1e9      	bne.n	800039e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80003da:	2001      	movs	r0, #1
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80003de:	2960      	cmp	r1, #96	; 0x60
 80003e0:	d1e3      	bne.n	80003aa <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	0710      	lsls	r0, r2, #28
 80003e6:	d506      	bpl.n	80003f6 <ADC_ConversionStop+0x7e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80003e8:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80003ea:	0792      	lsls	r2, r2, #30
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80003ec:	bf5e      	ittt	pl
 80003ee:	689a      	ldrpl	r2, [r3, #8]
 80003f0:	f042 0220 	orrpl.w	r2, r2, #32
 80003f4:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 80003f6:	2960      	cmp	r1, #96	; 0x60
 80003f8:	d003      	beq.n	8000402 <ADC_ConversionStop+0x8a>
 80003fa:	296c      	cmp	r1, #108	; 0x6c
 80003fc:	d1e1      	bne.n	80003c2 <ADC_ConversionStop+0x4a>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80003fe:	250c      	movs	r5, #12
 8000400:	e000      	b.n	8000404 <ADC_ConversionStop+0x8c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000402:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 8000404:	f7ff ff6a 	bl	80002dc <HAL_GetTick>
 8000408:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800040a:	6823      	ldr	r3, [r4, #0]
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	421d      	tst	r5, r3
 8000410:	d0b9      	beq.n	8000386 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000412:	f7ff ff63 	bl	80002dc <HAL_GetTick>
 8000416:	1b80      	subs	r0, r0, r6
 8000418:	280b      	cmp	r0, #11
 800041a:	d9f6      	bls.n	800040a <ADC_ConversionStop+0x92>
 800041c:	e7d5      	b.n	80003ca <ADC_ConversionStop+0x52>
 800041e:	bf00      	nop
 8000420:	00099401 	.word	0x00099401

08000424 <ADC_Enable>:
{
 8000424:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000426:	6803      	ldr	r3, [r0, #0]
 8000428:	689a      	ldr	r2, [r3, #8]
 800042a:	f002 0203 	and.w	r2, r2, #3
 800042e:	2a01      	cmp	r2, #1
{
 8000430:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000432:	d104      	bne.n	800043e <ADC_Enable+0x1a>
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	07d2      	lsls	r2, r2, #31
 8000438:	d501      	bpl.n	800043e <ADC_Enable+0x1a>
  return HAL_OK;
 800043a:	2000      	movs	r0, #0
 800043c:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800043e:	6899      	ldr	r1, [r3, #8]
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <ADC_Enable+0x58>)
 8000442:	4211      	tst	r1, r2
 8000444:	d10f      	bne.n	8000466 <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000446:	689a      	ldr	r2, [r3, #8]
 8000448:	f042 0201 	orr.w	r2, r2, #1
 800044c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800044e:	f7ff ff45 	bl	80002dc <HAL_GetTick>
 8000452:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000454:	6823      	ldr	r3, [r4, #0]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	07db      	lsls	r3, r3, #31
 800045a:	d4ee      	bmi.n	800043a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800045c:	f7ff ff3e 	bl	80002dc <HAL_GetTick>
 8000460:	1b40      	subs	r0, r0, r5
 8000462:	2802      	cmp	r0, #2
 8000464:	d9f6      	bls.n	8000454 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000466:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000468:	f043 0310 	orr.w	r3, r3, #16
 800046c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800046e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000476:	2001      	movs	r0, #1
 8000478:	bd38      	pop	{r3, r4, r5, pc}
 800047a:	bf00      	nop
 800047c:	8000003f 	.word	0x8000003f

08000480 <HAL_ADC_Init>:
{
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000484:	2300      	movs	r3, #0
 8000486:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000488:	4604      	mov	r4, r0
 800048a:	2800      	cmp	r0, #0
 800048c:	f000 8091 	beq.w	80005b2 <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000492:	06d2      	lsls	r2, r2, #27
 8000494:	d463      	bmi.n	800055e <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000496:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000498:	2b00      	cmp	r3, #0
 800049a:	d02e      	beq.n	80004fa <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800049c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800049e:	6823      	ldr	r3, [r4, #0]
 80004a0:	689a      	ldr	r2, [r3, #8]
 80004a2:	00d1      	lsls	r1, r2, #3
 80004a4:	d502      	bpl.n	80004ac <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80004a6:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80004a8:	009a      	lsls	r2, r3, #2
 80004aa:	d50a      	bpl.n	80004c2 <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 80004ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004ae:	f023 0312 	bic.w	r3, r3, #18
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80004c0:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004c4:	06db      	lsls	r3, r3, #27
 80004c6:	d46e      	bmi.n	80005a6 <HAL_ADC_Init+0x126>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d16c      	bne.n	80005a6 <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004cc:	6823      	ldr	r3, [r4, #0]
 80004ce:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004d0:	f015 0504 	ands.w	r5, r5, #4
 80004d4:	d167      	bne.n	80005a6 <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 80004d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80004d8:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80004dc:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80004e4:	6462      	str	r2, [r4, #68]	; 0x44
 80004e6:	4a78      	ldr	r2, [pc, #480]	; (80006c8 <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004e8:	d065      	beq.n	80005b6 <HAL_ADC_Init+0x136>
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d166      	bne.n	80005bc <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004f2:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004f4:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80004f8:	e066      	b.n	80005c8 <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 80004fa:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80004fc:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80004fe:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000500:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000504:	f001 fe3a 	bl	800217c <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000508:	6823      	ldr	r3, [r4, #0]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	00de      	lsls	r6, r3, #3
 800050e:	d4c5      	bmi.n	800049c <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8000510:	4620      	mov	r0, r4
 8000512:	f7ff fef9 	bl	8000308 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000516:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000518:	06d5      	lsls	r5, r2, #27
 800051a:	d4c0      	bmi.n	800049e <HAL_ADC_Init+0x1e>
 800051c:	2800      	cmp	r0, #0
 800051e:	d1be      	bne.n	800049e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000522:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000526:	f023 0302 	bic.w	r3, r3, #2
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000530:	6823      	ldr	r3, [r4, #0]
 8000532:	689a      	ldr	r2, [r3, #8]
 8000534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000538:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000540:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000542:	4b62      	ldr	r3, [pc, #392]	; (80006cc <HAL_ADC_Init+0x24c>)
 8000544:	4a62      	ldr	r2, [pc, #392]	; (80006d0 <HAL_ADC_Init+0x250>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	fbb3 f2f2 	udiv	r2, r3, r2
 800054c:	230a      	movs	r3, #10
 800054e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000550:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000552:	9b00      	ldr	r3, [sp, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0a1      	beq.n	800049c <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8000558:	9b00      	ldr	r3, [sp, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	e7f8      	b.n	8000550 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800055e:	4618      	mov	r0, r3
 8000560:	e7af      	b.n	80004c2 <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000562:	4293      	cmp	r3, r2
 8000564:	bf0c      	ite	eq
 8000566:	9101      	streq	r1, [sp, #4]
 8000568:	9001      	strne	r0, [sp, #4]
 800056a:	e02c      	b.n	80005c6 <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 800056c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800056e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000572:	f042 0220 	orr.w	r2, r2, #32
 8000576:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000578:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800057a:	f042 0201 	orr.w	r2, r2, #1
 800057e:	64a2      	str	r2, [r4, #72]	; 0x48
 8000580:	e052      	b.n	8000628 <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000586:	e06d      	b.n	8000664 <HAL_ADC_Init+0x1e4>
 8000588:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800058c:	e06a      	b.n	8000664 <HAL_ADC_Init+0x1e4>
 800058e:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000592:	e067      	b.n	8000664 <HAL_ADC_Init+0x1e4>
 8000594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000598:	e064      	b.n	8000664 <HAL_ADC_Init+0x1e4>
 800059a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800059e:	e061      	b.n	8000664 <HAL_ADC_Init+0x1e4>
 80005a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005a4:	e05e      	b.n	8000664 <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 80005a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005a8:	f023 0312 	bic.w	r3, r3, #18
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80005b2:	2001      	movs	r0, #1
 80005b4:	e085      	b.n	80006c2 <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005b6:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005b8:	4a46      	ldr	r2, [pc, #280]	; (80006d4 <HAL_ADC_Init+0x254>)
 80005ba:	e005      	b.n	80005c8 <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005bc:	4946      	ldr	r1, [pc, #280]	; (80006d8 <HAL_ADC_Init+0x258>)
 80005be:	4a47      	ldr	r2, [pc, #284]	; (80006dc <HAL_ADC_Init+0x25c>)
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d1ce      	bne.n	8000562 <HAL_ADC_Init+0xe2>
 80005c4:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80005c6:	4a46      	ldr	r2, [pc, #280]	; (80006e0 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005c8:	6899      	ldr	r1, [r3, #8]
 80005ca:	f001 0103 	and.w	r1, r1, #3
 80005ce:	2901      	cmp	r1, #1
 80005d0:	d102      	bne.n	80005d8 <HAL_ADC_Init+0x158>
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	07ce      	lsls	r6, r1, #31
 80005d6:	d40f      	bmi.n	80005f8 <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80005d8:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005da:	b139      	cbz	r1, 80005ec <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80005dc:	688e      	ldr	r6, [r1, #8]
 80005de:	f006 0603 	and.w	r6, r6, #3
 80005e2:	2e01      	cmp	r6, #1
 80005e4:	d102      	bne.n	80005ec <HAL_ADC_Init+0x16c>
 80005e6:	6809      	ldr	r1, [r1, #0]
 80005e8:	07c9      	lsls	r1, r1, #31
 80005ea:	d405      	bmi.n	80005f8 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80005ec:	6891      	ldr	r1, [r2, #8]
 80005ee:	6866      	ldr	r6, [r4, #4]
 80005f0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80005f4:	4331      	orrs	r1, r6
 80005f6:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80005f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80005fa:	68a6      	ldr	r6, [r4, #8]
 80005fc:	69e2      	ldr	r2, [r4, #28]
 80005fe:	2901      	cmp	r1, #1
 8000600:	68e1      	ldr	r1, [r4, #12]
 8000602:	ea41 0106 	orr.w	r1, r1, r6
 8000606:	bf18      	it	ne
 8000608:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 800060c:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 8000610:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000612:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000614:	2d01      	cmp	r5, #1
 8000616:	d107      	bne.n	8000628 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000618:	2a00      	cmp	r2, #0
 800061a:	d1a7      	bne.n	800056c <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800061c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800061e:	3a01      	subs	r2, #1
 8000620:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 8000624:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000628:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800062a:	2a01      	cmp	r2, #1
 800062c:	d01d      	beq.n	800066a <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800062e:	4d2a      	ldr	r5, [pc, #168]	; (80006d8 <HAL_ADC_Init+0x258>)
 8000630:	42ab      	cmp	r3, r5
 8000632:	d003      	beq.n	800063c <HAL_ADC_Init+0x1bc>
 8000634:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8000638:	42ab      	cmp	r3, r5
 800063a:	d1a2      	bne.n	8000582 <HAL_ADC_Init+0x102>
 800063c:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8000640:	d0a2      	beq.n	8000588 <HAL_ADC_Init+0x108>
 8000642:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000646:	d0a2      	beq.n	800058e <HAL_ADC_Init+0x10e>
 8000648:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 800064c:	d0a2      	beq.n	8000594 <HAL_ADC_Init+0x114>
 800064e:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8000652:	d0a2      	beq.n	800059a <HAL_ADC_Init+0x11a>
 8000654:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000658:	d0a2      	beq.n	80005a0 <HAL_ADC_Init+0x120>
 800065a:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 800065e:	bf08      	it	eq
 8000660:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8000664:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000666:	4329      	orrs	r1, r5
 8000668:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	f012 0f0c 	tst.w	r2, #12
 8000670:	d10b      	bne.n	800068a <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000672:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000674:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000676:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800067a:	f022 0202 	bic.w	r2, r2, #2
 800067e:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000680:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8000688:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800068a:	68dd      	ldr	r5, [r3, #12]
 800068c:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <HAL_ADC_Init+0x264>)
 800068e:	402a      	ands	r2, r5
 8000690:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000692:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000694:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000696:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000698:	bf05      	ittet	eq
 800069a:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 800069c:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800069e:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80006a0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006a4:	bf06      	itte	eq
 80006a6:	f021 010f 	biceq.w	r1, r1, #15
 80006aa:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006ac:	f022 020f 	bicne.w	r2, r2, #15
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80006b2:	2300      	movs	r3, #0
 80006b4:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80006b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006b8:	f023 0303 	bic.w	r3, r3, #3
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6463      	str	r3, [r4, #68]	; 0x44
}
 80006c2:	b016      	add	sp, #88	; 0x58
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	bf00      	nop
 80006c8:	50000100 	.word	0x50000100
 80006cc:	20000000 	.word	0x20000000
 80006d0:	000f4240 	.word	0x000f4240
 80006d4:	50000300 	.word	0x50000300
 80006d8:	50000400 	.word	0x50000400
 80006dc:	50000500 	.word	0x50000500
 80006e0:	50000700 	.word	0x50000700
 80006e4:	fff0c007 	.word	0xfff0c007

080006e8 <HAL_ADC_Start>:
{
 80006e8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ea:	6803      	ldr	r3, [r0, #0]
 80006ec:	689d      	ldr	r5, [r3, #8]
 80006ee:	f015 0504 	ands.w	r5, r5, #4
{
 80006f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006f4:	f040 809d 	bne.w	8000832 <HAL_ADC_Start+0x14a>
    __HAL_LOCK(hadc);
 80006f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	f000 8098 	beq.w	8000832 <HAL_ADC_Start+0x14a>
 8000702:	2301      	movs	r3, #1
 8000704:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000708:	f7ff fe8c 	bl	8000424 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800070c:	2800      	cmp	r0, #0
 800070e:	f040 808d 	bne.w	800082c <HAL_ADC_Start+0x144>
      ADC_STATE_CLR_SET(hadc->State,
 8000712:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000718:	f023 0301 	bic.w	r3, r3, #1
 800071c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000720:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000728:	d002      	beq.n	8000730 <HAL_ADC_Start+0x48>
 800072a:	4a43      	ldr	r2, [pc, #268]	; (8000838 <HAL_ADC_Start+0x150>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d117      	bne.n	8000760 <HAL_ADC_Start+0x78>
 8000730:	4a42      	ldr	r2, [pc, #264]	; (800083c <HAL_ADC_Start+0x154>)
 8000732:	6892      	ldr	r2, [r2, #8]
 8000734:	06d1      	lsls	r1, r2, #27
 8000736:	d005      	beq.n	8000744 <HAL_ADC_Start+0x5c>
 8000738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800073c:	d002      	beq.n	8000744 <HAL_ADC_Start+0x5c>
 800073e:	4a40      	ldr	r2, [pc, #256]	; (8000840 <HAL_ADC_Start+0x158>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d11a      	bne.n	800077a <HAL_ADC_Start+0x92>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000744:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000746:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800074a:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800074c:	68da      	ldr	r2, [r3, #12]
 800074e:	0195      	lsls	r5, r2, #6
 8000750:	d521      	bpl.n	8000796 <HAL_ADC_Start+0xae>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000752:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000754:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000758:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800075c:	6462      	str	r2, [r4, #68]	; 0x44
 800075e:	e01a      	b.n	8000796 <HAL_ADC_Start+0xae>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000760:	4a38      	ldr	r2, [pc, #224]	; (8000844 <HAL_ADC_Start+0x15c>)
 8000762:	6892      	ldr	r2, [r2, #8]
 8000764:	06d2      	lsls	r2, r2, #27
 8000766:	d0ed      	beq.n	8000744 <HAL_ADC_Start+0x5c>
 8000768:	4a35      	ldr	r2, [pc, #212]	; (8000840 <HAL_ADC_Start+0x158>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d0ea      	beq.n	8000744 <HAL_ADC_Start+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800076e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000770:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000774:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000776:	4a32      	ldr	r2, [pc, #200]	; (8000840 <HAL_ADC_Start+0x158>)
 8000778:	e008      	b.n	800078c <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800077a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800077c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000780:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000782:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <HAL_ADC_Start+0x150>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d1f6      	bne.n	8000776 <HAL_ADC_Start+0x8e>
 8000788:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800078c:	68d2      	ldr	r2, [r2, #12]
 800078e:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8000792:	2a00      	cmp	r2, #0
 8000794:	d1dd      	bne.n	8000752 <HAL_ADC_Start+0x6a>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000796:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800079c:	bf1c      	itt	ne
 800079e:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 80007a0:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80007a4:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80007ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007b0:	f04f 021c 	mov.w	r2, #28
 80007b4:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80007b6:	d002      	beq.n	80007be <HAL_ADC_Start+0xd6>
 80007b8:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <HAL_ADC_Start+0x150>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d108      	bne.n	80007d0 <HAL_ADC_Start+0xe8>
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <HAL_ADC_Start+0x154>)
 80007c0:	6891      	ldr	r1, [r2, #8]
 80007c2:	06c9      	lsls	r1, r1, #27
 80007c4:	d118      	bne.n	80007f8 <HAL_ADC_Start+0x110>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	f042 0204 	orr.w	r2, r2, #4
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80007d0:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <HAL_ADC_Start+0x15c>)
 80007d2:	6892      	ldr	r2, [r2, #8]
 80007d4:	06d2      	lsls	r2, r2, #27
 80007d6:	d0f6      	beq.n	80007c6 <HAL_ADC_Start+0xde>
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <HAL_ADC_Start+0x15c>)
 80007da:	6892      	ldr	r2, [r2, #8]
 80007dc:	f002 021f 	and.w	r2, r2, #31
 80007e0:	2a05      	cmp	r2, #5
 80007e2:	d0f0      	beq.n	80007c6 <HAL_ADC_Start+0xde>
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_ADC_Start+0x15c>)
 80007e6:	6892      	ldr	r2, [r2, #8]
 80007e8:	f002 021f 	and.w	r2, r2, #31
 80007ec:	2a09      	cmp	r2, #9
 80007ee:	d0ea      	beq.n	80007c6 <HAL_ADC_Start+0xde>
 80007f0:	4a13      	ldr	r2, [pc, #76]	; (8000840 <HAL_ADC_Start+0x158>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d0e7      	beq.n	80007c6 <HAL_ADC_Start+0xde>
}
 80007f6:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80007f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007fc:	d002      	beq.n	8000804 <HAL_ADC_Start+0x11c>
 80007fe:	490e      	ldr	r1, [pc, #56]	; (8000838 <HAL_ADC_Start+0x150>)
 8000800:	428b      	cmp	r3, r1
 8000802:	d1e9      	bne.n	80007d8 <HAL_ADC_Start+0xf0>
 8000804:	6892      	ldr	r2, [r2, #8]
 8000806:	f002 021f 	and.w	r2, r2, #31
 800080a:	2a05      	cmp	r2, #5
 800080c:	d0db      	beq.n	80007c6 <HAL_ADC_Start+0xde>
 800080e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000812:	d002      	beq.n	800081a <HAL_ADC_Start+0x132>
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_ADC_Start+0x150>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d1e4      	bne.n	80007e4 <HAL_ADC_Start+0xfc>
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_ADC_Start+0x154>)
 800081c:	6892      	ldr	r2, [r2, #8]
 800081e:	f002 021f 	and.w	r2, r2, #31
 8000822:	2a09      	cmp	r2, #9
 8000824:	d0cf      	beq.n	80007c6 <HAL_ADC_Start+0xde>
 8000826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800082a:	e7e0      	b.n	80007ee <HAL_ADC_Start+0x106>
      __HAL_UNLOCK(hadc);
 800082c:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 8000830:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8000832:	2002      	movs	r0, #2
 8000834:	bd38      	pop	{r3, r4, r5, pc}
 8000836:	bf00      	nop
 8000838:	50000100 	.word	0x50000100
 800083c:	50000300 	.word	0x50000300
 8000840:	50000400 	.word	0x50000400
 8000844:	50000700 	.word	0x50000700

08000848 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000848:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800084c:	2b01      	cmp	r3, #1
{
 800084e:	b510      	push	{r4, lr}
 8000850:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000852:	d016      	beq.n	8000882 <HAL_ADC_Stop+0x3a>
 8000854:	2301      	movs	r3, #1
 8000856:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800085a:	216c      	movs	r1, #108	; 0x6c
 800085c:	f7ff fd8c 	bl	8000378 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000860:	b958      	cbnz	r0, 800087a <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8000862:	4620      	mov	r0, r4
 8000864:	f7ff fd50 	bl	8000308 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000868:	b938      	cbnz	r0, 800087a <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800086a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800086c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800087a:	2300      	movs	r3, #0
 800087c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8000880:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000882:	2002      	movs	r0, #2
}
 8000884:	bd10      	pop	{r4, pc}
	...

08000888 <HAL_ADC_PollForConversion>:
{
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800088c:	6946      	ldr	r6, [r0, #20]
 800088e:	6803      	ldr	r3, [r0, #0]
 8000890:	2e08      	cmp	r6, #8
{
 8000892:	4604      	mov	r4, r0
 8000894:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000896:	d027      	beq.n	80008e8 <HAL_ADC_PollForConversion+0x60>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800089c:	d015      	beq.n	80008ca <HAL_ADC_PollForConversion+0x42>
 800089e:	4946      	ldr	r1, [pc, #280]	; (80009b8 <HAL_ADC_PollForConversion+0x130>)
 80008a0:	4a46      	ldr	r2, [pc, #280]	; (80009bc <HAL_ADC_PollForConversion+0x134>)
 80008a2:	4847      	ldr	r0, [pc, #284]	; (80009c0 <HAL_ADC_PollForConversion+0x138>)
 80008a4:	4283      	cmp	r3, r0
 80008a6:	bf08      	it	eq
 80008a8:	460a      	moveq	r2, r1
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80008aa:	6891      	ldr	r1, [r2, #8]
 80008ac:	f011 011f 	ands.w	r1, r1, #31
 80008b0:	d10d      	bne.n	80008ce <HAL_ADC_PollForConversion+0x46>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	07d5      	lsls	r5, r2, #31
 80008b6:	d516      	bpl.n	80008e6 <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80008ba:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80008c4:	2001      	movs	r0, #1
 80008c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008ca:	4a3b      	ldr	r2, [pc, #236]	; (80009b8 <HAL_ADC_PollForConversion+0x130>)
 80008cc:	e7ed      	b.n	80008aa <HAL_ADC_PollForConversion+0x22>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80008ce:	6892      	ldr	r2, [r2, #8]
 80008d0:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 80008d4:	d007      	beq.n	80008e6 <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80008de:	2300      	movs	r3, #0
 80008e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80008e4:	e7ee      	b.n	80008c4 <HAL_ADC_PollForConversion+0x3c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80008e6:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008ec:	d002      	beq.n	80008f4 <HAL_ADC_PollForConversion+0x6c>
 80008ee:	4a34      	ldr	r2, [pc, #208]	; (80009c0 <HAL_ADC_PollForConversion+0x138>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d134      	bne.n	800095e <HAL_ADC_PollForConversion+0xd6>
 80008f4:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <HAL_ADC_PollForConversion+0x130>)
 80008f6:	6892      	ldr	r2, [r2, #8]
 80008f8:	06d0      	lsls	r0, r2, #27
 80008fa:	d005      	beq.n	8000908 <HAL_ADC_PollForConversion+0x80>
 80008fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000900:	d002      	beq.n	8000908 <HAL_ADC_PollForConversion+0x80>
 8000902:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <HAL_ADC_PollForConversion+0x13c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d133      	bne.n	8000970 <HAL_ADC_PollForConversion+0xe8>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000908:	68dd      	ldr	r5, [r3, #12]
  tickstart = HAL_GetTick();  
 800090a:	f7ff fce7 	bl	80002dc <HAL_GetTick>
 800090e:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4216      	tst	r6, r2
 8000916:	d032      	beq.n	800097e <HAL_ADC_PollForConversion+0xf6>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000918:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800091a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800091e:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000926:	d113      	bne.n	8000950 <HAL_ADC_PollForConversion+0xc8>
 8000928:	04a8      	lsls	r0, r5, #18
 800092a:	d411      	bmi.n	8000950 <HAL_ADC_PollForConversion+0xc8>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	0711      	lsls	r1, r2, #28
 8000930:	d50e      	bpl.n	8000950 <HAL_ADC_PollForConversion+0xc8>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	f012 0f04 	tst.w	r2, #4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000938:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800093a:	d134      	bne.n	80009a6 <HAL_ADC_PollForConversion+0x11e>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800093c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000940:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000942:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000944:	04d2      	lsls	r2, r2, #19
 8000946:	d403      	bmi.n	8000950 <HAL_ADC_PollForConversion+0xc8>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000948:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800094a:	f042 0201 	orr.w	r2, r2, #1
 800094e:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000950:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000954:	bf0c      	ite	eq
 8000956:	601e      	streq	r6, [r3, #0]
  return HAL_OK;
 8000958:	2000      	movne	r0, #0
 800095a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_ADC_PollForConversion+0x134>)
 8000960:	6892      	ldr	r2, [r2, #8]
 8000962:	06d1      	lsls	r1, r2, #27
 8000964:	d0d0      	beq.n	8000908 <HAL_ADC_PollForConversion+0x80>
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_ADC_PollForConversion+0x13c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d0cd      	beq.n	8000908 <HAL_ADC_PollForConversion+0x80>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800096c:	4613      	mov	r3, r2
 800096e:	e7cb      	b.n	8000908 <HAL_ADC_PollForConversion+0x80>
 8000970:	4913      	ldr	r1, [pc, #76]	; (80009c0 <HAL_ADC_PollForConversion+0x138>)
 8000972:	428b      	cmp	r3, r1
 8000974:	bf14      	ite	ne
 8000976:	4613      	movne	r3, r2
 8000978:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
 800097c:	e7c4      	b.n	8000908 <HAL_ADC_PollForConversion+0x80>
    if(Timeout != HAL_MAX_DELAY)
 800097e:	1c7a      	adds	r2, r7, #1
 8000980:	d0c7      	beq.n	8000912 <HAL_ADC_PollForConversion+0x8a>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000982:	b94f      	cbnz	r7, 8000998 <HAL_ADC_PollForConversion+0x110>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800098c:	2300      	movs	r3, #0
 800098e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000992:	2003      	movs	r0, #3
 8000994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000998:	f7ff fca0 	bl	80002dc <HAL_GetTick>
 800099c:	eba0 0008 	sub.w	r0, r0, r8
 80009a0:	4287      	cmp	r7, r0
 80009a2:	d2b5      	bcs.n	8000910 <HAL_ADC_PollForConversion+0x88>
 80009a4:	e7ee      	b.n	8000984 <HAL_ADC_PollForConversion+0xfc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009a6:	f042 0220 	orr.w	r2, r2, #32
 80009aa:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80009ae:	f042 0201 	orr.w	r2, r2, #1
 80009b2:	64a2      	str	r2, [r4, #72]	; 0x48
 80009b4:	e7cc      	b.n	8000950 <HAL_ADC_PollForConversion+0xc8>
 80009b6:	bf00      	nop
 80009b8:	50000300 	.word	0x50000300
 80009bc:	50000700 	.word	0x50000700
 80009c0:	50000100 	.word	0x50000100
 80009c4:	50000400 	.word	0x50000400

080009c8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80009c8:	6803      	ldr	r3, [r0, #0]
 80009ca:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_ADC_ConfigChannel>:
{
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 80009d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80009dc:	2b01      	cmp	r3, #1
{
 80009de:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80009e0:	f000 8163 	beq.w	8000caa <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009e4:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80009e6:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009e8:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80009ea:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009ec:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 80009ee:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009f2:	f100 8155 	bmi.w	8000ca0 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 80009f6:	6848      	ldr	r0, [r1, #4]
 80009f8:	680c      	ldr	r4, [r1, #0]
 80009fa:	2804      	cmp	r0, #4
 80009fc:	f04f 0206 	mov.w	r2, #6
 8000a00:	d831      	bhi.n	8000a66 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000a02:	4342      	muls	r2, r0
 8000a04:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000a06:	201f      	movs	r0, #31
 8000a08:	4090      	lsls	r0, r2
 8000a0a:	ea27 0000 	bic.w	r0, r7, r0
 8000a0e:	fa04 f202 	lsl.w	r2, r4, r2
 8000a12:	4302      	orrs	r2, r0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	f012 0f0c 	tst.w	r2, #12
 8000a1c:	d162      	bne.n	8000ae4 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a1e:	2c09      	cmp	r4, #9
 8000a20:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000a24:	688f      	ldr	r7, [r1, #8]
 8000a26:	d946      	bls.n	8000ab6 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a28:	4422      	add	r2, r4
 8000a2a:	6998      	ldr	r0, [r3, #24]
 8000a2c:	3a1e      	subs	r2, #30
 8000a2e:	f04f 0e07 	mov.w	lr, #7
 8000a32:	fa0e fe02 	lsl.w	lr, lr, r2
 8000a36:	ea20 000e 	bic.w	r0, r0, lr
 8000a3a:	fa07 f202 	lsl.w	r2, r7, r2
 8000a3e:	4302      	orrs	r2, r0
 8000a40:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000a48:	694a      	ldr	r2, [r1, #20]
 8000a4a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000a4e:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000a52:	690a      	ldr	r2, [r1, #16]
 8000a54:	3a01      	subs	r2, #1
 8000a56:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8000a5a:	2a03      	cmp	r2, #3
 8000a5c:	d873      	bhi.n	8000b46 <HAL_ADC_ConfigChannel+0x176>
 8000a5e:	e8df f002 	tbb	[pc, r2]
 8000a62:	5137      	.short	0x5137
 8000a64:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8000a66:	2809      	cmp	r0, #9
 8000a68:	d80b      	bhi.n	8000a82 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8000a6a:	4342      	muls	r2, r0
 8000a6c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000a6e:	3a1e      	subs	r2, #30
 8000a70:	201f      	movs	r0, #31
 8000a72:	4090      	lsls	r0, r2
 8000a74:	ea27 0000 	bic.w	r0, r7, r0
 8000a78:	fa04 f202 	lsl.w	r2, r4, r2
 8000a7c:	4302      	orrs	r2, r0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a80:	e7c9      	b.n	8000a16 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000a82:	280e      	cmp	r0, #14
 8000a84:	d80b      	bhi.n	8000a9e <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a86:	4342      	muls	r2, r0
 8000a88:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8000a8a:	3a3c      	subs	r2, #60	; 0x3c
 8000a8c:	201f      	movs	r0, #31
 8000a8e:	4090      	lsls	r0, r2
 8000a90:	ea27 0000 	bic.w	r0, r7, r0
 8000a94:	fa04 f202 	lsl.w	r2, r4, r2
 8000a98:	4302      	orrs	r2, r0
 8000a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000a9c:	e7bb      	b.n	8000a16 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000a9e:	4342      	muls	r2, r0
 8000aa0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000aa2:	3a5a      	subs	r2, #90	; 0x5a
 8000aa4:	201f      	movs	r0, #31
 8000aa6:	4090      	lsls	r0, r2
 8000aa8:	ea27 0000 	bic.w	r0, r7, r0
 8000aac:	fa04 f202 	lsl.w	r2, r4, r2
 8000ab0:	4302      	orrs	r2, r0
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab4:	e7af      	b.n	8000a16 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ab6:	6958      	ldr	r0, [r3, #20]
 8000ab8:	4422      	add	r2, r4
 8000aba:	f04f 0e07 	mov.w	lr, #7
 8000abe:	fa0e fe02 	lsl.w	lr, lr, r2
 8000ac2:	ea20 000e 	bic.w	r0, r0, lr
 8000ac6:	fa07 f202 	lsl.w	r2, r7, r2
 8000aca:	4302      	orrs	r2, r0
 8000acc:	615a      	str	r2, [r3, #20]
 8000ace:	e7b8      	b.n	8000a42 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ad2:	4f83      	ldr	r7, [pc, #524]	; (8000ce0 <HAL_ADC_ConfigChannel+0x310>)
 8000ad4:	4017      	ands	r7, r2
 8000ad6:	ea47 020c 	orr.w	r2, r7, ip
 8000ada:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ade:	ea42 020e 	orr.w	r2, r2, lr
 8000ae2:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	2a01      	cmp	r2, #1
 8000aec:	f040 80df 	bne.w	8000cae <HAL_ADC_ConfigChannel+0x2de>
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	07d7      	lsls	r7, r2, #31
 8000af4:	f140 80db 	bpl.w	8000cae <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000afa:	2300      	movs	r3, #0
 8000afc:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000b00:	b017      	add	sp, #92	; 0x5c
 8000b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000b04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b06:	4f76      	ldr	r7, [pc, #472]	; (8000ce0 <HAL_ADC_ConfigChannel+0x310>)
 8000b08:	4017      	ands	r7, r2
 8000b0a:	ea47 020c 	orr.w	r2, r7, ip
 8000b0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b12:	ea42 020e 	orr.w	r2, r2, lr
 8000b16:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000b18:	e7e4      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000b1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000b1c:	4870      	ldr	r0, [pc, #448]	; (8000ce0 <HAL_ADC_ConfigChannel+0x310>)
 8000b1e:	4010      	ands	r0, r2
 8000b20:	ea40 020c 	orr.w	r2, r0, ip
 8000b24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b28:	ea42 020e 	orr.w	r2, r2, lr
 8000b2c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8000b2e:	e7d9      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000b30:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000b32:	4a6b      	ldr	r2, [pc, #428]	; (8000ce0 <HAL_ADC_ConfigChannel+0x310>)
 8000b34:	4002      	ands	r2, r0
 8000b36:	ea42 020c 	orr.w	r2, r2, ip
 8000b3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000b3e:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000b42:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b44:	e7ce      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b48:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b4c:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000b4e:	bf02      	ittt	eq
 8000b50:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000b52:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000b56:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b5a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b5e:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000b60:	bf02      	ittt	eq
 8000b62:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000b64:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000b68:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000b6c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b70:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000b72:	bf02      	ittt	eq
 8000b74:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000b76:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000b7a:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000b7e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000b82:	4594      	cmp	ip, r2
 8000b84:	d1ae      	bne.n	8000ae4 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000b86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000b88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b8c:	e7d9      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b92:	2101      	movs	r1, #1
 8000b94:	40a1      	lsls	r1, r4
 8000b96:	ea22 0201 	bic.w	r2, r2, r1
 8000b9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba2:	d01e      	beq.n	8000be2 <HAL_ADC_ConfigChannel+0x212>
 8000ba4:	494f      	ldr	r1, [pc, #316]	; (8000ce4 <HAL_ADC_ConfigChannel+0x314>)
 8000ba6:	4a50      	ldr	r2, [pc, #320]	; (8000ce8 <HAL_ADC_ConfigChannel+0x318>)
 8000ba8:	4850      	ldr	r0, [pc, #320]	; (8000cec <HAL_ADC_ConfigChannel+0x31c>)
 8000baa:	4283      	cmp	r3, r0
 8000bac:	bf08      	it	eq
 8000bae:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000bb0:	2c10      	cmp	r4, #16
 8000bb2:	d118      	bne.n	8000be6 <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000bb4:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000bb6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000bba:	d19d      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc0:	494a      	ldr	r1, [pc, #296]	; (8000cec <HAL_ADC_ConfigChannel+0x31c>)
 8000bc2:	d11c      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x22e>
 8000bc4:	9101      	str	r1, [sp, #4]
 8000bc6:	e024      	b.n	8000c12 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000bc8:	1c60      	adds	r0, r4, #1
 8000bca:	6959      	ldr	r1, [r3, #20]
 8000bcc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	4082      	lsls	r2, r0
 8000bd4:	ea21 0102 	bic.w	r1, r1, r2
 8000bd8:	fa06 f200 	lsl.w	r2, r6, r0
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	e7dd      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000be2:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <HAL_ADC_ConfigChannel+0x314>)
 8000be4:	e7e4      	b.n	8000bb0 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000be6:	2c11      	cmp	r4, #17
 8000be8:	d103      	bne.n	8000bf2 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000bea:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000bec:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000bf0:	e7e3      	b.n	8000bba <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000bf2:	2c12      	cmp	r4, #18
 8000bf4:	d180      	bne.n	8000af8 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000bf6:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000bf8:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000bfc:	e7dd      	b.n	8000bba <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d102      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x238>
 8000c02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000c06:	e7dd      	b.n	8000bc4 <HAL_ADC_ConfigChannel+0x1f4>
 8000c08:	4939      	ldr	r1, [pc, #228]	; (8000cf0 <HAL_ADC_ConfigChannel+0x320>)
 8000c0a:	483a      	ldr	r0, [pc, #232]	; (8000cf4 <HAL_ADC_ConfigChannel+0x324>)
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d12b      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x298>
 8000c10:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c12:	6899      	ldr	r1, [r3, #8]
 8000c14:	f001 0103 	and.w	r1, r1, #3
 8000c18:	2901      	cmp	r1, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_ADC_ConfigChannel+0x252>
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	07c8      	lsls	r0, r1, #31
 8000c20:	d438      	bmi.n	8000c94 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c22:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c24:	b139      	cbz	r1, 8000c36 <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c26:	6888      	ldr	r0, [r1, #8]
 8000c28:	f000 0003 	and.w	r0, r0, #3
 8000c2c:	2801      	cmp	r0, #1
 8000c2e:	d102      	bne.n	8000c36 <HAL_ADC_ConfigChannel+0x266>
 8000c30:	6809      	ldr	r1, [r1, #0]
 8000c32:	07c9      	lsls	r1, r1, #31
 8000c34:	d42e      	bmi.n	8000c94 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000c36:	2c10      	cmp	r4, #16
 8000c38:	d11a      	bne.n	8000c70 <HAL_ADC_ConfigChannel+0x2a0>
 8000c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c3e:	f47f af5b 	bne.w	8000af8 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000c42:	6893      	ldr	r3, [r2, #8]
 8000c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c48:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_ADC_ConfigChannel+0x328>)
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <HAL_ADC_ConfigChannel+0x32c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c54:	230a      	movs	r3, #10
 8000c56:	4353      	muls	r3, r2
            wait_loop_index--;
 8000c58:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f43f af4b 	beq.w	8000af8 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000c62:	9b00      	ldr	r3, [sp, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	e7f7      	b.n	8000c58 <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c68:	4283      	cmp	r3, r0
 8000c6a:	bf18      	it	ne
 8000c6c:	2100      	movne	r1, #0
 8000c6e:	e7a9      	b.n	8000bc4 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000c70:	2c11      	cmp	r4, #17
 8000c72:	d108      	bne.n	8000c86 <HAL_ADC_ConfigChannel+0x2b6>
 8000c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c78:	f47f af3e 	bne.w	8000af8 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000c7c:	6893      	ldr	r3, [r2, #8]
 8000c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000c82:	6093      	str	r3, [r2, #8]
 8000c84:	e738      	b.n	8000af8 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000c86:	2c12      	cmp	r4, #18
 8000c88:	f47f af36 	bne.w	8000af8 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000c8c:	6893      	ldr	r3, [r2, #8]
 8000c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c92:	e7f6      	b.n	8000c82 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c94:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000c96:	f043 0320 	orr.w	r3, r3, #32
 8000c9a:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	e72c      	b.n	8000afa <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ca0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	646b      	str	r3, [r5, #68]	; 0x44
 8000ca8:	e727      	b.n	8000afa <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000caa:	2002      	movs	r0, #2
 8000cac:	e728      	b.n	8000b00 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000cae:	2e01      	cmp	r6, #1
 8000cb0:	f47f af6d 	bne.w	8000b8e <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000cb4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000cb8:	40a6      	lsls	r6, r4
 8000cba:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cbc:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000cbe:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000cc2:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cc4:	d980      	bls.n	8000bc8 <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000cc6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000cca:	6999      	ldr	r1, [r3, #24]
 8000ccc:	3a1b      	subs	r2, #27
 8000cce:	2007      	movs	r0, #7
 8000cd0:	4090      	lsls	r0, r2
 8000cd2:	ea21 0100 	bic.w	r1, r1, r0
 8000cd6:	fa06 f202 	lsl.w	r2, r6, r2
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	619a      	str	r2, [r3, #24]
 8000cde:	e75e      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x1ce>
 8000ce0:	83fff000 	.word	0x83fff000
 8000ce4:	50000300 	.word	0x50000300
 8000ce8:	50000700 	.word	0x50000700
 8000cec:	50000100 	.word	0x50000100
 8000cf0:	50000400 	.word	0x50000400
 8000cf4:	50000500 	.word	0x50000500
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	000f4240 	.word	0x000f4240

08000d00 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d02:	6802      	ldr	r2, [r0, #0]
 8000d04:	4b41      	ldr	r3, [pc, #260]	; (8000e0c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000d06:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8000d0a:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	e009      	b.n	8000d26 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d102      	bne.n	8000d1c <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8000d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d1a:	e7f8      	b.n	8000d0e <HAL_ADCEx_MultiModeConfigChannel+0xe>
 8000d1c:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000d1e:	4c3d      	ldr	r4, [pc, #244]	; (8000e14 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d130      	bne.n	8000d86 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000d24:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000d26:	9c01      	ldr	r4, [sp, #4]
 8000d28:	2c00      	cmp	r4, #0
 8000d2a:	d058      	beq.n	8000dde <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8000d2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d056      	beq.n	8000de2 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8000d34:	2301      	movs	r3, #1
 8000d36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000d3a:	6893      	ldr	r3, [r2, #8]
 8000d3c:	075b      	lsls	r3, r3, #29
 8000d3e:	d443      	bmi.n	8000dc8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000d40:	68a3      	ldr	r3, [r4, #8]
 8000d42:	075f      	lsls	r7, r3, #29
 8000d44:	d440      	bmi.n	8000dc8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d46:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000d4a:	d020      	beq.n	8000d8e <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8000d4c:	4d32      	ldr	r5, [pc, #200]	; (8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8000d50:	4e2e      	ldr	r6, [pc, #184]	; (8000e0c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000d52:	42b2      	cmp	r2, r6
 8000d54:	bf08      	it	eq
 8000d56:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000d58:	680d      	ldr	r5, [r1, #0]
 8000d5a:	b1d5      	cbz	r5, 8000d92 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000d5c:	684e      	ldr	r6, [r1, #4]
 8000d5e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000d62:	4637      	mov	r7, r6
 8000d64:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000d66:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8000d6a:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8000d6e:	433e      	orrs	r6, r7
 8000d70:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000d72:	6896      	ldr	r6, [r2, #8]
 8000d74:	f006 0603 	and.w	r6, r6, #3
 8000d78:	2e01      	cmp	r6, #1
 8000d7a:	d134      	bne.n	8000de6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	07d6      	lsls	r6, r2, #31
 8000d80:	d531      	bpl.n	8000de6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e025      	b.n	8000dd2 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d86:	42a2      	cmp	r2, r4
 8000d88:	bf18      	it	ne
 8000d8a:	2300      	movne	r3, #0
 8000d8c:	e7bf      	b.n	8000d0e <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000d90:	e7e2      	b.n	8000d58 <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000d92:	6899      	ldr	r1, [r3, #8]
 8000d94:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000d98:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000d9a:	6891      	ldr	r1, [r2, #8]
 8000d9c:	f001 0103 	and.w	r1, r1, #3
 8000da0:	2901      	cmp	r1, #1
 8000da2:	d102      	bne.n	8000daa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	07d1      	lsls	r1, r2, #31
 8000da8:	d4eb      	bmi.n	8000d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000daa:	68a2      	ldr	r2, [r4, #8]
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	2a01      	cmp	r2, #1
 8000db2:	d102      	bne.n	8000dba <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8000db4:	6822      	ldr	r2, [r4, #0]
 8000db6:	07d2      	lsls	r2, r2, #31
 8000db8:	d4e3      	bmi.n	8000d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000dc0:	f022 020f 	bic.w	r2, r2, #15
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	e7dc      	b.n	8000d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8000dd8:	4618      	mov	r0, r3
 8000dda:	b017      	add	sp, #92	; 0x5c
 8000ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e7fa      	b.n	8000dd8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8000de2:	2302      	movs	r3, #2
 8000de4:	e7f8      	b.n	8000dd8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000de6:	68a2      	ldr	r2, [r4, #8]
 8000de8:	f002 0203 	and.w	r2, r2, #3
 8000dec:	2a01      	cmp	r2, #1
 8000dee:	d102      	bne.n	8000df6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	07d4      	lsls	r4, r2, #31
 8000df4:	d4c5      	bmi.n	8000d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	6889      	ldr	r1, [r1, #8]
 8000dfa:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000dfe:	430d      	orrs	r5, r1
 8000e00:	f022 020f 	bic.w	r2, r2, #15
 8000e04:	4315      	orrs	r5, r2
 8000e06:	609d      	str	r5, [r3, #8]
 8000e08:	e7bb      	b.n	8000d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8000e0a:	bf00      	nop
 8000e0c:	50000100 	.word	0x50000100
 8000e10:	50000400 	.word	0x50000400
 8000e14:	50000500 	.word	0x50000500
 8000e18:	50000300 	.word	0x50000300
 8000e1c:	50000700 	.word	0x50000700

08000e20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e30:	0200      	lsls	r0, r0, #8
 8000e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e3a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e3c:	60d3      	str	r3, [r2, #12]
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e46:	b530      	push	{r4, r5, lr}
 8000e48:	68dc      	ldr	r4, [r3, #12]
 8000e4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	bf28      	it	cs
 8000e58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 0501 	mov.w	r5, #1
 8000e60:	fa05 f303 	lsl.w	r3, r5, r3
 8000e64:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e68:	bf8c      	ite	hi
 8000e6a:	3c03      	subhi	r4, #3
 8000e6c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6e:	4019      	ands	r1, r3
 8000e70:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e72:	fa05 f404 	lsl.w	r4, r5, r4
 8000e76:	3c01      	subs	r4, #1
 8000e78:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	ea42 0201 	orr.w	r2, r2, r1
 8000e80:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	bfaf      	iteee	ge
 8000e86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	f000 000f 	andlt.w	r0, r0, #15
 8000e8e:	4b06      	ldrlt	r3, [pc, #24]	; (8000ea8 <HAL_NVIC_SetPriority+0x64>)
 8000e90:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	bfa5      	ittet	ge
 8000e94:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000e98:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ea0:	bd30      	pop	{r4, r5, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00
 8000ea8:	e000ed14 	.word	0xe000ed14

08000eac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	3801      	subs	r0, #1
 8000eae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eb2:	d20a      	bcs.n	8000eca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	21f0      	movs	r1, #240	; 0xf0
 8000ebc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eda:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000edc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ede:	bf0c      	ite	eq
 8000ee0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ee4:	f022 0204 	bicne.w	r2, r2, #4
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	4770      	bx	lr
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_SYSTICK_IRQHandler>:
{
 8000ef2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ef4:	f7ff fffc 	bl	8000ef0 <HAL_SYSTICK_Callback>
 8000ef8:	bd08      	pop	{r3, pc}
	...

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f00:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f04:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8001098 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f08:	4a61      	ldr	r2, [pc, #388]	; (8001090 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000f0a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f0c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000f10:	d102      	bne.n	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000f12:	b003      	add	sp, #12
 8000f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f18:	f04f 0e01 	mov.w	lr, #1
 8000f1c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000f20:	ea18 060e 	ands.w	r6, r8, lr
 8000f24:	f000 80a6 	beq.w	8001074 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	684c      	ldr	r4, [r1, #4]
 8000f2a:	f024 0710 	bic.w	r7, r4, #16
 8000f2e:	2f02      	cmp	r7, #2
 8000f30:	d116      	bne.n	8000f60 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000f32:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000f36:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000f3e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f46:	f04f 0c0f 	mov.w	ip, #15
 8000f4a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000f4e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f52:	690d      	ldr	r5, [r1, #16]
 8000f54:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f58:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f5c:	f8ca 5020 	str.w	r5, [sl, #32]
 8000f60:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f64:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f66:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6a:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f6e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f74:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f7e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f82:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f84:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f88:	d811      	bhi.n	8000fae <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000f8a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f90:	68cf      	ldr	r7, [r1, #12]
 8000f92:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000f96:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000f9a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f9c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fa2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000fa6:	409f      	lsls	r7, r3
 8000fa8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000fac:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000fae:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb2:	688f      	ldr	r7, [r1, #8]
 8000fb4:	fa07 f70a 	lsl.w	r7, r7, sl
 8000fb8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000fba:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbc:	00e5      	lsls	r5, r4, #3
 8000fbe:	d559      	bpl.n	8001074 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000fc4:	f045 0501 	orr.w	r5, r5, #1
 8000fc8:	f8c9 5018 	str.w	r5, [r9, #24]
 8000fcc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000fd0:	f023 0703 	bic.w	r7, r3, #3
 8000fd4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000fd8:	f005 0501 	and.w	r5, r5, #1
 8000fdc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000fe0:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fe2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000fe8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fee:	f04f 0e0f 	mov.w	lr, #15
 8000ff2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ffa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ffe:	d03b      	beq.n	8001078 <HAL_GPIO_Init+0x17c>
 8001000:	4d24      	ldr	r5, [pc, #144]	; (8001094 <HAL_GPIO_Init+0x198>)
 8001002:	42a8      	cmp	r0, r5
 8001004:	d03a      	beq.n	800107c <HAL_GPIO_Init+0x180>
 8001006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800100a:	42a8      	cmp	r0, r5
 800100c:	d038      	beq.n	8001080 <HAL_GPIO_Init+0x184>
 800100e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001012:	42a8      	cmp	r0, r5
 8001014:	d036      	beq.n	8001084 <HAL_GPIO_Init+0x188>
 8001016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800101a:	42a8      	cmp	r0, r5
 800101c:	d034      	beq.n	8001088 <HAL_GPIO_Init+0x18c>
 800101e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001022:	42a8      	cmp	r0, r5
 8001024:	d032      	beq.n	800108c <HAL_GPIO_Init+0x190>
 8001026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800102a:	42a8      	cmp	r0, r5
 800102c:	bf14      	ite	ne
 800102e:	2507      	movne	r5, #7
 8001030:	2506      	moveq	r5, #6
 8001032:	fa05 f50c 	lsl.w	r5, r5, ip
 8001036:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800103a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800103c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800103e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001044:	bf0c      	ite	eq
 8001046:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001048:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800104a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800104c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800104e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001052:	bf0c      	ite	eq
 8001054:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001056:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8001058:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800105a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001060:	bf0c      	ite	eq
 8001062:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001064:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8001066:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001068:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800106c:	bf54      	ite	pl
 800106e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001070:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8001072:	60d5      	str	r5, [r2, #12]
    position++;
 8001074:	3301      	adds	r3, #1
 8001076:	e749      	b.n	8000f0c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001078:	2500      	movs	r5, #0
 800107a:	e7da      	b.n	8001032 <HAL_GPIO_Init+0x136>
 800107c:	2501      	movs	r5, #1
 800107e:	e7d8      	b.n	8001032 <HAL_GPIO_Init+0x136>
 8001080:	2502      	movs	r5, #2
 8001082:	e7d6      	b.n	8001032 <HAL_GPIO_Init+0x136>
 8001084:	2503      	movs	r5, #3
 8001086:	e7d4      	b.n	8001032 <HAL_GPIO_Init+0x136>
 8001088:	2504      	movs	r5, #4
 800108a:	e7d2      	b.n	8001032 <HAL_GPIO_Init+0x136>
 800108c:	2505      	movs	r5, #5
 800108e:	e7d0      	b.n	8001032 <HAL_GPIO_Init+0x136>
 8001090:	40010400 	.word	0x40010400
 8001094:	48000400 	.word	0x48000400
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800109c:	b10a      	cbz	r2, 80010a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109e:	6181      	str	r1, [r0, #24]
 80010a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a2:	6281      	str	r1, [r0, #40]	; 0x28
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a8:	6803      	ldr	r3, [r0, #0]
{
 80010aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	07df      	lsls	r7, r3, #31
{
 80010b0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	d411      	bmi.n	80010d8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	079e      	lsls	r6, r3, #30
 80010b8:	f100 808b 	bmi.w	80011d2 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	071c      	lsls	r4, r3, #28
 80010c0:	f100 80fe 	bmi.w	80012c0 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	0758      	lsls	r0, r3, #29
 80010c8:	f100 8147 	bmi.w	800135a <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010cc:	69aa      	ldr	r2, [r5, #24]
 80010ce:	2a00      	cmp	r2, #0
 80010d0:	f040 81dd 	bne.w	800148e <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010d4:	2000      	movs	r0, #0
 80010d6:	e024      	b.n	8001122 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010d8:	4cbd      	ldr	r4, [pc, #756]	; (80013d0 <HAL_RCC_OscConfig+0x328>)
 80010da:	6863      	ldr	r3, [r4, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d00a      	beq.n	80010fa <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d11c      	bne.n	8001128 <HAL_RCC_OscConfig+0x80>
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f8:	d116      	bne.n	8001128 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fe:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001102:	6821      	ldr	r1, [r4, #0]
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	2201      	movs	r2, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	420b      	tst	r3, r1
 8001118:	d0cc      	beq.n	80010b4 <HAL_RCC_OscConfig+0xc>
 800111a:	686b      	ldr	r3, [r5, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1c9      	bne.n	80010b4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001120:	2001      	movs	r0, #1
}
 8001122:	b002      	add	sp, #8
 8001124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001128:	686b      	ldr	r3, [r5, #4]
 800112a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112e:	d11e      	bne.n	800116e <HAL_RCC_OscConfig+0xc6>
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001136:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001138:	f7ff f8d0 	bl	80002dc <HAL_GetTick>
 800113c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001140:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	2701      	movs	r7, #1
 8001144:	fa96 f3a6 	rbit	r3, r6
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	fa96 f3a6 	rbit	r3, r6
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	fa07 f303 	lsl.w	r3, r7, r3
 800115a:	4213      	tst	r3, r2
 800115c:	d1aa      	bne.n	80010b4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115e:	f7ff f8bd 	bl	80002dc <HAL_GetTick>
 8001162:	eba0 0008 	sub.w	r0, r0, r8
 8001166:	2864      	cmp	r0, #100	; 0x64
 8001168:	d9ec      	bls.n	8001144 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 800116a:	2003      	movs	r0, #3
 800116c:	e7d9      	b.n	8001122 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116e:	bb0b      	cbnz	r3, 80011b4 <HAL_RCC_OscConfig+0x10c>
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001176:	6023      	str	r3, [r4, #0]
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001180:	f7ff f8ac 	bl	80002dc <HAL_GetTick>
 8001184:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001188:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	2701      	movs	r7, #1
 800118c:	fa96 f3a6 	rbit	r3, r6
 8001190:	6822      	ldr	r2, [r4, #0]
 8001192:	fa96 f3a6 	rbit	r3, r6
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	fa07 f303 	lsl.w	r3, r7, r3
 80011a2:	4213      	tst	r3, r2
 80011a4:	d086      	beq.n	80010b4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a6:	f7ff f899 	bl	80002dc <HAL_GetTick>
 80011aa:	eba0 0008 	sub.w	r0, r0, r8
 80011ae:	2864      	cmp	r0, #100	; 0x64
 80011b0:	d9ec      	bls.n	800118c <HAL_RCC_OscConfig+0xe4>
 80011b2:	e7da      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	d103      	bne.n	80011c4 <HAL_RCC_OscConfig+0x11c>
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6023      	str	r3, [r4, #0]
 80011c2:	e7b5      	b.n	8001130 <HAL_RCC_OscConfig+0x88>
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d0:	e7b1      	b.n	8001136 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011d2:	4c7f      	ldr	r4, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x328>)
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	f013 0f0c 	tst.w	r3, #12
 80011da:	d00a      	beq.n	80011f2 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d124      	bne.n	8001230 <HAL_RCC_OscConfig+0x188>
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f0:	d11e      	bne.n	8001230 <HAL_RCC_OscConfig+0x188>
 80011f2:	2302      	movs	r3, #2
 80011f4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f8:	6821      	ldr	r1, [r4, #0]
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2201      	movs	r2, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	420b      	tst	r3, r1
 800120e:	d002      	beq.n	8001216 <HAL_RCC_OscConfig+0x16e>
 8001210:	68eb      	ldr	r3, [r5, #12]
 8001212:	4293      	cmp	r3, r2
 8001214:	d184      	bne.n	8001120 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	6821      	ldr	r1, [r4, #0]
 8001218:	23f8      	movs	r3, #248	; 0xf8
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	fab3 f283 	clz	r2, r3
 8001222:	692b      	ldr	r3, [r5, #16]
 8001224:	4093      	lsls	r3, r2
 8001226:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800122a:	4313      	orrs	r3, r2
 800122c:	6023      	str	r3, [r4, #0]
 800122e:	e745      	b.n	80010bc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001230:	68ea      	ldr	r2, [r5, #12]
 8001232:	2601      	movs	r6, #1
 8001234:	b30a      	cbz	r2, 800127a <HAL_RCC_OscConfig+0x1d2>
 8001236:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001242:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	2702      	movs	r7, #2
 800124a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800124c:	f7ff f846 	bl	80002dc <HAL_GetTick>
 8001250:	4680      	mov	r8, r0
 8001252:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001256:	6822      	ldr	r2, [r4, #0]
 8001258:	fa97 f3a7 	rbit	r3, r7
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa06 f303 	lsl.w	r3, r6, r3
 8001268:	4213      	tst	r3, r2
 800126a:	d1d4      	bne.n	8001216 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff f836 	bl	80002dc <HAL_GetTick>
 8001270:	eba0 0008 	sub.w	r0, r0, r8
 8001274:	2802      	cmp	r0, #2
 8001276:	d9ec      	bls.n	8001252 <HAL_RCC_OscConfig+0x1aa>
 8001278:	e777      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
 800127a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001286:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	2702      	movs	r7, #2
 800128e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001290:	f7ff f824 	bl	80002dc <HAL_GetTick>
 8001294:	4680      	mov	r8, r0
 8001296:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	6822      	ldr	r2, [r4, #0]
 800129c:	fa97 f3a7 	rbit	r3, r7
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	fa06 f303 	lsl.w	r3, r6, r3
 80012ac:	4213      	tst	r3, r2
 80012ae:	f43f af05 	beq.w	80010bc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff f813 	bl	80002dc <HAL_GetTick>
 80012b6:	eba0 0008 	sub.w	r0, r0, r8
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9eb      	bls.n	8001296 <HAL_RCC_OscConfig+0x1ee>
 80012be:	e754      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c0:	696a      	ldr	r2, [r5, #20]
 80012c2:	4e43      	ldr	r6, [pc, #268]	; (80013d0 <HAL_RCC_OscConfig+0x328>)
 80012c4:	4943      	ldr	r1, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	2401      	movs	r4, #1
 80012c8:	b31a      	cbz	r2, 8001312 <HAL_RCC_OscConfig+0x26a>
 80012ca:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	440b      	add	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	2702      	movs	r7, #2
 80012d8:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80012da:	f7fe ffff 	bl	80002dc <HAL_GetTick>
 80012de:	4680      	mov	r8, r0
 80012e0:	fa97 f3a7 	rbit	r3, r7
 80012e4:	fa97 f3a7 	rbit	r3, r7
 80012e8:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ec:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80012ee:	fa97 f3a7 	rbit	r3, r7
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	fa04 f303 	lsl.w	r3, r4, r3
 80012fe:	4213      	tst	r3, r2
 8001300:	f47f aee0 	bne.w	80010c4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7fe ffea 	bl	80002dc <HAL_GetTick>
 8001308:	eba0 0008 	sub.w	r0, r0, r8
 800130c:	2802      	cmp	r0, #2
 800130e:	d9e7      	bls.n	80012e0 <HAL_RCC_OscConfig+0x238>
 8001310:	e72b      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
 8001312:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	440b      	add	r3, r1
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	2702      	movs	r7, #2
 8001320:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001322:	f7fe ffdb 	bl	80002dc <HAL_GetTick>
 8001326:	4680      	mov	r8, r0
 8001328:	fa97 f3a7 	rbit	r3, r7
 800132c:	fa97 f3a7 	rbit	r3, r7
 8001330:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001336:	fa97 f3a7 	rbit	r3, r7
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	fa04 f303 	lsl.w	r3, r4, r3
 8001346:	4213      	tst	r3, r2
 8001348:	f43f aebc 	beq.w	80010c4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7fe ffc6 	bl	80002dc <HAL_GetTick>
 8001350:	eba0 0008 	sub.w	r0, r0, r8
 8001354:	2802      	cmp	r0, #2
 8001356:	d9e7      	bls.n	8001328 <HAL_RCC_OscConfig+0x280>
 8001358:	e707      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4c1d      	ldr	r4, [pc, #116]	; (80013d0 <HAL_RCC_OscConfig+0x328>)
 800135c:	69e3      	ldr	r3, [r4, #28]
 800135e:	00d9      	lsls	r1, r3, #3
 8001360:	d434      	bmi.n	80013cc <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	69e3      	ldr	r3, [r4, #28]
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61e3      	str	r3, [r4, #28]
 800136a:	69e3      	ldr	r3, [r4, #28]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001374:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	4f18      	ldr	r7, [pc, #96]	; (80013d8 <HAL_RCC_OscConfig+0x330>)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	05da      	lsls	r2, r3, #23
 800137c:	d52e      	bpl.n	80013dc <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137e:	68ab      	ldr	r3, [r5, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d13c      	bne.n	80013fe <HAL_RCC_OscConfig+0x356>
 8001384:	6a23      	ldr	r3, [r4, #32]
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800138c:	f7fe ffa6 	bl	80002dc <HAL_GetTick>
 8001390:	2702      	movs	r7, #2
 8001392:	4682      	mov	sl, r0
 8001394:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	f04f 0801 	mov.w	r8, #1
 800139a:	fa97 f3a7 	rbit	r3, r7
 800139e:	fa97 f3a7 	rbit	r3, r7
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d06b      	beq.n	800147e <HAL_RCC_OscConfig+0x3d6>
 80013a6:	6a22      	ldr	r2, [r4, #32]
 80013a8:	fa99 f3a9 	rbit	r3, r9
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	fa08 f303 	lsl.w	r3, r8, r3
 80013b8:	4213      	tst	r3, r2
 80013ba:	d057      	beq.n	800146c <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 80013bc:	2e00      	cmp	r6, #0
 80013be:	f43f ae85 	beq.w	80010cc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	69e3      	ldr	r3, [r4, #28]
 80013c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61e3      	str	r3, [r4, #28]
 80013ca:	e67f      	b.n	80010cc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80013cc:	2600      	movs	r6, #0
 80013ce:	e7d2      	b.n	8001376 <HAL_RCC_OscConfig+0x2ce>
 80013d0:	40021000 	.word	0x40021000
 80013d4:	10908120 	.word	0x10908120
 80013d8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80013e4:	f7fe ff7a 	bl	80002dc <HAL_GetTick>
 80013e8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	d4c6      	bmi.n	800137e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f0:	f7fe ff74 	bl	80002dc <HAL_GetTick>
 80013f4:	eba0 0008 	sub.w	r0, r0, r8
 80013f8:	2864      	cmp	r0, #100	; 0x64
 80013fa:	d9f6      	bls.n	80013ea <HAL_RCC_OscConfig+0x342>
 80013fc:	e6b5      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fe:	bb3b      	cbnz	r3, 8001450 <HAL_RCC_OscConfig+0x3a8>
 8001400:	6a23      	ldr	r3, [r4, #32]
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6223      	str	r3, [r4, #32]
 8001408:	6a23      	ldr	r3, [r4, #32]
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001410:	f7fe ff64 	bl	80002dc <HAL_GetTick>
 8001414:	2702      	movs	r7, #2
 8001416:	4682      	mov	sl, r0
 8001418:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	f04f 0801 	mov.w	r8, #1
 800141e:	fa97 f3a7 	rbit	r3, r7
 8001422:	fa97 f3a7 	rbit	r3, r7
 8001426:	b373      	cbz	r3, 8001486 <HAL_RCC_OscConfig+0x3de>
 8001428:	6a22      	ldr	r2, [r4, #32]
 800142a:	fa99 f3a9 	rbit	r3, r9
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	fa08 f303 	lsl.w	r3, r8, r3
 800143a:	4213      	tst	r3, r2
 800143c:	d0be      	beq.n	80013bc <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7fe ff4d 	bl	80002dc <HAL_GetTick>
 8001442:	f241 3388 	movw	r3, #5000	; 0x1388
 8001446:	eba0 000a 	sub.w	r0, r0, sl
 800144a:	4298      	cmp	r0, r3
 800144c:	d9e7      	bls.n	800141e <HAL_RCC_OscConfig+0x376>
 800144e:	e68c      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001450:	2b05      	cmp	r3, #5
 8001452:	6a23      	ldr	r3, [r4, #32]
 8001454:	d103      	bne.n	800145e <HAL_RCC_OscConfig+0x3b6>
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6223      	str	r3, [r4, #32]
 800145c:	e792      	b.n	8001384 <HAL_RCC_OscConfig+0x2dc>
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6223      	str	r3, [r4, #32]
 8001464:	6a23      	ldr	r3, [r4, #32]
 8001466:	f023 0304 	bic.w	r3, r3, #4
 800146a:	e78e      	b.n	800138a <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7fe ff36 	bl	80002dc <HAL_GetTick>
 8001470:	f241 3388 	movw	r3, #5000	; 0x1388
 8001474:	eba0 000a 	sub.w	r0, r0, sl
 8001478:	4298      	cmp	r0, r3
 800147a:	d98e      	bls.n	800139a <HAL_RCC_OscConfig+0x2f2>
 800147c:	e675      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
 800147e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001484:	e790      	b.n	80013a8 <HAL_RCC_OscConfig+0x300>
 8001486:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800148c:	e7cd      	b.n	800142a <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800148e:	4c44      	ldr	r4, [pc, #272]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	f43f ae42 	beq.w	8001120 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149c:	2a02      	cmp	r2, #2
 800149e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a2:	d158      	bne.n	8001556 <HAL_RCC_OscConfig+0x4ae>
 80014a4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80014a8:	fab3 f383 	clz	r3, r3
 80014ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014ba:	f7fe ff0f 	bl	80002dc <HAL_GetTick>
 80014be:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80014c2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	2601      	movs	r6, #1
 80014c6:	fa97 f3a7 	rbit	r3, r7
 80014ca:	6822      	ldr	r2, [r4, #0]
 80014cc:	fa97 f3a7 	rbit	r3, r7
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	fa06 f303 	lsl.w	r3, r6, r3
 80014dc:	4213      	tst	r3, r2
 80014de:	d133      	bne.n	8001548 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80014e4:	f023 030f 	bic.w	r3, r3, #15
 80014e8:	4313      	orrs	r3, r2
 80014ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014ec:	6862      	ldr	r2, [r4, #4]
 80014ee:	6a2b      	ldr	r3, [r5, #32]
 80014f0:	69e9      	ldr	r1, [r5, #28]
 80014f2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80014f6:	430b      	orrs	r3, r1
 80014f8:	4313      	orrs	r3, r2
 80014fa:	6063      	str	r3, [r4, #4]
 80014fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001500:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001516:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001518:	f7fe fee0 	bl	80002dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800151e:	4607      	mov	r7, r0
 8001520:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	fa95 f3a5 	rbit	r3, r5
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	fa06 f303 	lsl.w	r3, r6, r3
 8001536:	4213      	tst	r3, r2
 8001538:	f47f adcc 	bne.w	80010d4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7fe fece 	bl	80002dc <HAL_GetTick>
 8001540:	1bc0      	subs	r0, r0, r7
 8001542:	2802      	cmp	r0, #2
 8001544:	d9ec      	bls.n	8001520 <HAL_RCC_OscConfig+0x478>
 8001546:	e610      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7fe fec8 	bl	80002dc <HAL_GetTick>
 800154c:	eba0 0008 	sub.w	r0, r0, r8
 8001550:	2802      	cmp	r0, #2
 8001552:	d9b8      	bls.n	80014c6 <HAL_RCC_OscConfig+0x41e>
 8001554:	e609      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
 8001556:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001562:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156c:	f7fe feb6 	bl	80002dc <HAL_GetTick>
 8001570:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001574:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001576:	2601      	movs	r6, #1
 8001578:	fa95 f3a5 	rbit	r3, r5
 800157c:	6822      	ldr	r2, [r4, #0]
 800157e:	fa95 f3a5 	rbit	r3, r5
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	fa06 f303 	lsl.w	r3, r6, r3
 800158e:	4213      	tst	r3, r2
 8001590:	f43f ada0 	beq.w	80010d4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7fe fea2 	bl	80002dc <HAL_GetTick>
 8001598:	1bc0      	subs	r0, r0, r7
 800159a:	2802      	cmp	r0, #2
 800159c:	d9ec      	bls.n	8001578 <HAL_RCC_OscConfig+0x4d0>
 800159e:	e5e4      	b.n	800116a <HAL_RCC_OscConfig+0xc2>
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80015a4:	4911      	ldr	r1, [pc, #68]	; (80015ec <HAL_RCC_GetSysClockFreq+0x48>)
 80015a6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015a8:	f003 020c 	and.w	r2, r3, #12
 80015ac:	2a08      	cmp	r2, #8
 80015ae:	d11a      	bne.n	80015e6 <HAL_RCC_GetSysClockFreq+0x42>
 80015b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80015b4:	fa92 f2a2 	rbit	r2, r2
 80015b8:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015ba:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80015c0:	fa90 f0a0 	rbit	r0, r0
 80015c4:	fab0 f080 	clz	r0, r0
 80015c8:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015d0:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015d2:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80015d6:	4807      	ldr	r0, [pc, #28]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80015d8:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80015dc:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80015e0:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80015e2:	4348      	muls	r0, r1
 80015e4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08002ba0 	.word	0x08002ba0
 80015f4:	08002bb0 	.word	0x08002bb0
 80015f8:	007a1200 	.word	0x007a1200

080015fc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015fc:	4a5c      	ldr	r2, [pc, #368]	; (8001770 <HAL_RCC_ClockConfig+0x174>)
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	428b      	cmp	r3, r1
{
 8001606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	4606      	mov	r6, r0
 800160c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800160e:	d330      	bcc.n	8001672 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001610:	6832      	ldr	r2, [r6, #0]
 8001612:	0791      	lsls	r1, r2, #30
 8001614:	d43a      	bmi.n	800168c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	07d2      	lsls	r2, r2, #31
 8001618:	d440      	bmi.n	800169c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800161a:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_RCC_ClockConfig+0x174>)
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	429d      	cmp	r5, r3
 8001624:	f0c0 8092 	bcc.w	800174c <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	6832      	ldr	r2, [r6, #0]
 800162a:	4c52      	ldr	r4, [pc, #328]	; (8001774 <HAL_RCC_ClockConfig+0x178>)
 800162c:	f012 0f04 	tst.w	r2, #4
 8001630:	f040 8097 	bne.w	8001762 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	0713      	lsls	r3, r2, #28
 8001636:	d506      	bpl.n	8001646 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001638:	6863      	ldr	r3, [r4, #4]
 800163a:	6932      	ldr	r2, [r6, #16]
 800163c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001640:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001644:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001646:	f7ff ffad 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	22f0      	movs	r2, #240	; 0xf0
 800164e:	fa92 f2a2 	rbit	r2, r2
 8001652:	fab2 f282 	clz	r2, r2
 8001656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800165a:	40d3      	lsrs	r3, r2
 800165c:	4a46      	ldr	r2, [pc, #280]	; (8001778 <HAL_RCC_ClockConfig+0x17c>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d8      	lsrs	r0, r3
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <HAL_RCC_ClockConfig+0x180>)
 8001664:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f7fe fe0a 	bl	8000280 <HAL_InitTick>
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
}
 800166e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	f023 0307 	bic.w	r3, r3, #7
 8001678:	430b      	orrs	r3, r1
 800167a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800167c:	6813      	ldr	r3, [r2, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	4299      	cmp	r1, r3
 8001684:	d0c4      	beq.n	8001610 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001686:	2001      	movs	r0, #1
 8001688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4939      	ldr	r1, [pc, #228]	; (8001774 <HAL_RCC_ClockConfig+0x178>)
 800168e:	68b0      	ldr	r0, [r6, #8]
 8001690:	684b      	ldr	r3, [r1, #4]
 8001692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001696:	4303      	orrs	r3, r0
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e7bc      	b.n	8001616 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169c:	6872      	ldr	r2, [r6, #4]
 800169e:	4c35      	ldr	r4, [pc, #212]	; (8001774 <HAL_RCC_ClockConfig+0x178>)
 80016a0:	2a01      	cmp	r2, #1
 80016a2:	d128      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xfa>
 80016a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ac:	6821      	ldr	r1, [r4, #0]
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	d0e1      	beq.n	8001686 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	6863      	ldr	r3, [r4, #4]
 80016c4:	f023 0303 	bic.w	r3, r3, #3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80016cc:	f7fe fe06 	bl	80002dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d0:	6873      	ldr	r3, [r6, #4]
 80016d2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80016d4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	d11f      	bne.n	800171c <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d099      	beq.n	800161a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e6:	f7fe fdf9 	bl	80002dc <HAL_GetTick>
 80016ea:	1bc0      	subs	r0, r0, r7
 80016ec:	4540      	cmp	r0, r8
 80016ee:	d9f5      	bls.n	80016dc <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f6:	2a02      	cmp	r2, #2
 80016f8:	bf0c      	ite	eq
 80016fa:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80016fe:	2302      	movne	r3, #2
 8001700:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4203      	tst	r3, r0
 800171a:	e7d1      	b.n	80016c0 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171c:	2b02      	cmp	r3, #2
 800171e:	d110      	bne.n	8001742 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	6863      	ldr	r3, [r4, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b08      	cmp	r3, #8
 8001728:	f43f af77 	beq.w	800161a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7fe fdd6 	bl	80002dc <HAL_GetTick>
 8001730:	1bc0      	subs	r0, r0, r7
 8001732:	4540      	cmp	r0, r8
 8001734:	d9f4      	bls.n	8001720 <HAL_RCC_ClockConfig+0x124>
 8001736:	e7db      	b.n	80016f0 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7fe fdd0 	bl	80002dc <HAL_GetTick>
 800173c:	1bc0      	subs	r0, r0, r7
 800173e:	4540      	cmp	r0, r8
 8001740:	d8d6      	bhi.n	80016f0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	f013 0f0c 	tst.w	r3, #12
 8001748:	d1f6      	bne.n	8001738 <HAL_RCC_ClockConfig+0x13c>
 800174a:	e766      	b.n	800161a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f023 0307 	bic.w	r3, r3, #7
 8001752:	432b      	orrs	r3, r5
 8001754:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	429d      	cmp	r5, r3
 800175e:	d192      	bne.n	8001686 <HAL_RCC_ClockConfig+0x8a>
 8001760:	e762      	b.n	8001628 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001762:	6863      	ldr	r3, [r4, #4]
 8001764:	68f1      	ldr	r1, [r6, #12]
 8001766:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800176a:	430b      	orrs	r3, r1
 800176c:	6063      	str	r3, [r4, #4]
 800176e:	e761      	b.n	8001634 <HAL_RCC_ClockConfig+0x38>
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	08002bce 	.word	0x08002bce
 800177c:	20000000 	.word	0x20000000

08001780 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001780:	4b01      	ldr	r3, [pc, #4]	; (8001788 <HAL_RCC_GetHCLKFreq+0x8>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000000 	.word	0x20000000

0800178c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800178e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	fa92 f2a2 	rbit	r2, r2
 8001798:	fab2 f282 	clz	r2, r2
 800179c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a0:	40d3      	lsrs	r3, r2
 80017a2:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80017a8:	6810      	ldr	r0, [r2, #0]
}    
 80017aa:	40d8      	lsrs	r0, r3
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	08002bde 	.word	0x08002bde
 80017b8:	20000000 	.word	0x20000000

080017bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	fa92 f2a2 	rbit	r2, r2
 80017c8:	fab2 f282 	clz	r2, r2
 80017cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017d0:	40d3      	lsrs	r3, r2
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80017d8:	6810      	ldr	r0, [r2, #0]
} 
 80017da:	40d8      	lsrs	r0, r3
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08002bde 	.word	0x08002bde
 80017e8:	20000000 	.word	0x20000000

080017ec <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017ec:	6803      	ldr	r3, [r0, #0]
{
 80017ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017f2:	03df      	lsls	r7, r3, #15
{
 80017f4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017f6:	d523      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f8:	4d9b      	ldr	r5, [pc, #620]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017fa:	69eb      	ldr	r3, [r5, #28]
 80017fc:	00de      	lsls	r6, r3, #3
 80017fe:	f100 80d7 	bmi.w	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	69eb      	ldr	r3, [r5, #28]
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61eb      	str	r3, [r5, #28]
 800180a:	69eb      	ldr	r3, [r5, #28]
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001814:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4f95      	ldr	r7, [pc, #596]	; (8001a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	05d8      	lsls	r0, r3, #23
 800181c:	f140 80ca 	bpl.w	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001820:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001822:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001826:	f040 80da 	bne.w	80019de <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800182a:	6a2b      	ldr	r3, [r5, #32]
 800182c:	6862      	ldr	r2, [r4, #4]
 800182e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001832:	4313      	orrs	r3, r2
 8001834:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001836:	b11e      	cbz	r6, 8001840 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	69eb      	ldr	r3, [r5, #28]
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001840:	6820      	ldr	r0, [r4, #0]
 8001842:	07c3      	lsls	r3, r0, #31
 8001844:	d506      	bpl.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001846:	4a88      	ldr	r2, [pc, #544]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001848:	68a1      	ldr	r1, [r4, #8]
 800184a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	430b      	orrs	r3, r1
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001854:	0787      	lsls	r7, r0, #30
 8001856:	d506      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001858:	4a83      	ldr	r2, [pc, #524]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800185a:	68e1      	ldr	r1, [r4, #12]
 800185c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800185e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001862:	430b      	orrs	r3, r1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001866:	0746      	lsls	r6, r0, #29
 8001868:	d506      	bpl.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800186a:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800186c:	6921      	ldr	r1, [r4, #16]
 800186e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001870:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001874:	430b      	orrs	r3, r1
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001878:	0685      	lsls	r5, r0, #26
 800187a:	d506      	bpl.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800187c:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800187e:	69e1      	ldr	r1, [r4, #28]
 8001880:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001882:	f023 0310 	bic.w	r3, r3, #16
 8001886:	430b      	orrs	r3, r1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800188a:	0381      	lsls	r1, r0, #14
 800188c:	d506      	bpl.n	800189c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001890:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001892:	6853      	ldr	r3, [r2, #4]
 8001894:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001898:	430b      	orrs	r3, r1
 800189a:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800189c:	0642      	lsls	r2, r0, #25
 800189e:	d506      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80018a0:	4a71      	ldr	r2, [pc, #452]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018a2:	6a21      	ldr	r1, [r4, #32]
 80018a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018a6:	f023 0320 	bic.w	r3, r3, #32
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018ae:	0343      	lsls	r3, r0, #13
 80018b0:	d506      	bpl.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018b2:	4a6d      	ldr	r2, [pc, #436]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018bc:	430b      	orrs	r3, r1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018c0:	0707      	lsls	r7, r0, #28
 80018c2:	d506      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018c4:	4a68      	ldr	r2, [pc, #416]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018c6:	6961      	ldr	r1, [r4, #20]
 80018c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018ca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80018ce:	430b      	orrs	r3, r1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80018d2:	06c6      	lsls	r6, r0, #27
 80018d4:	d506      	bpl.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80018d6:	4a64      	ldr	r2, [pc, #400]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018d8:	69a1      	ldr	r1, [r4, #24]
 80018da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80018e4:	0585      	lsls	r5, r0, #22
 80018e6:	d506      	bpl.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80018e8:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018ec:	6853      	ldr	r3, [r2, #4]
 80018ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018f2:	430b      	orrs	r3, r1
 80018f4:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80018f6:	0601      	lsls	r1, r0, #24
 80018f8:	d506      	bpl.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80018fa:	4a5b      	ldr	r2, [pc, #364]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80018fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80018fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001900:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001904:	430b      	orrs	r3, r1
 8001906:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001908:	05c2      	lsls	r2, r0, #23
 800190a:	d506      	bpl.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800190c:	4a56      	ldr	r2, [pc, #344]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800190e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001910:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001912:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001916:	430b      	orrs	r3, r1
 8001918:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800191a:	04c3      	lsls	r3, r0, #19
 800191c:	d506      	bpl.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800191e:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001922:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001928:	430b      	orrs	r3, r1
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800192c:	0487      	lsls	r7, r0, #18
 800192e:	d506      	bpl.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001932:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001934:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001936:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800193a:	430b      	orrs	r3, r1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800193e:	02c6      	lsls	r6, r0, #11
 8001940:	d506      	bpl.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001944:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001946:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	430b      	orrs	r3, r1
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001950:	0285      	lsls	r5, r0, #10
 8001952:	d506      	bpl.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001956:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001958:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800195a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800195e:	430b      	orrs	r3, r1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001962:	0241      	lsls	r1, r0, #9
 8001964:	d506      	bpl.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001966:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001968:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800196a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800196c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001970:	430b      	orrs	r3, r1
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001974:	0202      	lsls	r2, r0, #8
 8001976:	d506      	bpl.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800197a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800197c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800197e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001982:	430b      	orrs	r3, r1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001986:	01c3      	lsls	r3, r0, #7
 8001988:	d506      	bpl.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800198a:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800198c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800198e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001994:	430b      	orrs	r3, r1
 8001996:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001998:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800199c:	d01c      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80019a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80019a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80019a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80019ac:	2000      	movs	r0, #0
 80019ae:	e013      	b.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80019b0:	2600      	movs	r6, #0
 80019b2:	e730      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80019bc:	f7fe fc8e 	bl	80002dc <HAL_GetTick>
 80019c0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	05d9      	lsls	r1, r3, #23
 80019c6:	f53f af2b 	bmi.w	8001820 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7fe fc87 	bl	80002dc <HAL_GetTick>
 80019ce:	eba0 0008 	sub.w	r0, r0, r8
 80019d2:	2864      	cmp	r0, #100	; 0x64
 80019d4:	d9f5      	bls.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
}
 80019d8:	b002      	add	sp, #8
 80019da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019de:	6862      	ldr	r2, [r4, #4]
 80019e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019e4:	4293      	cmp	r3, r2
 80019e6:	f43f af20 	beq.w	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019ea:	6a29      	ldr	r1, [r5, #32]
 80019ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80019f4:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80019f8:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001a70 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80019fc:	fab2 f282 	clz	r2, r2
 8001a00:	4472      	add	r2, lr
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	2701      	movs	r7, #1
 8001a06:	6017      	str	r7, [r2, #0]
 8001a08:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	4473      	add	r3, lr
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a18:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001a1a:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a1c:	f57f af05 	bpl.w	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001a20:	f7fe fc5c 	bl	80002dc <HAL_GetTick>
 8001a24:	f04f 0802 	mov.w	r8, #2
 8001a28:	4682      	mov	sl, r0
 8001a2a:	46c1      	mov	r9, r8
 8001a2c:	fa98 f3a8 	rbit	r3, r8
 8001a30:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	b1a3      	cbz	r3, 8001a60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001a36:	6a2a      	ldr	r2, [r5, #32]
 8001a38:	fa99 f3a9 	rbit	r3, r9
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	fa07 f303 	lsl.w	r3, r7, r3
 8001a48:	4213      	tst	r3, r2
 8001a4a:	f47f aeee 	bne.w	800182a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7fe fc45 	bl	80002dc <HAL_GetTick>
 8001a52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a56:	eba0 000a 	sub.w	r0, r0, sl
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	d9e6      	bls.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001a5e:	e7ba      	b.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001a60:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a66:	e7e7      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	10908100 	.word	0x10908100

08001a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a78:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a7a:	6921      	ldr	r1, [r4, #16]
 8001a7c:	68a2      	ldr	r2, [r4, #8]
 8001a7e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a80:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a82:	430a      	orrs	r2, r1
 8001a84:	6961      	ldr	r1, [r4, #20]
 8001a86:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a88:	4977      	ldr	r1, [pc, #476]	; (8001c68 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a8a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a8c:	4001      	ands	r1, r0
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a92:	686a      	ldr	r2, [r5, #4]
 8001a94:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001a96:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001aa0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001aa2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001aa4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001aa8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001aae:	4a6f      	ldr	r2, [pc, #444]	; (8001c6c <UART_SetConfig+0x1f8>)
 8001ab0:	4295      	cmp	r5, r2
 8001ab2:	d112      	bne.n	8001ada <UART_SetConfig+0x66>
 8001ab4:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001ab8:	496d      	ldr	r1, [pc, #436]	; (8001c70 <UART_SetConfig+0x1fc>)
 8001aba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001abc:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac4:	5c8a      	ldrb	r2, [r1, r2]
 8001ac6:	d066      	beq.n	8001b96 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001ac8:	2a08      	cmp	r2, #8
 8001aca:	d819      	bhi.n	8001b00 <UART_SetConfig+0x8c>
 8001acc:	e8df f002 	tbb	[pc, r2]
 8001ad0:	189e92c2 	.word	0x189e92c2
 8001ad4:	181818a9 	.word	0x181818a9
 8001ad8:	ac          	.byte	0xac
 8001ad9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ada:	4a66      	ldr	r2, [pc, #408]	; (8001c74 <UART_SetConfig+0x200>)
 8001adc:	4295      	cmp	r5, r2
 8001ade:	d124      	bne.n	8001b2a <UART_SetConfig+0xb6>
 8001ae0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001ae4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ae6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001aea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001aee:	f000 80a0 	beq.w	8001c32 <UART_SetConfig+0x1be>
 8001af2:	d807      	bhi.n	8001b04 <UART_SetConfig+0x90>
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	f000 80aa 	beq.w	8001c4e <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afe:	d076      	beq.n	8001bee <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001b00:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001b02:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b04:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001b08:	f000 8099 	beq.w	8001c3e <UART_SetConfig+0x1ca>
 8001b0c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001b10:	d1f3      	bne.n	8001afa <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b16:	d179      	bne.n	8001c0c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b18:	6860      	ldr	r0, [r4, #4]
 8001b1a:	0843      	lsrs	r3, r0, #1
 8001b1c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001b20:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b24:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b28:	e054      	b.n	8001bd4 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b2a:	4a53      	ldr	r2, [pc, #332]	; (8001c78 <UART_SetConfig+0x204>)
 8001b2c:	4295      	cmp	r5, r2
 8001b2e:	d10e      	bne.n	8001b4e <UART_SetConfig+0xda>
 8001b30:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b36:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001b3a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001b3e:	d078      	beq.n	8001c32 <UART_SetConfig+0x1be>
 8001b40:	d9d8      	bls.n	8001af4 <UART_SetConfig+0x80>
 8001b42:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001b46:	d07a      	beq.n	8001c3e <UART_SetConfig+0x1ca>
 8001b48:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001b4c:	e7e0      	b.n	8001b10 <UART_SetConfig+0x9c>
 8001b4e:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <UART_SetConfig+0x208>)
 8001b50:	4295      	cmp	r5, r2
 8001b52:	d10e      	bne.n	8001b72 <UART_SetConfig+0xfe>
 8001b54:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001b58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b5a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8001b5e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001b62:	d066      	beq.n	8001c32 <UART_SetConfig+0x1be>
 8001b64:	d9c6      	bls.n	8001af4 <UART_SetConfig+0x80>
 8001b66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001b6a:	d068      	beq.n	8001c3e <UART_SetConfig+0x1ca>
 8001b6c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001b70:	e7ce      	b.n	8001b10 <UART_SetConfig+0x9c>
 8001b72:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <UART_SetConfig+0x20c>)
 8001b74:	4295      	cmp	r5, r2
 8001b76:	d1c0      	bne.n	8001afa <UART_SetConfig+0x86>
 8001b78:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b7e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001b82:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001b86:	d054      	beq.n	8001c32 <UART_SetConfig+0x1be>
 8001b88:	d9b4      	bls.n	8001af4 <UART_SetConfig+0x80>
 8001b8a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001b8e:	d056      	beq.n	8001c3e <UART_SetConfig+0x1ca>
 8001b90:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001b94:	e7bc      	b.n	8001b10 <UART_SetConfig+0x9c>
    switch (clocksource)
 8001b96:	2a08      	cmp	r2, #8
 8001b98:	d829      	bhi.n	8001bee <UART_SetConfig+0x17a>
 8001b9a:	a301      	add	r3, pc, #4	; (adr r3, 8001ba0 <UART_SetConfig+0x12c>)
 8001b9c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001ba0:	08001bc5 	.word	0x08001bc5
 8001ba4:	08001be9 	.word	0x08001be9
 8001ba8:	08001b19 	.word	0x08001b19
 8001bac:	08001bef 	.word	0x08001bef
 8001bb0:	08001c39 	.word	0x08001c39
 8001bb4:	08001bef 	.word	0x08001bef
 8001bb8:	08001bef 	.word	0x08001bef
 8001bbc:	08001bef 	.word	0x08001bef
 8001bc0:	08001c45 	.word	0x08001c45
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bc4:	f7ff fde2 	bl	800178c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001bc8:	6861      	ldr	r1, [r4, #4]
 8001bca:	084a      	lsrs	r2, r1, #1
 8001bcc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bd6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001bd8:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001bdc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bde:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60cb      	str	r3, [r1, #12]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001be8:	f7ff fde8 	bl	80017bc <HAL_RCC_GetPCLK2Freq>
 8001bec:	e7ec      	b.n	8001bc8 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e7f1      	b.n	8001bd8 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001bf4:	f7ff fde2 	bl	80017bc <HAL_RCC_GetPCLK2Freq>
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001bfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <UART_SetConfig+0x1f8>)
 8001c04:	b280      	uxth	r0, r0
 8001c06:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c08:	2000      	movs	r0, #0
        break;
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c0c:	6862      	ldr	r2, [r4, #4]
 8001c0e:	0853      	lsrs	r3, r2, #1
 8001c10:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001c14:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	60eb      	str	r3, [r5, #12]
 8001c20:	e7f2      	b.n	8001c08 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c22:	f7ff fcbf 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 8001c26:	e017      	b.n	8001c58 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c28:	6862      	ldr	r2, [r4, #4]
 8001c2a:	0853      	lsrs	r3, r2, #1
 8001c2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c30:	e7f2      	b.n	8001c18 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c36:	d1f4      	bne.n	8001c22 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c38:	f7ff fcb4 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 8001c3c:	e7c4      	b.n	8001bc8 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c42:	d1f1      	bne.n	8001c28 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c44:	6860      	ldr	r0, [r4, #4]
 8001c46:	0843      	lsrs	r3, r0, #1
 8001c48:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c4c:	e76a      	b.n	8001b24 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c52:	d0b7      	beq.n	8001bc4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c54:	f7ff fd9a 	bl	800178c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c58:	6863      	ldr	r3, [r4, #4]
 8001c5a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c62:	b280      	uxth	r0, r0
 8001c64:	60e8      	str	r0, [r5, #12]
 8001c66:	e7cf      	b.n	8001c08 <UART_SetConfig+0x194>
 8001c68:	efff69f3 	.word	0xefff69f3
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	08002bc0 	.word	0x08002bc0
 8001c74:	40004400 	.word	0x40004400
 8001c78:	40004800 	.word	0x40004800
 8001c7c:	40004c00 	.word	0x40004c00
 8001c80:	40005000 	.word	0x40005000

08001c84 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c86:	07da      	lsls	r2, r3, #31
{
 8001c88:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c8a:	d506      	bpl.n	8001c9a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c8c:	6801      	ldr	r1, [r0, #0]
 8001c8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c90:	684a      	ldr	r2, [r1, #4]
 8001c92:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c96:	4322      	orrs	r2, r4
 8001c98:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c9a:	079c      	lsls	r4, r3, #30
 8001c9c:	d506      	bpl.n	8001cac <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c9e:	6801      	ldr	r1, [r0, #0]
 8001ca0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001ca2:	684a      	ldr	r2, [r1, #4]
 8001ca4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ca8:	4322      	orrs	r2, r4
 8001caa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cac:	0759      	lsls	r1, r3, #29
 8001cae:	d506      	bpl.n	8001cbe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001cb0:	6801      	ldr	r1, [r0, #0]
 8001cb2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001cb4:	684a      	ldr	r2, [r1, #4]
 8001cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cba:	4322      	orrs	r2, r4
 8001cbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cbe:	071a      	lsls	r2, r3, #28
 8001cc0:	d506      	bpl.n	8001cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cc2:	6801      	ldr	r1, [r0, #0]
 8001cc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cc6:	684a      	ldr	r2, [r1, #4]
 8001cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ccc:	4322      	orrs	r2, r4
 8001cce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cd0:	06dc      	lsls	r4, r3, #27
 8001cd2:	d506      	bpl.n	8001ce2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cd4:	6801      	ldr	r1, [r0, #0]
 8001cd6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001cd8:	688a      	ldr	r2, [r1, #8]
 8001cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cde:	4322      	orrs	r2, r4
 8001ce0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ce2:	0699      	lsls	r1, r3, #26
 8001ce4:	d506      	bpl.n	8001cf4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ce6:	6801      	ldr	r1, [r0, #0]
 8001ce8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001cea:	688a      	ldr	r2, [r1, #8]
 8001cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cf0:	4322      	orrs	r2, r4
 8001cf2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cf4:	065a      	lsls	r2, r3, #25
 8001cf6:	d50f      	bpl.n	8001d18 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cf8:	6801      	ldr	r1, [r0, #0]
 8001cfa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001cfc:	684a      	ldr	r2, [r1, #4]
 8001cfe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d02:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d04:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d08:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d0a:	d105      	bne.n	8001d18 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d0c:	684a      	ldr	r2, [r1, #4]
 8001d0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d10:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d14:	4322      	orrs	r2, r4
 8001d16:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	d506      	bpl.n	8001d2a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d1c:	6802      	ldr	r2, [r0, #0]
 8001d1e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d20:	6853      	ldr	r3, [r2, #4]
 8001d22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d26:	430b      	orrs	r3, r1
 8001d28:	6053      	str	r3, [r2, #4]
 8001d2a:	bd10      	pop	{r4, pc}

08001d2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d30:	9d06      	ldr	r5, [sp, #24]
 8001d32:	4604      	mov	r4, r0
 8001d34:	460f      	mov	r7, r1
 8001d36:	4616      	mov	r6, r2
 8001d38:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d3a:	6821      	ldr	r1, [r4, #0]
 8001d3c:	69ca      	ldr	r2, [r1, #28]
 8001d3e:	ea37 0302 	bics.w	r3, r7, r2
 8001d42:	bf0c      	ite	eq
 8001d44:	2201      	moveq	r2, #1
 8001d46:	2200      	movne	r2, #0
 8001d48:	42b2      	cmp	r2, r6
 8001d4a:	d002      	beq.n	8001d52 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d4c:	2000      	movs	r0, #0
}
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001d52:	1c6b      	adds	r3, r5, #1
 8001d54:	d0f2      	beq.n	8001d3c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d56:	b99d      	cbnz	r5, 8001d80 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001d70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001d74:	2300      	movs	r3, #0
 8001d76:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d80:	f7fe faac 	bl	80002dc <HAL_GetTick>
 8001d84:	eba0 0008 	sub.w	r0, r0, r8
 8001d88:	4285      	cmp	r5, r0
 8001d8a:	d2d6      	bcs.n	8001d3a <UART_WaitOnFlagUntilTimeout+0xe>
 8001d8c:	e7e4      	b.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x2c>

08001d8e <HAL_UART_Transmit>:
{
 8001d8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d92:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001d94:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001d98:	2b20      	cmp	r3, #32
{
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	460d      	mov	r5, r1
 8001d9e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001da0:	d14c      	bne.n	8001e3c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d048      	beq.n	8001e38 <HAL_UART_Transmit+0xaa>
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d046      	beq.n	8001e38 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001daa:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d044      	beq.n	8001e3c <HAL_UART_Transmit+0xae>
 8001db2:	2301      	movs	r3, #1
 8001db4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dbc:	2321      	movs	r3, #33	; 0x21
 8001dbe:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001dc2:	f7fe fa8b 	bl	80002dc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001dc6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001dca:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001dcc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001dd0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	b962      	cbnz	r2, 8001df2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dd8:	9700      	str	r7, [sp, #0]
 8001dda:	4633      	mov	r3, r6
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ffa4 	bl	8001d2c <UART_WaitOnFlagUntilTimeout>
 8001de4:	b998      	cbnz	r0, 8001e0e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001de6:	2320      	movs	r3, #32
 8001de8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001dec:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001df0:	e00e      	b.n	8001e10 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001df2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e00:	2200      	movs	r2, #0
 8001e02:	4633      	mov	r3, r6
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff ff90 	bl	8001d2c <UART_WaitOnFlagUntilTimeout>
 8001e0c:	b118      	cbz	r0, 8001e16 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001e0e:	2003      	movs	r0, #3
}
 8001e10:	b002      	add	sp, #8
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e16:	68a3      	ldr	r3, [r4, #8]
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1e:	d107      	bne.n	8001e30 <HAL_UART_Transmit+0xa2>
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	b92b      	cbnz	r3, 8001e30 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001e24:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001e2e:	e7cf      	b.n	8001dd0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001e30:	782b      	ldrb	r3, [r5, #0]
 8001e32:	8513      	strh	r3, [r2, #40]	; 0x28
 8001e34:	3501      	adds	r5, #1
 8001e36:	e7cb      	b.n	8001dd0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e38:	2001      	movs	r0, #1
 8001e3a:	e7e9      	b.n	8001e10 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	e7e7      	b.n	8001e10 <HAL_UART_Transmit+0x82>

08001e40 <UART_CheckIdleState>:
{
 8001e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e42:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e44:	2600      	movs	r6, #0
 8001e46:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001e48:	f7fe fa48 	bl	80002dc <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001e52:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e54:	d417      	bmi.n	8001e86 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	075b      	lsls	r3, r3, #29
 8001e5c:	d50a      	bpl.n	8001e74 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	462b      	mov	r3, r5
 8001e68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff ff5d 	bl	8001d2c <UART_WaitOnFlagUntilTimeout>
 8001e72:	b9a0      	cbnz	r0, 8001e9e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001e74:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e76:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001e78:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001e7c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001e80:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001e84:	e00c      	b.n	8001ea0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4632      	mov	r2, r6
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff ff49 	bl	8001d2c <UART_WaitOnFlagUntilTimeout>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d0db      	beq.n	8001e56 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e9e:	2003      	movs	r0, #3
}
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}

08001ea4 <HAL_UART_Init>:
{
 8001ea4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	b360      	cbz	r0, 8001f04 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001eaa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001eae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eb2:	b91b      	cbnz	r3, 8001ebc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001eb4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001eb8:	f000 f984 	bl	80021c4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ebc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ebe:	2324      	movs	r3, #36	; 0x24
 8001ec0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001ec4:	6813      	ldr	r3, [r2, #0]
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff fdd1 	bl	8001a74 <UART_SetConfig>
 8001ed2:	2801      	cmp	r0, #1
 8001ed4:	d016      	beq.n	8001f04 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed8:	b113      	cbz	r3, 8001ee0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff fed2 	bl	8001c84 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ee8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ef0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001ef8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001efa:	601a      	str	r2, [r3, #0]
}
 8001efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001f00:	f7ff bf9e 	b.w	8001e40 <UART_CheckIdleState>
}
 8001f04:	2001      	movs	r0, #1
 8001f06:	bd10      	pop	{r4, pc}

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f10:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f12:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f18:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f1a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f1c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001f1e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f20:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f22:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001f24:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f26:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f28:	f7ff f8be 	bl	80010a8 <HAL_RCC_OscConfig>
 8001f2c:	4601      	mov	r1, r0
 8001f2e:	b100      	cbz	r0, 8001f32 <SystemClock_Config+0x2a>
 8001f30:	e7fe      	b.n	8001f30 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f32:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f34:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f36:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f38:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f3a:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f3c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f40:	f7ff fb5c 	bl	80015fc <HAL_RCC_ClockConfig>
 8001f44:	b100      	cbz	r0, 8001f48 <SystemClock_Config+0x40>
 8001f46:	e7fe      	b.n	8001f46 <SystemClock_Config+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34;
 8001f48:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001f4c:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f4e:	9013      	str	r0, [sp, #76]	; 0x4c
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f54:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001f56:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f58:	f7ff fc48 	bl	80017ec <HAL_RCCEx_PeriphCLKConfig>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	b100      	cbz	r0, 8001f62 <SystemClock_Config+0x5a>
 8001f60:	e7fe      	b.n	8001f60 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f62:	f7ff fc0d 	bl	8001780 <HAL_RCC_GetHCLKFreq>
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f6e:	f7fe ff9d 	bl	8000eac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f72:	2004      	movs	r0, #4
 8001f74:	f7fe ffb0 	bl	8000ed8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f78:	4622      	mov	r2, r4
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7fe ff60 	bl	8000e44 <HAL_NVIC_SetPriority>
}
 8001f84:	b026      	add	sp, #152	; 0x98
 8001f86:	bd10      	pop	{r4, pc}

08001f88 <main>:
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001f8c:	f7fe f98c 	bl	80002a8 <HAL_Init>
  SystemClock_Config();
 8001f90:	f7ff ffba 	bl	8001f08 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <main+0x15c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001f96:	4854      	ldr	r0, [pc, #336]	; (80020e8 <main+0x160>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001fa6:	9200      	str	r2, [sp, #0]
 8001fa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fb0:	615a      	str	r2, [r3, #20]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fc2:	615a      	str	r2, [r3, #20]
 8001fc4:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001fcc:	4611      	mov	r1, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001fd2:	f7ff f863 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fe0:	f7ff f85c 	bl	800109c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe4:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	a906      	add	r1, sp, #24
 8001fe8:	483f      	ldr	r0, [pc, #252]	; (80020e8 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fec:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ff2:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff4:	f7fe ff82 	bl	8000efc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ffe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f7fe ff79 	bl	8000efc <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800200a:	4838      	ldr	r0, [pc, #224]	; (80020ec <main+0x164>)
  huart2.Init.BaudRate = 115200;
 800200c:	4a38      	ldr	r2, [pc, #224]	; (80020f0 <main+0x168>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002010:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002014:	270c      	movs	r7, #12
  huart2.Init.BaudRate = 115200;
 8002016:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 800201a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201e:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002020:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002022:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002024:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002026:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002028:	f7ff ff3c 	bl	8001ea4 <HAL_UART_Init>
 800202c:	b100      	cbz	r0, 8002030 <main+0xa8>
 800202e:	e7fe      	b.n	800202e <main+0xa6>
  hadc3.Instance = ADC3;
 8002030:	4c30      	ldr	r4, [pc, #192]	; (80020f4 <main+0x16c>)
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <main+0x170>)
 8002034:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002036:	6060      	str	r0, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002038:	60a0      	str	r0, [r4, #8]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800203a:	6260      	str	r0, [r4, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800203c:	6320      	str	r0, [r4, #48]	; 0x30
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800203e:	60e0      	str	r0, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002040:	6360      	str	r0, [r4, #52]	; 0x34
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002042:	2304      	movs	r3, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002044:	61a0      	str	r0, [r4, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002046:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002048:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800204a:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800204c:	61e5      	str	r5, [r4, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800204e:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 2;
 8002050:	6226      	str	r6, [r4, #32]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002052:	6163      	str	r3, [r4, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002054:	f7fe fa14 	bl	8000480 <HAL_ADC_Init>
 8002058:	b100      	cbz	r0, 800205c <main+0xd4>
 800205a:	e7fe      	b.n	800205a <main+0xd2>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800205c:	a90c      	add	r1, sp, #48	; 0x30
 800205e:	f841 0d24 	str.w	r0, [r1, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8002062:	4620      	mov	r0, r4
 8002064:	f7fe fe4c 	bl	8000d00 <HAL_ADCEx_MultiModeConfigChannel>
 8002068:	b100      	cbz	r0, 800206c <main+0xe4>
 800206a:	e7fe      	b.n	800206a <main+0xe2>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800206c:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800206e:	9008      	str	r0, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002070:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8002072:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002074:	a906      	add	r1, sp, #24
 8002076:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 8002078:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800207a:	9507      	str	r5, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800207c:	f7fe fca8 	bl	80009d0 <HAL_ADC_ConfigChannel>
 8002080:	b100      	cbz	r0, 8002084 <main+0xfc>
 8002082:	e7fe      	b.n	8002082 <main+0xfa>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002084:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002086:	a906      	add	r1, sp, #24
 8002088:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800208a:	9306      	str	r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800208c:	9607      	str	r6, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800208e:	f7fe fc9f 	bl	80009d0 <HAL_ADC_ConfigChannel>
 8002092:	b100      	cbz	r0, 8002096 <main+0x10e>
 8002094:	e7fe      	b.n	8002094 <main+0x10c>
	  sprintf(tosend,"%d , %d\n\r",a,b);
 8002096:	4d19      	ldr	r5, [pc, #100]	; (80020fc <main+0x174>)
	  HAL_ADC_Start(&hadc3);
 8002098:	4620      	mov	r0, r4
 800209a:	f7fe fb25 	bl	80006e8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3,0xFFFF);
 800209e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7fe fbf0 	bl	8000888 <HAL_ADC_PollForConversion>
	  int a=HAL_ADC_GetValue(&hadc3);
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7fe fc8d 	bl	80009c8 <HAL_ADC_GetValue>
 80020ae:	4606      	mov	r6, r0
	  int b=HAL_ADC_GetValue(&hadc3);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7fe fc89 	bl	80009c8 <HAL_ADC_GetValue>
 80020b6:	4607      	mov	r7, r0
	  HAL_ADC_Stop(&hadc3);
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7fe fbc5 	bl	8000848 <HAL_ADC_Stop>
	  sprintf(tosend,"%d , %d\n\r",a,b);
 80020be:	463b      	mov	r3, r7
 80020c0:	4632      	mov	r2, r6
 80020c2:	4629      	mov	r1, r5
 80020c4:	a806      	add	r0, sp, #24
 80020c6:	f000 f933 	bl	8002330 <siprintf>
	  HAL_UART_Transmit(&huart2,tosend,sizeof(tosend),0xFFFF);
 80020ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ce:	2214      	movs	r2, #20
 80020d0:	a906      	add	r1, sp, #24
 80020d2:	4806      	ldr	r0, [pc, #24]	; (80020ec <main+0x164>)
 80020d4:	f7ff fe5b 	bl	8001d8e <HAL_UART_Transmit>
	  HAL_Delay(500);
 80020d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020dc:	f7fe f904 	bl	80002e8 <HAL_Delay>
 80020e0:	e7da      	b.n	8002098 <main+0x110>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000800 	.word	0x48000800
 80020ec:	200000e8 	.word	0x200000e8
 80020f0:	40004400 	.word	0x40004400
 80020f4:	20000094 	.word	0x20000094
 80020f8:	50000400 	.word	0x50000400
 80020fc:	08002bc4 	.word	0x08002bc4

08002100 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_MspInit+0x78>)
{
 8002102:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	f7fe fe82 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	4611      	mov	r1, r2
 8002120:	f06f 000b 	mvn.w	r0, #11
 8002124:	f7fe fe8e 	bl	8000e44 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	4611      	mov	r1, r2
 800212c:	f06f 000a 	mvn.w	r0, #10
 8002130:	f7fe fe88 	bl	8000e44 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	4611      	mov	r1, r2
 8002138:	f06f 0009 	mvn.w	r0, #9
 800213c:	f7fe fe82 	bl	8000e44 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	4611      	mov	r1, r2
 8002144:	f06f 0004 	mvn.w	r0, #4
 8002148:	f7fe fe7c 	bl	8000e44 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	4611      	mov	r1, r2
 8002150:	f06f 0003 	mvn.w	r0, #3
 8002154:	f7fe fe76 	bl	8000e44 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	4611      	mov	r1, r2
 800215c:	f06f 0001 	mvn.w	r0, #1
 8002160:	f7fe fe70 	bl	8000e44 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	4611      	mov	r1, r2
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7fe fe6a 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002170:	b003      	add	sp, #12
 8002172:	f85d fb04 	ldr.w	pc, [sp], #4
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800217c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 800217e:	6802      	ldr	r2, [r0, #0]
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_ADC_MspInit+0x40>)
 8002182:	429a      	cmp	r2, r3
 8002184:	d116      	bne.n	80021b4 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002186:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800218a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    PB0     ------> ADC3_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218e:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002190:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002194:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002198:	615a      	str	r2, [r3, #20]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021a4:	2301      	movs	r3, #1
 80021a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a8:	2303      	movs	r3, #3
 80021aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f7fe fea4 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021b4:	b007      	add	sp, #28
 80021b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ba:	bf00      	nop
 80021bc:	50000400 	.word	0x50000400
 80021c0:	48000400 	.word	0x48000400

080021c4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80021c6:	6802      	ldr	r2, [r0, #0]
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_UART_MspInit+0x44>)
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d119      	bne.n	8002202 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ce:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021da:	61da      	str	r2, [r3, #28]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021e6:	230c      	movs	r3, #12
 80021e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fa:	2307      	movs	r3, #7
 80021fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f7fe fe7d 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002202:	b007      	add	sp, #28
 8002204:	f85d fb04 	ldr.w	pc, [sp], #4
 8002208:	40004400 	.word	0x40004400

0800220c <NMI_Handler>:
 800220c:	4770      	bx	lr

0800220e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800220e:	e7fe      	b.n	800220e <HardFault_Handler>

08002210 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler>

08002212 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler>

08002214 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler>

08002216 <SVC_Handler>:
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:
 8002218:	4770      	bx	lr

0800221a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800221c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800221e:	f7fe f855 	bl	80002cc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002226:	f7fe be64 	b.w	8000ef2 <HAL_SYSTICK_IRQHandler>
	...

0800222c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4915      	ldr	r1, [pc, #84]	; (8002284 <SystemInit+0x58>)
 800222e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002232:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <SystemInit+0x5c>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002244:	6858      	ldr	r0, [r3, #4]
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <SystemInit+0x60>)
 8002248:	4002      	ands	r2, r0
 800224a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002256:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800225e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002266:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	f022 020f 	bic.w	r2, r2, #15
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002270:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002272:	4a07      	ldr	r2, [pc, #28]	; (8002290 <SystemInit+0x64>)
 8002274:	4002      	ands	r2, r0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800227c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002280:	608b      	str	r3, [r1, #8]
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	40021000 	.word	0x40021000
 800228c:	f87fc00c 	.word	0xf87fc00c
 8002290:	ff00fccc 	.word	0xff00fccc

08002294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002298:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800229a:	e003      	b.n	80022a4 <LoopCopyDataInit>

0800229c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800229e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022a2:	3104      	adds	r1, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022ac:	d3f6      	bcc.n	800229c <CopyDataInit>
	ldr	r2, =_sbss
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80022b0:	e002      	b.n	80022b8 <LoopFillZerobss>

080022b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022b4:	f842 3b04 	str.w	r3, [r2], #4

080022b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <LoopForever+0x16>)
	cmp	r2, r3
 80022ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022bc:	d3f9      	bcc.n	80022b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022be:	f7ff ffb5 	bl	800222c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c2:	f000 f811 	bl	80022e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022c6:	f7ff fe5f 	bl	8001f88 <main>

080022ca <LoopForever>:

LoopForever:
    b LoopForever
 80022ca:	e7fe      	b.n	80022ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022cc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80022d0:	08002c24 	.word	0x08002c24
	ldr	r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022d8:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80022dc:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80022e0:	2000015c 	.word	0x2000015c

080022e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC1_2_IRQHandler>
	...

080022e8 <__libc_init_array>:
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	4e0d      	ldr	r6, [pc, #52]	; (8002320 <__libc_init_array+0x38>)
 80022ec:	4c0d      	ldr	r4, [pc, #52]	; (8002324 <__libc_init_array+0x3c>)
 80022ee:	1ba4      	subs	r4, r4, r6
 80022f0:	10a4      	asrs	r4, r4, #2
 80022f2:	2500      	movs	r5, #0
 80022f4:	42a5      	cmp	r5, r4
 80022f6:	d109      	bne.n	800230c <__libc_init_array+0x24>
 80022f8:	4e0b      	ldr	r6, [pc, #44]	; (8002328 <__libc_init_array+0x40>)
 80022fa:	4c0c      	ldr	r4, [pc, #48]	; (800232c <__libc_init_array+0x44>)
 80022fc:	f000 fc44 	bl	8002b88 <_init>
 8002300:	1ba4      	subs	r4, r4, r6
 8002302:	10a4      	asrs	r4, r4, #2
 8002304:	2500      	movs	r5, #0
 8002306:	42a5      	cmp	r5, r4
 8002308:	d105      	bne.n	8002316 <__libc_init_array+0x2e>
 800230a:	bd70      	pop	{r4, r5, r6, pc}
 800230c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002310:	4798      	blx	r3
 8002312:	3501      	adds	r5, #1
 8002314:	e7ee      	b.n	80022f4 <__libc_init_array+0xc>
 8002316:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800231a:	4798      	blx	r3
 800231c:	3501      	adds	r5, #1
 800231e:	e7f2      	b.n	8002306 <__libc_init_array+0x1e>
 8002320:	08002c1c 	.word	0x08002c1c
 8002324:	08002c1c 	.word	0x08002c1c
 8002328:	08002c1c 	.word	0x08002c1c
 800232c:	08002c20 	.word	0x08002c20

08002330 <siprintf>:
 8002330:	b40e      	push	{r1, r2, r3}
 8002332:	b500      	push	{lr}
 8002334:	b09c      	sub	sp, #112	; 0x70
 8002336:	f44f 7102 	mov.w	r1, #520	; 0x208
 800233a:	ab1d      	add	r3, sp, #116	; 0x74
 800233c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002340:	9002      	str	r0, [sp, #8]
 8002342:	9006      	str	r0, [sp, #24]
 8002344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002348:	480a      	ldr	r0, [pc, #40]	; (8002374 <siprintf+0x44>)
 800234a:	9104      	str	r1, [sp, #16]
 800234c:	9107      	str	r1, [sp, #28]
 800234e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002352:	f853 2b04 	ldr.w	r2, [r3], #4
 8002356:	f8ad 1016 	strh.w	r1, [sp, #22]
 800235a:	6800      	ldr	r0, [r0, #0]
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	a902      	add	r1, sp, #8
 8002360:	f000 f866 	bl	8002430 <_svfiprintf_r>
 8002364:	9b02      	ldr	r3, [sp, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	b01c      	add	sp, #112	; 0x70
 800236c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002370:	b003      	add	sp, #12
 8002372:	4770      	bx	lr
 8002374:	20000004 	.word	0x20000004

08002378 <__ssputs_r>:
 8002378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800237c:	688e      	ldr	r6, [r1, #8]
 800237e:	429e      	cmp	r6, r3
 8002380:	4682      	mov	sl, r0
 8002382:	460c      	mov	r4, r1
 8002384:	4691      	mov	r9, r2
 8002386:	4698      	mov	r8, r3
 8002388:	d835      	bhi.n	80023f6 <__ssputs_r+0x7e>
 800238a:	898a      	ldrh	r2, [r1, #12]
 800238c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002390:	d031      	beq.n	80023f6 <__ssputs_r+0x7e>
 8002392:	6825      	ldr	r5, [r4, #0]
 8002394:	6909      	ldr	r1, [r1, #16]
 8002396:	1a6f      	subs	r7, r5, r1
 8002398:	6965      	ldr	r5, [r4, #20]
 800239a:	2302      	movs	r3, #2
 800239c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80023a4:	f108 0301 	add.w	r3, r8, #1
 80023a8:	443b      	add	r3, r7
 80023aa:	429d      	cmp	r5, r3
 80023ac:	bf38      	it	cc
 80023ae:	461d      	movcc	r5, r3
 80023b0:	0553      	lsls	r3, r2, #21
 80023b2:	d531      	bpl.n	8002418 <__ssputs_r+0xa0>
 80023b4:	4629      	mov	r1, r5
 80023b6:	f000 fb39 	bl	8002a2c <_malloc_r>
 80023ba:	4606      	mov	r6, r0
 80023bc:	b950      	cbnz	r0, 80023d4 <__ssputs_r+0x5c>
 80023be:	230c      	movs	r3, #12
 80023c0:	f8ca 3000 	str.w	r3, [sl]
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ca:	81a3      	strh	r3, [r4, #12]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d4:	463a      	mov	r2, r7
 80023d6:	6921      	ldr	r1, [r4, #16]
 80023d8:	f000 fab4 	bl	8002944 <memcpy>
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e6:	81a3      	strh	r3, [r4, #12]
 80023e8:	6126      	str	r6, [r4, #16]
 80023ea:	6165      	str	r5, [r4, #20]
 80023ec:	443e      	add	r6, r7
 80023ee:	1bed      	subs	r5, r5, r7
 80023f0:	6026      	str	r6, [r4, #0]
 80023f2:	60a5      	str	r5, [r4, #8]
 80023f4:	4646      	mov	r6, r8
 80023f6:	4546      	cmp	r6, r8
 80023f8:	bf28      	it	cs
 80023fa:	4646      	movcs	r6, r8
 80023fc:	4632      	mov	r2, r6
 80023fe:	4649      	mov	r1, r9
 8002400:	6820      	ldr	r0, [r4, #0]
 8002402:	f000 faaa 	bl	800295a <memmove>
 8002406:	68a3      	ldr	r3, [r4, #8]
 8002408:	1b9b      	subs	r3, r3, r6
 800240a:	60a3      	str	r3, [r4, #8]
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	441e      	add	r6, r3
 8002410:	6026      	str	r6, [r4, #0]
 8002412:	2000      	movs	r0, #0
 8002414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002418:	462a      	mov	r2, r5
 800241a:	f000 fb65 	bl	8002ae8 <_realloc_r>
 800241e:	4606      	mov	r6, r0
 8002420:	2800      	cmp	r0, #0
 8002422:	d1e1      	bne.n	80023e8 <__ssputs_r+0x70>
 8002424:	6921      	ldr	r1, [r4, #16]
 8002426:	4650      	mov	r0, sl
 8002428:	f000 fab2 	bl	8002990 <_free_r>
 800242c:	e7c7      	b.n	80023be <__ssputs_r+0x46>
	...

08002430 <_svfiprintf_r>:
 8002430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002434:	b09d      	sub	sp, #116	; 0x74
 8002436:	4680      	mov	r8, r0
 8002438:	9303      	str	r3, [sp, #12]
 800243a:	898b      	ldrh	r3, [r1, #12]
 800243c:	061c      	lsls	r4, r3, #24
 800243e:	460d      	mov	r5, r1
 8002440:	4616      	mov	r6, r2
 8002442:	d50f      	bpl.n	8002464 <_svfiprintf_r+0x34>
 8002444:	690b      	ldr	r3, [r1, #16]
 8002446:	b96b      	cbnz	r3, 8002464 <_svfiprintf_r+0x34>
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	f000 faef 	bl	8002a2c <_malloc_r>
 800244e:	6028      	str	r0, [r5, #0]
 8002450:	6128      	str	r0, [r5, #16]
 8002452:	b928      	cbnz	r0, 8002460 <_svfiprintf_r+0x30>
 8002454:	230c      	movs	r3, #12
 8002456:	f8c8 3000 	str.w	r3, [r8]
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
 800245e:	e0c5      	b.n	80025ec <_svfiprintf_r+0x1bc>
 8002460:	2340      	movs	r3, #64	; 0x40
 8002462:	616b      	str	r3, [r5, #20]
 8002464:	2300      	movs	r3, #0
 8002466:	9309      	str	r3, [sp, #36]	; 0x24
 8002468:	2320      	movs	r3, #32
 800246a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800246e:	2330      	movs	r3, #48	; 0x30
 8002470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002474:	f04f 0b01 	mov.w	fp, #1
 8002478:	4637      	mov	r7, r6
 800247a:	463c      	mov	r4, r7
 800247c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d13c      	bne.n	80024fe <_svfiprintf_r+0xce>
 8002484:	ebb7 0a06 	subs.w	sl, r7, r6
 8002488:	d00b      	beq.n	80024a2 <_svfiprintf_r+0x72>
 800248a:	4653      	mov	r3, sl
 800248c:	4632      	mov	r2, r6
 800248e:	4629      	mov	r1, r5
 8002490:	4640      	mov	r0, r8
 8002492:	f7ff ff71 	bl	8002378 <__ssputs_r>
 8002496:	3001      	adds	r0, #1
 8002498:	f000 80a3 	beq.w	80025e2 <_svfiprintf_r+0x1b2>
 800249c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800249e:	4453      	add	r3, sl
 80024a0:	9309      	str	r3, [sp, #36]	; 0x24
 80024a2:	783b      	ldrb	r3, [r7, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 809c 	beq.w	80025e2 <_svfiprintf_r+0x1b2>
 80024aa:	2300      	movs	r3, #0
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	9304      	str	r3, [sp, #16]
 80024b2:	9307      	str	r3, [sp, #28]
 80024b4:	9205      	str	r2, [sp, #20]
 80024b6:	9306      	str	r3, [sp, #24]
 80024b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024bc:	931a      	str	r3, [sp, #104]	; 0x68
 80024be:	2205      	movs	r2, #5
 80024c0:	7821      	ldrb	r1, [r4, #0]
 80024c2:	4850      	ldr	r0, [pc, #320]	; (8002604 <_svfiprintf_r+0x1d4>)
 80024c4:	f7fd fe8c 	bl	80001e0 <memchr>
 80024c8:	1c67      	adds	r7, r4, #1
 80024ca:	9b04      	ldr	r3, [sp, #16]
 80024cc:	b9d8      	cbnz	r0, 8002506 <_svfiprintf_r+0xd6>
 80024ce:	06d9      	lsls	r1, r3, #27
 80024d0:	bf44      	itt	mi
 80024d2:	2220      	movmi	r2, #32
 80024d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024d8:	071a      	lsls	r2, r3, #28
 80024da:	bf44      	itt	mi
 80024dc:	222b      	movmi	r2, #43	; 0x2b
 80024de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024e2:	7822      	ldrb	r2, [r4, #0]
 80024e4:	2a2a      	cmp	r2, #42	; 0x2a
 80024e6:	d016      	beq.n	8002516 <_svfiprintf_r+0xe6>
 80024e8:	9a07      	ldr	r2, [sp, #28]
 80024ea:	2100      	movs	r1, #0
 80024ec:	200a      	movs	r0, #10
 80024ee:	4627      	mov	r7, r4
 80024f0:	3401      	adds	r4, #1
 80024f2:	783b      	ldrb	r3, [r7, #0]
 80024f4:	3b30      	subs	r3, #48	; 0x30
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	d951      	bls.n	800259e <_svfiprintf_r+0x16e>
 80024fa:	b1c9      	cbz	r1, 8002530 <_svfiprintf_r+0x100>
 80024fc:	e011      	b.n	8002522 <_svfiprintf_r+0xf2>
 80024fe:	2b25      	cmp	r3, #37	; 0x25
 8002500:	d0c0      	beq.n	8002484 <_svfiprintf_r+0x54>
 8002502:	4627      	mov	r7, r4
 8002504:	e7b9      	b.n	800247a <_svfiprintf_r+0x4a>
 8002506:	4a3f      	ldr	r2, [pc, #252]	; (8002604 <_svfiprintf_r+0x1d4>)
 8002508:	1a80      	subs	r0, r0, r2
 800250a:	fa0b f000 	lsl.w	r0, fp, r0
 800250e:	4318      	orrs	r0, r3
 8002510:	9004      	str	r0, [sp, #16]
 8002512:	463c      	mov	r4, r7
 8002514:	e7d3      	b.n	80024be <_svfiprintf_r+0x8e>
 8002516:	9a03      	ldr	r2, [sp, #12]
 8002518:	1d11      	adds	r1, r2, #4
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	9103      	str	r1, [sp, #12]
 800251e:	2a00      	cmp	r2, #0
 8002520:	db01      	blt.n	8002526 <_svfiprintf_r+0xf6>
 8002522:	9207      	str	r2, [sp, #28]
 8002524:	e004      	b.n	8002530 <_svfiprintf_r+0x100>
 8002526:	4252      	negs	r2, r2
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	9207      	str	r2, [sp, #28]
 800252e:	9304      	str	r3, [sp, #16]
 8002530:	783b      	ldrb	r3, [r7, #0]
 8002532:	2b2e      	cmp	r3, #46	; 0x2e
 8002534:	d10e      	bne.n	8002554 <_svfiprintf_r+0x124>
 8002536:	787b      	ldrb	r3, [r7, #1]
 8002538:	2b2a      	cmp	r3, #42	; 0x2a
 800253a:	f107 0101 	add.w	r1, r7, #1
 800253e:	d132      	bne.n	80025a6 <_svfiprintf_r+0x176>
 8002540:	9b03      	ldr	r3, [sp, #12]
 8002542:	1d1a      	adds	r2, r3, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	9203      	str	r2, [sp, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	bfb8      	it	lt
 800254c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002550:	3702      	adds	r7, #2
 8002552:	9305      	str	r3, [sp, #20]
 8002554:	4c2c      	ldr	r4, [pc, #176]	; (8002608 <_svfiprintf_r+0x1d8>)
 8002556:	7839      	ldrb	r1, [r7, #0]
 8002558:	2203      	movs	r2, #3
 800255a:	4620      	mov	r0, r4
 800255c:	f7fd fe40 	bl	80001e0 <memchr>
 8002560:	b138      	cbz	r0, 8002572 <_svfiprintf_r+0x142>
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	1b00      	subs	r0, r0, r4
 8002566:	fa03 f000 	lsl.w	r0, r3, r0
 800256a:	9b04      	ldr	r3, [sp, #16]
 800256c:	4303      	orrs	r3, r0
 800256e:	9304      	str	r3, [sp, #16]
 8002570:	3701      	adds	r7, #1
 8002572:	7839      	ldrb	r1, [r7, #0]
 8002574:	4825      	ldr	r0, [pc, #148]	; (800260c <_svfiprintf_r+0x1dc>)
 8002576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800257a:	2206      	movs	r2, #6
 800257c:	1c7e      	adds	r6, r7, #1
 800257e:	f7fd fe2f 	bl	80001e0 <memchr>
 8002582:	2800      	cmp	r0, #0
 8002584:	d035      	beq.n	80025f2 <_svfiprintf_r+0x1c2>
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <_svfiprintf_r+0x1e0>)
 8002588:	b9fb      	cbnz	r3, 80025ca <_svfiprintf_r+0x19a>
 800258a:	9b03      	ldr	r3, [sp, #12]
 800258c:	3307      	adds	r3, #7
 800258e:	f023 0307 	bic.w	r3, r3, #7
 8002592:	3308      	adds	r3, #8
 8002594:	9303      	str	r3, [sp, #12]
 8002596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002598:	444b      	add	r3, r9
 800259a:	9309      	str	r3, [sp, #36]	; 0x24
 800259c:	e76c      	b.n	8002478 <_svfiprintf_r+0x48>
 800259e:	fb00 3202 	mla	r2, r0, r2, r3
 80025a2:	2101      	movs	r1, #1
 80025a4:	e7a3      	b.n	80024ee <_svfiprintf_r+0xbe>
 80025a6:	2300      	movs	r3, #0
 80025a8:	9305      	str	r3, [sp, #20]
 80025aa:	4618      	mov	r0, r3
 80025ac:	240a      	movs	r4, #10
 80025ae:	460f      	mov	r7, r1
 80025b0:	3101      	adds	r1, #1
 80025b2:	783a      	ldrb	r2, [r7, #0]
 80025b4:	3a30      	subs	r2, #48	; 0x30
 80025b6:	2a09      	cmp	r2, #9
 80025b8:	d903      	bls.n	80025c2 <_svfiprintf_r+0x192>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ca      	beq.n	8002554 <_svfiprintf_r+0x124>
 80025be:	9005      	str	r0, [sp, #20]
 80025c0:	e7c8      	b.n	8002554 <_svfiprintf_r+0x124>
 80025c2:	fb04 2000 	mla	r0, r4, r0, r2
 80025c6:	2301      	movs	r3, #1
 80025c8:	e7f1      	b.n	80025ae <_svfiprintf_r+0x17e>
 80025ca:	ab03      	add	r3, sp, #12
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	462a      	mov	r2, r5
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <_svfiprintf_r+0x1e4>)
 80025d2:	a904      	add	r1, sp, #16
 80025d4:	4640      	mov	r0, r8
 80025d6:	f3af 8000 	nop.w
 80025da:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025de:	4681      	mov	r9, r0
 80025e0:	d1d9      	bne.n	8002596 <_svfiprintf_r+0x166>
 80025e2:	89ab      	ldrh	r3, [r5, #12]
 80025e4:	065b      	lsls	r3, r3, #25
 80025e6:	f53f af38 	bmi.w	800245a <_svfiprintf_r+0x2a>
 80025ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025ec:	b01d      	add	sp, #116	; 0x74
 80025ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f2:	ab03      	add	r3, sp, #12
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	462a      	mov	r2, r5
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <_svfiprintf_r+0x1e4>)
 80025fa:	a904      	add	r1, sp, #16
 80025fc:	4640      	mov	r0, r8
 80025fe:	f000 f881 	bl	8002704 <_printf_i>
 8002602:	e7ea      	b.n	80025da <_svfiprintf_r+0x1aa>
 8002604:	08002be6 	.word	0x08002be6
 8002608:	08002bec 	.word	0x08002bec
 800260c:	08002bf0 	.word	0x08002bf0
 8002610:	00000000 	.word	0x00000000
 8002614:	08002379 	.word	0x08002379

08002618 <_printf_common>:
 8002618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800261c:	4691      	mov	r9, r2
 800261e:	461f      	mov	r7, r3
 8002620:	688a      	ldr	r2, [r1, #8]
 8002622:	690b      	ldr	r3, [r1, #16]
 8002624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002628:	4293      	cmp	r3, r2
 800262a:	bfb8      	it	lt
 800262c:	4613      	movlt	r3, r2
 800262e:	f8c9 3000 	str.w	r3, [r9]
 8002632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002636:	4606      	mov	r6, r0
 8002638:	460c      	mov	r4, r1
 800263a:	b112      	cbz	r2, 8002642 <_printf_common+0x2a>
 800263c:	3301      	adds	r3, #1
 800263e:	f8c9 3000 	str.w	r3, [r9]
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	0699      	lsls	r1, r3, #26
 8002646:	bf42      	ittt	mi
 8002648:	f8d9 3000 	ldrmi.w	r3, [r9]
 800264c:	3302      	addmi	r3, #2
 800264e:	f8c9 3000 	strmi.w	r3, [r9]
 8002652:	6825      	ldr	r5, [r4, #0]
 8002654:	f015 0506 	ands.w	r5, r5, #6
 8002658:	d107      	bne.n	800266a <_printf_common+0x52>
 800265a:	f104 0a19 	add.w	sl, r4, #25
 800265e:	68e3      	ldr	r3, [r4, #12]
 8002660:	f8d9 2000 	ldr.w	r2, [r9]
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	429d      	cmp	r5, r3
 8002668:	db29      	blt.n	80026be <_printf_common+0xa6>
 800266a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800266e:	6822      	ldr	r2, [r4, #0]
 8002670:	3300      	adds	r3, #0
 8002672:	bf18      	it	ne
 8002674:	2301      	movne	r3, #1
 8002676:	0692      	lsls	r2, r2, #26
 8002678:	d42e      	bmi.n	80026d8 <_printf_common+0xc0>
 800267a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800267e:	4639      	mov	r1, r7
 8002680:	4630      	mov	r0, r6
 8002682:	47c0      	blx	r8
 8002684:	3001      	adds	r0, #1
 8002686:	d021      	beq.n	80026cc <_printf_common+0xb4>
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	68e5      	ldr	r5, [r4, #12]
 800268c:	f8d9 2000 	ldr.w	r2, [r9]
 8002690:	f003 0306 	and.w	r3, r3, #6
 8002694:	2b04      	cmp	r3, #4
 8002696:	bf08      	it	eq
 8002698:	1aad      	subeq	r5, r5, r2
 800269a:	68a3      	ldr	r3, [r4, #8]
 800269c:	6922      	ldr	r2, [r4, #16]
 800269e:	bf0c      	ite	eq
 80026a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026a4:	2500      	movne	r5, #0
 80026a6:	4293      	cmp	r3, r2
 80026a8:	bfc4      	itt	gt
 80026aa:	1a9b      	subgt	r3, r3, r2
 80026ac:	18ed      	addgt	r5, r5, r3
 80026ae:	f04f 0900 	mov.w	r9, #0
 80026b2:	341a      	adds	r4, #26
 80026b4:	454d      	cmp	r5, r9
 80026b6:	d11b      	bne.n	80026f0 <_printf_common+0xd8>
 80026b8:	2000      	movs	r0, #0
 80026ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026be:	2301      	movs	r3, #1
 80026c0:	4652      	mov	r2, sl
 80026c2:	4639      	mov	r1, r7
 80026c4:	4630      	mov	r0, r6
 80026c6:	47c0      	blx	r8
 80026c8:	3001      	adds	r0, #1
 80026ca:	d103      	bne.n	80026d4 <_printf_common+0xbc>
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026d4:	3501      	adds	r5, #1
 80026d6:	e7c2      	b.n	800265e <_printf_common+0x46>
 80026d8:	18e1      	adds	r1, r4, r3
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	2030      	movs	r0, #48	; 0x30
 80026de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026e2:	4422      	add	r2, r4
 80026e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026ec:	3302      	adds	r3, #2
 80026ee:	e7c4      	b.n	800267a <_printf_common+0x62>
 80026f0:	2301      	movs	r3, #1
 80026f2:	4622      	mov	r2, r4
 80026f4:	4639      	mov	r1, r7
 80026f6:	4630      	mov	r0, r6
 80026f8:	47c0      	blx	r8
 80026fa:	3001      	adds	r0, #1
 80026fc:	d0e6      	beq.n	80026cc <_printf_common+0xb4>
 80026fe:	f109 0901 	add.w	r9, r9, #1
 8002702:	e7d7      	b.n	80026b4 <_printf_common+0x9c>

08002704 <_printf_i>:
 8002704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002708:	4617      	mov	r7, r2
 800270a:	7e0a      	ldrb	r2, [r1, #24]
 800270c:	b085      	sub	sp, #20
 800270e:	2a6e      	cmp	r2, #110	; 0x6e
 8002710:	4698      	mov	r8, r3
 8002712:	4606      	mov	r6, r0
 8002714:	460c      	mov	r4, r1
 8002716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002718:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800271c:	f000 80bc 	beq.w	8002898 <_printf_i+0x194>
 8002720:	d81a      	bhi.n	8002758 <_printf_i+0x54>
 8002722:	2a63      	cmp	r2, #99	; 0x63
 8002724:	d02e      	beq.n	8002784 <_printf_i+0x80>
 8002726:	d80a      	bhi.n	800273e <_printf_i+0x3a>
 8002728:	2a00      	cmp	r2, #0
 800272a:	f000 80c8 	beq.w	80028be <_printf_i+0x1ba>
 800272e:	2a58      	cmp	r2, #88	; 0x58
 8002730:	f000 808a 	beq.w	8002848 <_printf_i+0x144>
 8002734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002738:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800273c:	e02a      	b.n	8002794 <_printf_i+0x90>
 800273e:	2a64      	cmp	r2, #100	; 0x64
 8002740:	d001      	beq.n	8002746 <_printf_i+0x42>
 8002742:	2a69      	cmp	r2, #105	; 0x69
 8002744:	d1f6      	bne.n	8002734 <_printf_i+0x30>
 8002746:	6821      	ldr	r1, [r4, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800274e:	d023      	beq.n	8002798 <_printf_i+0x94>
 8002750:	1d11      	adds	r1, r2, #4
 8002752:	6019      	str	r1, [r3, #0]
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	e027      	b.n	80027a8 <_printf_i+0xa4>
 8002758:	2a73      	cmp	r2, #115	; 0x73
 800275a:	f000 80b4 	beq.w	80028c6 <_printf_i+0x1c2>
 800275e:	d808      	bhi.n	8002772 <_printf_i+0x6e>
 8002760:	2a6f      	cmp	r2, #111	; 0x6f
 8002762:	d02a      	beq.n	80027ba <_printf_i+0xb6>
 8002764:	2a70      	cmp	r2, #112	; 0x70
 8002766:	d1e5      	bne.n	8002734 <_printf_i+0x30>
 8002768:	680a      	ldr	r2, [r1, #0]
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	600a      	str	r2, [r1, #0]
 8002770:	e003      	b.n	800277a <_printf_i+0x76>
 8002772:	2a75      	cmp	r2, #117	; 0x75
 8002774:	d021      	beq.n	80027ba <_printf_i+0xb6>
 8002776:	2a78      	cmp	r2, #120	; 0x78
 8002778:	d1dc      	bne.n	8002734 <_printf_i+0x30>
 800277a:	2278      	movs	r2, #120	; 0x78
 800277c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002780:	496e      	ldr	r1, [pc, #440]	; (800293c <_printf_i+0x238>)
 8002782:	e064      	b.n	800284e <_printf_i+0x14a>
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800278a:	1d11      	adds	r1, r2, #4
 800278c:	6019      	str	r1, [r3, #0]
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002794:	2301      	movs	r3, #1
 8002796:	e0a3      	b.n	80028e0 <_printf_i+0x1dc>
 8002798:	f011 0f40 	tst.w	r1, #64	; 0x40
 800279c:	f102 0104 	add.w	r1, r2, #4
 80027a0:	6019      	str	r1, [r3, #0]
 80027a2:	d0d7      	beq.n	8002754 <_printf_i+0x50>
 80027a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da03      	bge.n	80027b4 <_printf_i+0xb0>
 80027ac:	222d      	movs	r2, #45	; 0x2d
 80027ae:	425b      	negs	r3, r3
 80027b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80027b4:	4962      	ldr	r1, [pc, #392]	; (8002940 <_printf_i+0x23c>)
 80027b6:	220a      	movs	r2, #10
 80027b8:	e017      	b.n	80027ea <_printf_i+0xe6>
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80027c2:	d003      	beq.n	80027cc <_printf_i+0xc8>
 80027c4:	1d08      	adds	r0, r1, #4
 80027c6:	6018      	str	r0, [r3, #0]
 80027c8:	680b      	ldr	r3, [r1, #0]
 80027ca:	e006      	b.n	80027da <_printf_i+0xd6>
 80027cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027d0:	f101 0004 	add.w	r0, r1, #4
 80027d4:	6018      	str	r0, [r3, #0]
 80027d6:	d0f7      	beq.n	80027c8 <_printf_i+0xc4>
 80027d8:	880b      	ldrh	r3, [r1, #0]
 80027da:	4959      	ldr	r1, [pc, #356]	; (8002940 <_printf_i+0x23c>)
 80027dc:	2a6f      	cmp	r2, #111	; 0x6f
 80027de:	bf14      	ite	ne
 80027e0:	220a      	movne	r2, #10
 80027e2:	2208      	moveq	r2, #8
 80027e4:	2000      	movs	r0, #0
 80027e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80027ea:	6865      	ldr	r5, [r4, #4]
 80027ec:	60a5      	str	r5, [r4, #8]
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	f2c0 809c 	blt.w	800292c <_printf_i+0x228>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	f020 0004 	bic.w	r0, r0, #4
 80027fa:	6020      	str	r0, [r4, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d13f      	bne.n	8002880 <_printf_i+0x17c>
 8002800:	2d00      	cmp	r5, #0
 8002802:	f040 8095 	bne.w	8002930 <_printf_i+0x22c>
 8002806:	4675      	mov	r5, lr
 8002808:	2a08      	cmp	r2, #8
 800280a:	d10b      	bne.n	8002824 <_printf_i+0x120>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	07da      	lsls	r2, r3, #31
 8002810:	d508      	bpl.n	8002824 <_printf_i+0x120>
 8002812:	6923      	ldr	r3, [r4, #16]
 8002814:	6862      	ldr	r2, [r4, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	bfde      	ittt	le
 800281a:	2330      	movle	r3, #48	; 0x30
 800281c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002820:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002824:	ebae 0305 	sub.w	r3, lr, r5
 8002828:	6123      	str	r3, [r4, #16]
 800282a:	f8cd 8000 	str.w	r8, [sp]
 800282e:	463b      	mov	r3, r7
 8002830:	aa03      	add	r2, sp, #12
 8002832:	4621      	mov	r1, r4
 8002834:	4630      	mov	r0, r6
 8002836:	f7ff feef 	bl	8002618 <_printf_common>
 800283a:	3001      	adds	r0, #1
 800283c:	d155      	bne.n	80028ea <_printf_i+0x1e6>
 800283e:	f04f 30ff 	mov.w	r0, #4294967295
 8002842:	b005      	add	sp, #20
 8002844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002848:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800284c:	493c      	ldr	r1, [pc, #240]	; (8002940 <_printf_i+0x23c>)
 800284e:	6822      	ldr	r2, [r4, #0]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002856:	f100 0504 	add.w	r5, r0, #4
 800285a:	601d      	str	r5, [r3, #0]
 800285c:	d001      	beq.n	8002862 <_printf_i+0x15e>
 800285e:	6803      	ldr	r3, [r0, #0]
 8002860:	e002      	b.n	8002868 <_printf_i+0x164>
 8002862:	0655      	lsls	r5, r2, #25
 8002864:	d5fb      	bpl.n	800285e <_printf_i+0x15a>
 8002866:	8803      	ldrh	r3, [r0, #0]
 8002868:	07d0      	lsls	r0, r2, #31
 800286a:	bf44      	itt	mi
 800286c:	f042 0220 	orrmi.w	r2, r2, #32
 8002870:	6022      	strmi	r2, [r4, #0]
 8002872:	b91b      	cbnz	r3, 800287c <_printf_i+0x178>
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	f022 0220 	bic.w	r2, r2, #32
 800287a:	6022      	str	r2, [r4, #0]
 800287c:	2210      	movs	r2, #16
 800287e:	e7b1      	b.n	80027e4 <_printf_i+0xe0>
 8002880:	4675      	mov	r5, lr
 8002882:	fbb3 f0f2 	udiv	r0, r3, r2
 8002886:	fb02 3310 	mls	r3, r2, r0, r3
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002890:	4603      	mov	r3, r0
 8002892:	2800      	cmp	r0, #0
 8002894:	d1f5      	bne.n	8002882 <_printf_i+0x17e>
 8002896:	e7b7      	b.n	8002808 <_printf_i+0x104>
 8002898:	6808      	ldr	r0, [r1, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	6949      	ldr	r1, [r1, #20]
 800289e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028a2:	d004      	beq.n	80028ae <_printf_i+0x1aa>
 80028a4:	1d10      	adds	r0, r2, #4
 80028a6:	6018      	str	r0, [r3, #0]
 80028a8:	6813      	ldr	r3, [r2, #0]
 80028aa:	6019      	str	r1, [r3, #0]
 80028ac:	e007      	b.n	80028be <_printf_i+0x1ba>
 80028ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028b2:	f102 0004 	add.w	r0, r2, #4
 80028b6:	6018      	str	r0, [r3, #0]
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	d0f6      	beq.n	80028aa <_printf_i+0x1a6>
 80028bc:	8019      	strh	r1, [r3, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	6123      	str	r3, [r4, #16]
 80028c2:	4675      	mov	r5, lr
 80028c4:	e7b1      	b.n	800282a <_printf_i+0x126>
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	1d11      	adds	r1, r2, #4
 80028ca:	6019      	str	r1, [r3, #0]
 80028cc:	6815      	ldr	r5, [r2, #0]
 80028ce:	6862      	ldr	r2, [r4, #4]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4628      	mov	r0, r5
 80028d4:	f7fd fc84 	bl	80001e0 <memchr>
 80028d8:	b108      	cbz	r0, 80028de <_printf_i+0x1da>
 80028da:	1b40      	subs	r0, r0, r5
 80028dc:	6060      	str	r0, [r4, #4]
 80028de:	6863      	ldr	r3, [r4, #4]
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	2300      	movs	r3, #0
 80028e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028e8:	e79f      	b.n	800282a <_printf_i+0x126>
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	462a      	mov	r2, r5
 80028ee:	4639      	mov	r1, r7
 80028f0:	4630      	mov	r0, r6
 80028f2:	47c0      	blx	r8
 80028f4:	3001      	adds	r0, #1
 80028f6:	d0a2      	beq.n	800283e <_printf_i+0x13a>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	079b      	lsls	r3, r3, #30
 80028fc:	d507      	bpl.n	800290e <_printf_i+0x20a>
 80028fe:	2500      	movs	r5, #0
 8002900:	f104 0919 	add.w	r9, r4, #25
 8002904:	68e3      	ldr	r3, [r4, #12]
 8002906:	9a03      	ldr	r2, [sp, #12]
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	429d      	cmp	r5, r3
 800290c:	db05      	blt.n	800291a <_printf_i+0x216>
 800290e:	68e0      	ldr	r0, [r4, #12]
 8002910:	9b03      	ldr	r3, [sp, #12]
 8002912:	4298      	cmp	r0, r3
 8002914:	bfb8      	it	lt
 8002916:	4618      	movlt	r0, r3
 8002918:	e793      	b.n	8002842 <_printf_i+0x13e>
 800291a:	2301      	movs	r3, #1
 800291c:	464a      	mov	r2, r9
 800291e:	4639      	mov	r1, r7
 8002920:	4630      	mov	r0, r6
 8002922:	47c0      	blx	r8
 8002924:	3001      	adds	r0, #1
 8002926:	d08a      	beq.n	800283e <_printf_i+0x13a>
 8002928:	3501      	adds	r5, #1
 800292a:	e7eb      	b.n	8002904 <_printf_i+0x200>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1a7      	bne.n	8002880 <_printf_i+0x17c>
 8002930:	780b      	ldrb	r3, [r1, #0]
 8002932:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002936:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800293a:	e765      	b.n	8002808 <_printf_i+0x104>
 800293c:	08002c08 	.word	0x08002c08
 8002940:	08002bf7 	.word	0x08002bf7

08002944 <memcpy>:
 8002944:	b510      	push	{r4, lr}
 8002946:	1e43      	subs	r3, r0, #1
 8002948:	440a      	add	r2, r1
 800294a:	4291      	cmp	r1, r2
 800294c:	d100      	bne.n	8002950 <memcpy+0xc>
 800294e:	bd10      	pop	{r4, pc}
 8002950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002958:	e7f7      	b.n	800294a <memcpy+0x6>

0800295a <memmove>:
 800295a:	4288      	cmp	r0, r1
 800295c:	b510      	push	{r4, lr}
 800295e:	eb01 0302 	add.w	r3, r1, r2
 8002962:	d803      	bhi.n	800296c <memmove+0x12>
 8002964:	1e42      	subs	r2, r0, #1
 8002966:	4299      	cmp	r1, r3
 8002968:	d10c      	bne.n	8002984 <memmove+0x2a>
 800296a:	bd10      	pop	{r4, pc}
 800296c:	4298      	cmp	r0, r3
 800296e:	d2f9      	bcs.n	8002964 <memmove+0xa>
 8002970:	1881      	adds	r1, r0, r2
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	42d3      	cmn	r3, r2
 8002976:	d100      	bne.n	800297a <memmove+0x20>
 8002978:	bd10      	pop	{r4, pc}
 800297a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800297e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002982:	e7f7      	b.n	8002974 <memmove+0x1a>
 8002984:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002988:	f802 4f01 	strb.w	r4, [r2, #1]!
 800298c:	e7eb      	b.n	8002966 <memmove+0xc>
	...

08002990 <_free_r>:
 8002990:	b538      	push	{r3, r4, r5, lr}
 8002992:	4605      	mov	r5, r0
 8002994:	2900      	cmp	r1, #0
 8002996:	d045      	beq.n	8002a24 <_free_r+0x94>
 8002998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800299c:	1f0c      	subs	r4, r1, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bfb8      	it	lt
 80029a2:	18e4      	addlt	r4, r4, r3
 80029a4:	f000 f8d6 	bl	8002b54 <__malloc_lock>
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <_free_r+0x98>)
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	4610      	mov	r0, r2
 80029ae:	b933      	cbnz	r3, 80029be <_free_r+0x2e>
 80029b0:	6063      	str	r3, [r4, #4]
 80029b2:	6014      	str	r4, [r2, #0]
 80029b4:	4628      	mov	r0, r5
 80029b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029ba:	f000 b8cc 	b.w	8002b56 <__malloc_unlock>
 80029be:	42a3      	cmp	r3, r4
 80029c0:	d90c      	bls.n	80029dc <_free_r+0x4c>
 80029c2:	6821      	ldr	r1, [r4, #0]
 80029c4:	1862      	adds	r2, r4, r1
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bf04      	itt	eq
 80029ca:	681a      	ldreq	r2, [r3, #0]
 80029cc:	685b      	ldreq	r3, [r3, #4]
 80029ce:	6063      	str	r3, [r4, #4]
 80029d0:	bf04      	itt	eq
 80029d2:	1852      	addeq	r2, r2, r1
 80029d4:	6022      	streq	r2, [r4, #0]
 80029d6:	6004      	str	r4, [r0, #0]
 80029d8:	e7ec      	b.n	80029b4 <_free_r+0x24>
 80029da:	4613      	mov	r3, r2
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	b10a      	cbz	r2, 80029e4 <_free_r+0x54>
 80029e0:	42a2      	cmp	r2, r4
 80029e2:	d9fa      	bls.n	80029da <_free_r+0x4a>
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	1858      	adds	r0, r3, r1
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d10b      	bne.n	8002a04 <_free_r+0x74>
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	4401      	add	r1, r0
 80029f0:	1858      	adds	r0, r3, r1
 80029f2:	4282      	cmp	r2, r0
 80029f4:	6019      	str	r1, [r3, #0]
 80029f6:	d1dd      	bne.n	80029b4 <_free_r+0x24>
 80029f8:	6810      	ldr	r0, [r2, #0]
 80029fa:	6852      	ldr	r2, [r2, #4]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	4401      	add	r1, r0
 8002a00:	6019      	str	r1, [r3, #0]
 8002a02:	e7d7      	b.n	80029b4 <_free_r+0x24>
 8002a04:	d902      	bls.n	8002a0c <_free_r+0x7c>
 8002a06:	230c      	movs	r3, #12
 8002a08:	602b      	str	r3, [r5, #0]
 8002a0a:	e7d3      	b.n	80029b4 <_free_r+0x24>
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	1821      	adds	r1, r4, r0
 8002a10:	428a      	cmp	r2, r1
 8002a12:	bf04      	itt	eq
 8002a14:	6811      	ldreq	r1, [r2, #0]
 8002a16:	6852      	ldreq	r2, [r2, #4]
 8002a18:	6062      	str	r2, [r4, #4]
 8002a1a:	bf04      	itt	eq
 8002a1c:	1809      	addeq	r1, r1, r0
 8002a1e:	6021      	streq	r1, [r4, #0]
 8002a20:	605c      	str	r4, [r3, #4]
 8002a22:	e7c7      	b.n	80029b4 <_free_r+0x24>
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
 8002a26:	bf00      	nop
 8002a28:	20000084 	.word	0x20000084

08002a2c <_malloc_r>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	1ccd      	adds	r5, r1, #3
 8002a30:	f025 0503 	bic.w	r5, r5, #3
 8002a34:	3508      	adds	r5, #8
 8002a36:	2d0c      	cmp	r5, #12
 8002a38:	bf38      	it	cc
 8002a3a:	250c      	movcc	r5, #12
 8002a3c:	2d00      	cmp	r5, #0
 8002a3e:	4606      	mov	r6, r0
 8002a40:	db01      	blt.n	8002a46 <_malloc_r+0x1a>
 8002a42:	42a9      	cmp	r1, r5
 8002a44:	d903      	bls.n	8002a4e <_malloc_r+0x22>
 8002a46:	230c      	movs	r3, #12
 8002a48:	6033      	str	r3, [r6, #0]
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
 8002a4e:	f000 f881 	bl	8002b54 <__malloc_lock>
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <_malloc_r+0xb4>)
 8002a54:	6814      	ldr	r4, [r2, #0]
 8002a56:	4621      	mov	r1, r4
 8002a58:	b991      	cbnz	r1, 8002a80 <_malloc_r+0x54>
 8002a5a:	4c22      	ldr	r4, [pc, #136]	; (8002ae4 <_malloc_r+0xb8>)
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	b91b      	cbnz	r3, 8002a68 <_malloc_r+0x3c>
 8002a60:	4630      	mov	r0, r6
 8002a62:	f000 f867 	bl	8002b34 <_sbrk_r>
 8002a66:	6020      	str	r0, [r4, #0]
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f000 f862 	bl	8002b34 <_sbrk_r>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d126      	bne.n	8002ac2 <_malloc_r+0x96>
 8002a74:	230c      	movs	r3, #12
 8002a76:	6033      	str	r3, [r6, #0]
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f000 f86c 	bl	8002b56 <__malloc_unlock>
 8002a7e:	e7e4      	b.n	8002a4a <_malloc_r+0x1e>
 8002a80:	680b      	ldr	r3, [r1, #0]
 8002a82:	1b5b      	subs	r3, r3, r5
 8002a84:	d41a      	bmi.n	8002abc <_malloc_r+0x90>
 8002a86:	2b0b      	cmp	r3, #11
 8002a88:	d90f      	bls.n	8002aaa <_malloc_r+0x7e>
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	50cd      	str	r5, [r1, r3]
 8002a8e:	18cc      	adds	r4, r1, r3
 8002a90:	4630      	mov	r0, r6
 8002a92:	f000 f860 	bl	8002b56 <__malloc_unlock>
 8002a96:	f104 000b 	add.w	r0, r4, #11
 8002a9a:	1d23      	adds	r3, r4, #4
 8002a9c:	f020 0007 	bic.w	r0, r0, #7
 8002aa0:	1ac3      	subs	r3, r0, r3
 8002aa2:	d01b      	beq.n	8002adc <_malloc_r+0xb0>
 8002aa4:	425a      	negs	r2, r3
 8002aa6:	50e2      	str	r2, [r4, r3]
 8002aa8:	bd70      	pop	{r4, r5, r6, pc}
 8002aaa:	428c      	cmp	r4, r1
 8002aac:	bf0d      	iteet	eq
 8002aae:	6863      	ldreq	r3, [r4, #4]
 8002ab0:	684b      	ldrne	r3, [r1, #4]
 8002ab2:	6063      	strne	r3, [r4, #4]
 8002ab4:	6013      	streq	r3, [r2, #0]
 8002ab6:	bf18      	it	ne
 8002ab8:	460c      	movne	r4, r1
 8002aba:	e7e9      	b.n	8002a90 <_malloc_r+0x64>
 8002abc:	460c      	mov	r4, r1
 8002abe:	6849      	ldr	r1, [r1, #4]
 8002ac0:	e7ca      	b.n	8002a58 <_malloc_r+0x2c>
 8002ac2:	1cc4      	adds	r4, r0, #3
 8002ac4:	f024 0403 	bic.w	r4, r4, #3
 8002ac8:	42a0      	cmp	r0, r4
 8002aca:	d005      	beq.n	8002ad8 <_malloc_r+0xac>
 8002acc:	1a21      	subs	r1, r4, r0
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f000 f830 	bl	8002b34 <_sbrk_r>
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d0cd      	beq.n	8002a74 <_malloc_r+0x48>
 8002ad8:	6025      	str	r5, [r4, #0]
 8002ada:	e7d9      	b.n	8002a90 <_malloc_r+0x64>
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000084 	.word	0x20000084
 8002ae4:	20000088 	.word	0x20000088

08002ae8 <_realloc_r>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	4607      	mov	r7, r0
 8002aec:	4614      	mov	r4, r2
 8002aee:	460e      	mov	r6, r1
 8002af0:	b921      	cbnz	r1, 8002afc <_realloc_r+0x14>
 8002af2:	4611      	mov	r1, r2
 8002af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002af8:	f7ff bf98 	b.w	8002a2c <_malloc_r>
 8002afc:	b922      	cbnz	r2, 8002b08 <_realloc_r+0x20>
 8002afe:	f7ff ff47 	bl	8002990 <_free_r>
 8002b02:	4625      	mov	r5, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b08:	f000 f826 	bl	8002b58 <_malloc_usable_size_r>
 8002b0c:	4284      	cmp	r4, r0
 8002b0e:	d90f      	bls.n	8002b30 <_realloc_r+0x48>
 8002b10:	4621      	mov	r1, r4
 8002b12:	4638      	mov	r0, r7
 8002b14:	f7ff ff8a 	bl	8002a2c <_malloc_r>
 8002b18:	4605      	mov	r5, r0
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d0f2      	beq.n	8002b04 <_realloc_r+0x1c>
 8002b1e:	4631      	mov	r1, r6
 8002b20:	4622      	mov	r2, r4
 8002b22:	f7ff ff0f 	bl	8002944 <memcpy>
 8002b26:	4631      	mov	r1, r6
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f7ff ff31 	bl	8002990 <_free_r>
 8002b2e:	e7e9      	b.n	8002b04 <_realloc_r+0x1c>
 8002b30:	4635      	mov	r5, r6
 8002b32:	e7e7      	b.n	8002b04 <_realloc_r+0x1c>

08002b34 <_sbrk_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4c06      	ldr	r4, [pc, #24]	; (8002b50 <_sbrk_r+0x1c>)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	4605      	mov	r5, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	6023      	str	r3, [r4, #0]
 8002b40:	f000 f814 	bl	8002b6c <_sbrk>
 8002b44:	1c43      	adds	r3, r0, #1
 8002b46:	d102      	bne.n	8002b4e <_sbrk_r+0x1a>
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	b103      	cbz	r3, 8002b4e <_sbrk_r+0x1a>
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
 8002b50:	20000158 	.word	0x20000158

08002b54 <__malloc_lock>:
 8002b54:	4770      	bx	lr

08002b56 <__malloc_unlock>:
 8002b56:	4770      	bx	lr

08002b58 <_malloc_usable_size_r>:
 8002b58:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f1a0 0004 	sub.w	r0, r0, #4
 8002b62:	bfbc      	itt	lt
 8002b64:	580b      	ldrlt	r3, [r1, r0]
 8002b66:	18c0      	addlt	r0, r0, r3
 8002b68:	4770      	bx	lr
	...

08002b6c <_sbrk>:
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <_sbrk+0x14>)
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	4602      	mov	r2, r0
 8002b72:	b909      	cbnz	r1, 8002b78 <_sbrk+0xc>
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <_sbrk+0x18>)
 8002b76:	6019      	str	r1, [r3, #0]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	4402      	add	r2, r0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	4770      	bx	lr
 8002b80:	2000008c 	.word	0x2000008c
 8002b84:	2000015c 	.word	0x2000015c

08002b88 <_init>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr

08002b94 <_fini>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr
