
5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001bbc  08001bbc  00011bbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c08  08001c08  00011c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  20000000  08001c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
  7 .bss          000000b8  200000cc  200000cc  000200cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000184  20000184  000200cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000139c9  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000275a  00000000  00000000  00033ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006a14  00000000  00000000  0003621f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b8  00000000  00000000  0003cc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c68  00000000  00000000  0003d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000052f2  00000000  00000000  0003e158  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000038f2  00000000  00000000  0004344a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00046d3c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000018e4  00000000  00000000  00046db8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000cc 	.word	0x200000cc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001ba4 	.word	0x08001ba4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d0 	.word	0x200000d0
 80001d0:	08001ba4 	.word	0x08001ba4

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f87c 	bl	80002e0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f836 	bl	8000260 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000c8 	.word	0x200000c8

080001fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <HAL_Init+0x20>)
{
 80001fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f817 	bl	800023c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ffe0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000214:	f001 fb7c 	bl	8001910 <HAL_MspInit>
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd08      	pop	{r3, pc}
 800021c:	40022000 	.word	0x40022000

08000220 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000220:	4a02      	ldr	r2, [pc, #8]	; (800022c <HAL_IncTick+0xc>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	200000e8 	.word	0x200000e8

08000230 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_GetTick+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	200000e8 	.word	0x200000e8

0800023c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800023e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000240:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000244:	041b      	lsls	r3, r3, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800024c:	0200      	lsls	r0, r0, #8
 800024e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000252:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000256:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000258:	60d3      	str	r3, [r2, #12]
 800025a:	4770      	bx	lr
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000262:	b530      	push	{r4, r5, lr}
 8000264:	68dc      	ldr	r4, [r3, #12]
 8000266:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800026a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000270:	2b04      	cmp	r3, #4
 8000272:	bf28      	it	cs
 8000274:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000276:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000278:	f04f 0501 	mov.w	r5, #1
 800027c:	fa05 f303 	lsl.w	r3, r5, r3
 8000280:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000284:	bf8c      	ite	hi
 8000286:	3c03      	subhi	r4, #3
 8000288:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028a:	4019      	ands	r1, r3
 800028c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800028e:	fa05 f404 	lsl.w	r4, r5, r4
 8000292:	3c01      	subs	r4, #1
 8000294:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000296:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	ea42 0201 	orr.w	r2, r2, r1
 800029c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	bfaf      	iteee	ge
 80002a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f000 000f 	andlt.w	r0, r0, #15
 80002aa:	4b06      	ldrlt	r3, [pc, #24]	; (80002c4 <HAL_NVIC_SetPriority+0x64>)
 80002ac:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	bfa5      	ittet	ge
 80002b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002b4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002bc:	bd30      	pop	{r4, r5, pc}
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000ed14 	.word	0xe000ed14

080002c8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c8:	0942      	lsrs	r2, r0, #5
 80002ca:	2301      	movs	r3, #1
 80002cc:	f000 001f 	and.w	r0, r0, #31
 80002d0:	fa03 f000 	lsl.w	r0, r3, r0
 80002d4:	4b01      	ldr	r3, [pc, #4]	; (80002dc <HAL_NVIC_EnableIRQ+0x14>)
 80002d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100

080002e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e0:	3801      	subs	r0, #1
 80002e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e6:	d20a      	bcs.n	80002fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	4a07      	ldr	r2, [pc, #28]	; (8000308 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ec:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ee:	21f0      	movs	r1, #240	; 0xf0
 80002f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e010 	.word	0xe000e010
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800030e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000310:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000312:	bf0c      	ite	eq
 8000314:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000318:	f022 0204 	bicne.w	r2, r2, #4
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	4770      	bx	lr
 8000320:	e000e010 	.word	0xe000e010

08000324 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000324:	4770      	bx	lr

08000326 <HAL_SYSTICK_IRQHandler>:
{
 8000326:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000328:	f7ff fffc 	bl	8000324 <HAL_SYSTICK_Callback>
 800032c:	bd08      	pop	{r3, pc}

0800032e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800032e:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000330:	4604      	mov	r4, r0
 8000332:	b168      	cbz	r0, 8000350 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000334:	7903      	ldrb	r3, [r0, #4]
 8000336:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800033a:	b913      	cbnz	r3, 8000342 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800033c:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800033e:	f001 fb25 	bl	800198c <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000342:	2302      	movs	r3, #2
 8000344:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000346:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000348:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800034a:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800034c:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800034e:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000350:	2001      	movs	r0, #1
}
 8000352:	bd10      	pop	{r4, pc}

08000354 <HAL_DAC_ConvCpltCallbackCh1>:
 8000354:	4770      	bx	lr

08000356 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8000356:	4770      	bx	lr

08000358 <HAL_DAC_ErrorCallbackCh1>:
 8000358:	4770      	bx	lr

0800035a <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800035a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800035c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800035e:	6923      	ldr	r3, [r4, #16]
 8000360:	f043 0304 	orr.w	r3, r3, #4
 8000364:	6123      	str	r3, [r4, #16]
    
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000366:	4620      	mov	r0, r4
 8000368:	f7ff fff6 	bl	8000358 <HAL_DAC_ErrorCallbackCh1>
    
  hdac->State= HAL_DAC_STATE_READY;
 800036c:	2301      	movs	r3, #1
 800036e:	7123      	strb	r3, [r4, #4]
 8000370:	bd10      	pop	{r4, pc}

08000372 <DAC_DMAHalfConvCpltCh1>:
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000372:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000374:	f7ff bfef 	b.w	8000356 <HAL_DAC_ConvHalfCpltCallbackCh1>

08000378 <DAC_DMAConvCpltCh1>:
{
 8000378:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800037a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800037c:	4620      	mov	r0, r4
 800037e:	f7ff ffe9 	bl	8000354 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8000382:	2301      	movs	r3, #1
 8000384:	7123      	strb	r3, [r4, #4]
 8000386:	bd10      	pop	{r4, pc}

08000388 <HAL_DAC_Start_DMA>:
{
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	4605      	mov	r5, r0
  __HAL_LOCK(hdac);
 800038c:	7940      	ldrb	r0, [r0, #5]
 800038e:	2801      	cmp	r0, #1
{
 8000390:	460e      	mov	r6, r1
 8000392:	f04f 0002 	mov.w	r0, #2
 8000396:	4611      	mov	r1, r2
 8000398:	9a06      	ldr	r2, [sp, #24]
  __HAL_LOCK(hdac);
 800039a:	d04c      	beq.n	8000436 <HAL_DAC_Start_DMA+0xae>
 800039c:	2401      	movs	r4, #1
 800039e:	716c      	strb	r4, [r5, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80003a0:	7128      	strb	r0, [r5, #4]
 80003a2:	682c      	ldr	r4, [r5, #0]
  if(Channel == DAC_CHANNEL_1)
 80003a4:	b9e6      	cbnz	r6, 80003e0 <HAL_DAC_Start_DMA+0x58>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80003a6:	68a8      	ldr	r0, [r5, #8]
 80003a8:	4f23      	ldr	r7, [pc, #140]	; (8000438 <HAL_DAC_Start_DMA+0xb0>)
 80003aa:	6287      	str	r7, [r0, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80003ac:	4f23      	ldr	r7, [pc, #140]	; (800043c <HAL_DAC_Start_DMA+0xb4>)
 80003ae:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80003b0:	4f23      	ldr	r7, [pc, #140]	; (8000440 <HAL_DAC_Start_DMA+0xb8>)
 80003b2:	6307      	str	r7, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80003b4:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80003b6:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80003b8:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 80003bc:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 80003be:	d009      	beq.n	80003d4 <HAL_DAC_Start_DMA+0x4c>
 80003c0:	2a08      	cmp	r2, #8
 80003c2:	d00a      	beq.n	80003da <HAL_DAC_Start_DMA+0x52>
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d134      	bne.n	8000432 <HAL_DAC_Start_DMA+0xaa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80003c8:	f104 0208 	add.w	r2, r4, #8
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80003cc:	6827      	ldr	r7, [r4, #0]
 80003ce:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 80003d2:	e01a      	b.n	800040a <HAL_DAC_Start_DMA+0x82>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80003d4:	f104 020c 	add.w	r2, r4, #12
        break;
 80003d8:	e7f8      	b.n	80003cc <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80003da:	f104 0210 	add.w	r2, r4, #16
        break;
 80003de:	e7f5      	b.n	80003cc <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80003e0:	68e8      	ldr	r0, [r5, #12]
 80003e2:	4f18      	ldr	r7, [pc, #96]	; (8000444 <HAL_DAC_Start_DMA+0xbc>)
 80003e4:	6287      	str	r7, [r0, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80003e6:	4f18      	ldr	r7, [pc, #96]	; (8000448 <HAL_DAC_Start_DMA+0xc0>)
 80003e8:	62c7      	str	r7, [r0, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80003ea:	4f18      	ldr	r7, [pc, #96]	; (800044c <HAL_DAC_Start_DMA+0xc4>)
 80003ec:	6307      	str	r7, [r0, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80003ee:	6827      	ldr	r7, [r4, #0]
    switch(Alignment)
 80003f0:	2a04      	cmp	r2, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80003f2:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80003f6:	6027      	str	r7, [r4, #0]
    switch(Alignment)
 80003f8:	d013      	beq.n	8000422 <HAL_DAC_Start_DMA+0x9a>
 80003fa:	2a08      	cmp	r2, #8
 80003fc:	d014      	beq.n	8000428 <HAL_DAC_Start_DMA+0xa0>
 80003fe:	b9b2      	cbnz	r2, 800042e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000400:	f104 0214 	add.w	r2, r4, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000404:	6827      	ldr	r7, [r4, #0]
 8000406:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800040a:	6027      	str	r7, [r4, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800040c:	f000 f8a9 	bl	8000562 <HAL_DMA_Start_IT>
  __HAL_DAC_ENABLE(hdac, Channel);
 8000410:	682b      	ldr	r3, [r5, #0]
 8000412:	2101      	movs	r1, #1
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	40b1      	lsls	r1, r6
  __HAL_UNLOCK(hdac);
 8000418:	2000      	movs	r0, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 800041a:	4311      	orrs	r1, r2
  __HAL_UNLOCK(hdac);
 800041c:	7168      	strb	r0, [r5, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800041e:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8000420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000422:	f104 0218 	add.w	r2, r4, #24
        break;
 8000426:	e7ed      	b.n	8000404 <HAL_DAC_Start_DMA+0x7c>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000428:	f104 021c 	add.w	r2, r4, #28
        break;
 800042c:	e7ea      	b.n	8000404 <HAL_DAC_Start_DMA+0x7c>
  uint32_t tmpreg = 0U;
 800042e:	2200      	movs	r2, #0
 8000430:	e7e8      	b.n	8000404 <HAL_DAC_Start_DMA+0x7c>
 8000432:	4632      	mov	r2, r6
 8000434:	e7ca      	b.n	80003cc <HAL_DAC_Start_DMA+0x44>
}
 8000436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000438:	08000379 	.word	0x08000379
 800043c:	08000373 	.word	0x08000373
 8000440:	0800035b 	.word	0x0800035b
 8000444:	08000493 	.word	0x08000493
 8000448:	080004a5 	.word	0x080004a5
 800044c:	080004b1 	.word	0x080004b1

08000450 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8000450:	7943      	ldrb	r3, [r0, #5]
 8000452:	2b01      	cmp	r3, #1
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800045a:	d017      	beq.n	800048c <HAL_DAC_ConfigChannel+0x3c>
  tmpreg1 = hdac->Instance->CR;
 800045c:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800045e:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000460:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000462:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000466:	4095      	lsls	r5, r2
 8000468:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800046c:	c90a      	ldmia	r1, {r1, r3}
 800046e:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8000470:	4093      	lsls	r3, r2
 8000472:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8000474:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000476:	6823      	ldr	r3, [r4, #0]
 8000478:	21c0      	movs	r1, #192	; 0xc0
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8000482:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000484:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000486:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8000488:	2300      	movs	r3, #0
 800048a:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800048c:	4618      	mov	r0, r3
}
 800048e:	bd30      	pop	{r4, r5, pc}

08000490 <HAL_DACEx_ConvCpltCallbackCh2>:
 8000490:	4770      	bx	lr

08000492 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000492:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000494:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000496:	4620      	mov	r0, r4
 8000498:	f7ff fffa 	bl	8000490 <HAL_DACEx_ConvCpltCallbackCh2>
  
  hdac->State= HAL_DAC_STATE_READY;
 800049c:	2301      	movs	r3, #1
 800049e:	7123      	strb	r3, [r4, #4]
 80004a0:	bd10      	pop	{r4, pc}

080004a2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 80004a2:	4770      	bx	lr

080004a4 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80004a4:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80004a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80004a8:	f7ff fffb 	bl	80004a2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 80004ac:	bd08      	pop	{r3, pc}

080004ae <HAL_DACEx_ErrorCallbackCh2>:
 80004ae:	4770      	bx	lr

080004b0 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80004b0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80004b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80004b4:	6923      	ldr	r3, [r4, #16]
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6123      	str	r3, [r4, #16]
    
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80004bc:	4620      	mov	r0, r4
 80004be:	f7ff fff6 	bl	80004ae <HAL_DACEx_ErrorCallbackCh2>
    
  hdac->State= HAL_DAC_STATE_READY;
 80004c2:	2301      	movs	r3, #1
 80004c4:	7123      	strb	r3, [r4, #4]
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80004c8:	6801      	ldr	r1, [r0, #0]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <DMA_CalcBaseAndBitshift+0x34>)
 80004cc:	4299      	cmp	r1, r3
{
 80004ce:	b510      	push	{r4, lr}
 80004d0:	f04f 0414 	mov.w	r4, #20
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80004d4:	d809      	bhi.n	80004ea <DMA_CalcBaseAndBitshift+0x22>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80004d6:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <DMA_CalcBaseAndBitshift+0x38>)
 80004d8:	440a      	add	r2, r1
 80004da:	fbb2 f2f4 	udiv	r2, r2, r4
 80004de:	0092      	lsls	r2, r2, #2
 80004e0:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80004e2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 80004e6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80004e8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <DMA_CalcBaseAndBitshift+0x3c>)
 80004ec:	440b      	add	r3, r1
 80004ee:	fbb3 f3f4 	udiv	r3, r3, r4
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <DMA_CalcBaseAndBitshift+0x40>)
 80004f8:	e7f5      	b.n	80004e6 <DMA_CalcBaseAndBitshift+0x1e>
 80004fa:	bf00      	nop
 80004fc:	40020407 	.word	0x40020407
 8000500:	bffdfff8 	.word	0xbffdfff8
 8000504:	bffdfbf8 	.word	0xbffdfbf8
 8000508:	40020400 	.word	0x40020400

0800050c <HAL_DMA_Init>:
{ 
 800050c:	b538      	push	{r3, r4, r5, lr}
  if(NULL == hdma)
 800050e:	4604      	mov	r4, r0
 8000510:	b328      	cbz	r0, 800055e <HAL_DMA_Init+0x52>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000512:	2302      	movs	r3, #2
  tmp |=  hdma->Init.Direction        |
 8000514:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000516:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 800051a:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 800051c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800051e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000520:	68c5      	ldr	r5, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000522:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000524:	432b      	orrs	r3, r5
 8000526:	6905      	ldr	r5, [r0, #16]
 8000528:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800052a:	6945      	ldr	r5, [r0, #20]
 800052c:	432b      	orrs	r3, r5
 800052e:	6985      	ldr	r5, [r0, #24]
 8000530:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000532:	69c5      	ldr	r5, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000534:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000538:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800053c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800053e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000540:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000542:	f7ff ffc1 	bl	80004c8 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8000546:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000548:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 800054a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800054c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800054e:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000550:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000552:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000554:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000558:	f884 0020 	strb.w	r0, [r4, #32]
  return HAL_OK;
 800055c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800055e:	2001      	movs	r0, #1
}  
 8000560:	bd38      	pop	{r3, r4, r5, pc}

08000562 <HAL_DMA_Start_IT>:
{
 8000562:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000564:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000568:	2c01      	cmp	r4, #1
 800056a:	d035      	beq.n	80005d8 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800056c:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000570:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000572:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000574:	f880 4020 	strb.w	r4, [r0, #32]
 8000578:	f04f 0600 	mov.w	r6, #0
 800057c:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000580:	d128      	bne.n	80005d4 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000582:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000586:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000588:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800058a:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800058c:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800058e:	f026 0601 	bic.w	r6, r6, #1
 8000592:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000594:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000596:	40bd      	lsls	r5, r7
 8000598:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800059a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800059c:	6843      	ldr	r3, [r0, #4]
 800059e:	6805      	ldr	r5, [r0, #0]
 80005a0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80005a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80005a4:	bf0b      	itete	eq
 80005a6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80005a8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80005aa:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80005ac:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80005ae:	b14b      	cbz	r3, 80005c4 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80005b6:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80005b8:	682b      	ldr	r3, [r5, #0]
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80005c0:	2000      	movs	r0, #0
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	f043 030a 	orr.w	r3, r3, #10
 80005ca:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	f023 0304 	bic.w	r3, r3, #4
 80005d2:	e7f0      	b.n	80005b6 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80005d4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80005d8:	2002      	movs	r0, #2
} 
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005dc <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005dc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80005de:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80005e0:	6803      	ldr	r3, [r0, #0]
{
 80005e2:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005e4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80005e6:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80005e8:	2404      	movs	r4, #4
 80005ea:	4094      	lsls	r4, r2
 80005ec:	4226      	tst	r6, r4
 80005ee:	d00e      	beq.n	800060e <HAL_DMA_IRQHandler+0x32>
 80005f0:	f015 0f04 	tst.w	r5, #4
 80005f4:	d00b      	beq.n	800060e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80005fa:	bf5e      	ittt	pl
 80005fc:	681a      	ldrpl	r2, [r3, #0]
 80005fe:	f022 0204 	bicpl.w	r2, r2, #4
 8000602:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000604:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000606:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000608:	b373      	cbz	r3, 8000668 <HAL_DMA_IRQHandler+0x8c>
}  
 800060a:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800060c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800060e:	2402      	movs	r4, #2
 8000610:	4094      	lsls	r4, r2
 8000612:	4226      	tst	r6, r4
 8000614:	d012      	beq.n	800063c <HAL_DMA_IRQHandler+0x60>
 8000616:	f015 0f02 	tst.w	r5, #2
 800061a:	d00f      	beq.n	800063c <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	0695      	lsls	r5, r2, #26
 8000620:	d406      	bmi.n	8000630 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f022 020a 	bic.w	r2, r2, #10
 8000628:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800062a:	2301      	movs	r3, #1
 800062c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000630:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000632:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000634:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000638:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800063a:	e7e5      	b.n	8000608 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800063c:	2408      	movs	r4, #8
 800063e:	4094      	lsls	r4, r2
 8000640:	4234      	tst	r4, r6
 8000642:	d011      	beq.n	8000668 <HAL_DMA_IRQHandler+0x8c>
 8000644:	072c      	lsls	r4, r5, #28
 8000646:	d50f      	bpl.n	8000668 <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f024 040e 	bic.w	r4, r4, #14
 800064e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000650:	2301      	movs	r3, #1
 8000652:	fa03 f202 	lsl.w	r2, r3, r2
 8000656:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000658:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800065a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800065e:	2300      	movs	r3, #0
 8000660:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000664:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000666:	e7cf      	b.n	8000608 <HAL_DMA_IRQHandler+0x2c>
}  
 8000668:	bc70      	pop	{r4, r5, r6}
 800066a:	4770      	bx	lr

0800066c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800066c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000670:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000674:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000808 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000678:	4a61      	ldr	r2, [pc, #388]	; (8000800 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800067a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800067c:	fa38 f403 	lsrs.w	r4, r8, r3
 8000680:	d102      	bne.n	8000688 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000682:	b003      	add	sp, #12
 8000684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000688:	f04f 0e01 	mov.w	lr, #1
 800068c:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000690:	ea18 060e 	ands.w	r6, r8, lr
 8000694:	f000 80a6 	beq.w	80007e4 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000698:	684c      	ldr	r4, [r1, #4]
 800069a:	f024 0710 	bic.w	r7, r4, #16
 800069e:	2f02      	cmp	r7, #2
 80006a0:	d116      	bne.n	80006d0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80006a2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006aa:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80006ae:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006b2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006b6:	f04f 0c0f 	mov.w	ip, #15
 80006ba:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006be:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006c2:	690d      	ldr	r5, [r1, #16]
 80006c4:	fa05 f50b 	lsl.w	r5, r5, fp
 80006c8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80006cc:	f8ca 5020 	str.w	r5, [sl, #32]
 80006d0:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006d4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80006d6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006da:	fa05 f50a 	lsl.w	r5, r5, sl
 80006de:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006e8:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ec:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ee:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006f4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f8:	d811      	bhi.n	800071e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006fa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006fc:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000700:	68cf      	ldr	r7, [r1, #12]
 8000702:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000706:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800070a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800070c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800070e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000712:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000716:	409f      	lsls	r7, r3
 8000718:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800071c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800071e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000720:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000722:	688f      	ldr	r7, [r1, #8]
 8000724:	fa07 f70a 	lsl.w	r7, r7, sl
 8000728:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800072a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800072c:	00e5      	lsls	r5, r4, #3
 800072e:	d559      	bpl.n	80007e4 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000730:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000734:	f045 0501 	orr.w	r5, r5, #1
 8000738:	f8c9 5018 	str.w	r5, [r9, #24]
 800073c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000740:	f023 0703 	bic.w	r7, r3, #3
 8000744:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000748:	f005 0501 	and.w	r5, r5, #1
 800074c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000750:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000752:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000758:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800075a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800075e:	f04f 0e0f 	mov.w	lr, #15
 8000762:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000766:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800076a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800076e:	d03b      	beq.n	80007e8 <HAL_GPIO_Init+0x17c>
 8000770:	4d24      	ldr	r5, [pc, #144]	; (8000804 <HAL_GPIO_Init+0x198>)
 8000772:	42a8      	cmp	r0, r5
 8000774:	d03a      	beq.n	80007ec <HAL_GPIO_Init+0x180>
 8000776:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800077a:	42a8      	cmp	r0, r5
 800077c:	d038      	beq.n	80007f0 <HAL_GPIO_Init+0x184>
 800077e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000782:	42a8      	cmp	r0, r5
 8000784:	d036      	beq.n	80007f4 <HAL_GPIO_Init+0x188>
 8000786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800078a:	42a8      	cmp	r0, r5
 800078c:	d034      	beq.n	80007f8 <HAL_GPIO_Init+0x18c>
 800078e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000792:	42a8      	cmp	r0, r5
 8000794:	d032      	beq.n	80007fc <HAL_GPIO_Init+0x190>
 8000796:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800079a:	42a8      	cmp	r0, r5
 800079c:	bf14      	ite	ne
 800079e:	2507      	movne	r5, #7
 80007a0:	2506      	moveq	r5, #6
 80007a2:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a6:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80007aa:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007ac:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ae:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007b4:	bf0c      	ite	eq
 80007b6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007b8:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80007ba:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80007bc:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007be:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007c2:	bf0c      	ite	eq
 80007c4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007c6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80007c8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80007ca:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007cc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80007d0:	bf0c      	ite	eq
 80007d2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80007d4:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80007d6:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80007d8:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007da:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80007dc:	bf54      	ite	pl
 80007de:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80007e0:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80007e2:	60d5      	str	r5, [r2, #12]
    position++;
 80007e4:	3301      	adds	r3, #1
 80007e6:	e749      	b.n	800067c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007e8:	2500      	movs	r5, #0
 80007ea:	e7da      	b.n	80007a2 <HAL_GPIO_Init+0x136>
 80007ec:	2501      	movs	r5, #1
 80007ee:	e7d8      	b.n	80007a2 <HAL_GPIO_Init+0x136>
 80007f0:	2502      	movs	r5, #2
 80007f2:	e7d6      	b.n	80007a2 <HAL_GPIO_Init+0x136>
 80007f4:	2503      	movs	r5, #3
 80007f6:	e7d4      	b.n	80007a2 <HAL_GPIO_Init+0x136>
 80007f8:	2504      	movs	r5, #4
 80007fa:	e7d2      	b.n	80007a2 <HAL_GPIO_Init+0x136>
 80007fc:	2505      	movs	r5, #5
 80007fe:	e7d0      	b.n	80007a2 <HAL_GPIO_Init+0x136>
 8000800:	40010400 	.word	0x40010400
 8000804:	48000400 	.word	0x48000400
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800080c:	6803      	ldr	r3, [r0, #0]
{
 800080e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000812:	07df      	lsls	r7, r3, #31
{
 8000814:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000816:	d411      	bmi.n	800083c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	079e      	lsls	r6, r3, #30
 800081c:	f100 808b 	bmi.w	8000936 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000820:	682b      	ldr	r3, [r5, #0]
 8000822:	071c      	lsls	r4, r3, #28
 8000824:	f100 80fe 	bmi.w	8000a24 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000828:	682b      	ldr	r3, [r5, #0]
 800082a:	0758      	lsls	r0, r3, #29
 800082c:	f100 8147 	bmi.w	8000abe <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000830:	69aa      	ldr	r2, [r5, #24]
 8000832:	2a00      	cmp	r2, #0
 8000834:	f040 81dd 	bne.w	8000bf2 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000838:	2000      	movs	r0, #0
 800083a:	e024      	b.n	8000886 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800083c:	4cbd      	ldr	r4, [pc, #756]	; (8000b34 <HAL_RCC_OscConfig+0x328>)
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b04      	cmp	r3, #4
 8000846:	d00a      	beq.n	800085e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000848:	6863      	ldr	r3, [r4, #4]
 800084a:	f003 030c 	and.w	r3, r3, #12
 800084e:	2b08      	cmp	r3, #8
 8000850:	d11c      	bne.n	800088c <HAL_RCC_OscConfig+0x80>
 8000852:	6863      	ldr	r3, [r4, #4]
 8000854:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085c:	d116      	bne.n	800088c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800085e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000862:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000866:	6821      	ldr	r1, [r4, #0]
 8000868:	fa93 f3a3 	rbit	r3, r3
 800086c:	fab3 f383 	clz	r3, r3
 8000870:	f003 031f 	and.w	r3, r3, #31
 8000874:	2201      	movs	r2, #1
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	420b      	tst	r3, r1
 800087c:	d0cc      	beq.n	8000818 <HAL_RCC_OscConfig+0xc>
 800087e:	686b      	ldr	r3, [r5, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d1c9      	bne.n	8000818 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000884:	2001      	movs	r0, #1
}
 8000886:	b002      	add	sp, #8
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088c:	686b      	ldr	r3, [r5, #4]
 800088e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000892:	d11e      	bne.n	80008d2 <HAL_RCC_OscConfig+0xc6>
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800089a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800089c:	f7ff fcc8 	bl	8000230 <HAL_GetTick>
 80008a0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008a4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a6:	2701      	movs	r7, #1
 80008a8:	fa96 f3a6 	rbit	r3, r6
 80008ac:	6822      	ldr	r2, [r4, #0]
 80008ae:	fa96 f3a6 	rbit	r3, r6
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	f003 031f 	and.w	r3, r3, #31
 80008ba:	fa07 f303 	lsl.w	r3, r7, r3
 80008be:	4213      	tst	r3, r2
 80008c0:	d1aa      	bne.n	8000818 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008c2:	f7ff fcb5 	bl	8000230 <HAL_GetTick>
 80008c6:	eba0 0008 	sub.w	r0, r0, r8
 80008ca:	2864      	cmp	r0, #100	; 0x64
 80008cc:	d9ec      	bls.n	80008a8 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 80008ce:	2003      	movs	r0, #3
 80008d0:	e7d9      	b.n	8000886 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d2:	bb0b      	cbnz	r3, 8000918 <HAL_RCC_OscConfig+0x10c>
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008da:	6023      	str	r3, [r4, #0]
 80008dc:	6823      	ldr	r3, [r4, #0]
 80008de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008e4:	f7ff fca4 	bl	8000230 <HAL_GetTick>
 80008e8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008ec:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ee:	2701      	movs	r7, #1
 80008f0:	fa96 f3a6 	rbit	r3, r6
 80008f4:	6822      	ldr	r2, [r4, #0]
 80008f6:	fa96 f3a6 	rbit	r3, r6
 80008fa:	fab3 f383 	clz	r3, r3
 80008fe:	f003 031f 	and.w	r3, r3, #31
 8000902:	fa07 f303 	lsl.w	r3, r7, r3
 8000906:	4213      	tst	r3, r2
 8000908:	d086      	beq.n	8000818 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800090a:	f7ff fc91 	bl	8000230 <HAL_GetTick>
 800090e:	eba0 0008 	sub.w	r0, r0, r8
 8000912:	2864      	cmp	r0, #100	; 0x64
 8000914:	d9ec      	bls.n	80008f0 <HAL_RCC_OscConfig+0xe4>
 8000916:	e7da      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	d103      	bne.n	8000928 <HAL_RCC_OscConfig+0x11c>
 8000920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	e7b5      	b.n	8000894 <HAL_RCC_OscConfig+0x88>
 8000928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	6823      	ldr	r3, [r4, #0]
 8000930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000934:	e7b1      	b.n	800089a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000936:	4c7f      	ldr	r4, [pc, #508]	; (8000b34 <HAL_RCC_OscConfig+0x328>)
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	f013 0f0c 	tst.w	r3, #12
 800093e:	d00a      	beq.n	8000956 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000940:	6863      	ldr	r3, [r4, #4]
 8000942:	f003 030c 	and.w	r3, r3, #12
 8000946:	2b08      	cmp	r3, #8
 8000948:	d124      	bne.n	8000994 <HAL_RCC_OscConfig+0x188>
 800094a:	6863      	ldr	r3, [r4, #4]
 800094c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000954:	d11e      	bne.n	8000994 <HAL_RCC_OscConfig+0x188>
 8000956:	2302      	movs	r3, #2
 8000958:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095c:	6821      	ldr	r1, [r4, #0]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	fab3 f383 	clz	r3, r3
 8000966:	f003 031f 	and.w	r3, r3, #31
 800096a:	2201      	movs	r2, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	420b      	tst	r3, r1
 8000972:	d002      	beq.n	800097a <HAL_RCC_OscConfig+0x16e>
 8000974:	68eb      	ldr	r3, [r5, #12]
 8000976:	4293      	cmp	r3, r2
 8000978:	d184      	bne.n	8000884 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	6821      	ldr	r1, [r4, #0]
 800097c:	23f8      	movs	r3, #248	; 0xf8
 800097e:	fa93 f3a3 	rbit	r3, r3
 8000982:	fab3 f283 	clz	r2, r3
 8000986:	692b      	ldr	r3, [r5, #16]
 8000988:	4093      	lsls	r3, r2
 800098a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800098e:	4313      	orrs	r3, r2
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	e745      	b.n	8000820 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000994:	68ea      	ldr	r2, [r5, #12]
 8000996:	2601      	movs	r6, #1
 8000998:	b30a      	cbz	r2, 80009de <HAL_RCC_OscConfig+0x1d2>
 800099a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	2702      	movs	r7, #2
 80009ae:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fc3e 	bl	8000230 <HAL_GetTick>
 80009b4:	4680      	mov	r8, r0
 80009b6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ba:	6822      	ldr	r2, [r4, #0]
 80009bc:	fa97 f3a7 	rbit	r3, r7
 80009c0:	fab3 f383 	clz	r3, r3
 80009c4:	f003 031f 	and.w	r3, r3, #31
 80009c8:	fa06 f303 	lsl.w	r3, r6, r3
 80009cc:	4213      	tst	r3, r2
 80009ce:	d1d4      	bne.n	800097a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009d0:	f7ff fc2e 	bl	8000230 <HAL_GetTick>
 80009d4:	eba0 0008 	sub.w	r0, r0, r8
 80009d8:	2802      	cmp	r0, #2
 80009da:	d9ec      	bls.n	80009b6 <HAL_RCC_OscConfig+0x1aa>
 80009dc:	e777      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
 80009de:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80009e2:	fab3 f383 	clz	r3, r3
 80009e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	2702      	movs	r7, #2
 80009f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fc1c 	bl	8000230 <HAL_GetTick>
 80009f8:	4680      	mov	r8, r0
 80009fa:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009fe:	6822      	ldr	r2, [r4, #0]
 8000a00:	fa97 f3a7 	rbit	r3, r7
 8000a04:	fab3 f383 	clz	r3, r3
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	fa06 f303 	lsl.w	r3, r6, r3
 8000a10:	4213      	tst	r3, r2
 8000a12:	f43f af05 	beq.w	8000820 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a16:	f7ff fc0b 	bl	8000230 <HAL_GetTick>
 8000a1a:	eba0 0008 	sub.w	r0, r0, r8
 8000a1e:	2802      	cmp	r0, #2
 8000a20:	d9eb      	bls.n	80009fa <HAL_RCC_OscConfig+0x1ee>
 8000a22:	e754      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a24:	696a      	ldr	r2, [r5, #20]
 8000a26:	4e43      	ldr	r6, [pc, #268]	; (8000b34 <HAL_RCC_OscConfig+0x328>)
 8000a28:	4943      	ldr	r1, [pc, #268]	; (8000b38 <HAL_RCC_OscConfig+0x32c>)
 8000a2a:	2401      	movs	r4, #1
 8000a2c:	b31a      	cbz	r2, 8000a76 <HAL_RCC_OscConfig+0x26a>
 8000a2e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000a32:	fab3 f383 	clz	r3, r3
 8000a36:	440b      	add	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	2702      	movs	r7, #2
 8000a3c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000a3e:	f7ff fbf7 	bl	8000230 <HAL_GetTick>
 8000a42:	4680      	mov	r8, r0
 8000a44:	fa97 f3a7 	rbit	r3, r7
 8000a48:	fa97 f3a7 	rbit	r3, r7
 8000a4c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a50:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a52:	fa97 f3a7 	rbit	r3, r7
 8000a56:	fab3 f383 	clz	r3, r3
 8000a5a:	f003 031f 	and.w	r3, r3, #31
 8000a5e:	fa04 f303 	lsl.w	r3, r4, r3
 8000a62:	4213      	tst	r3, r2
 8000a64:	f47f aee0 	bne.w	8000828 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fbe2 	bl	8000230 <HAL_GetTick>
 8000a6c:	eba0 0008 	sub.w	r0, r0, r8
 8000a70:	2802      	cmp	r0, #2
 8000a72:	d9e7      	bls.n	8000a44 <HAL_RCC_OscConfig+0x238>
 8000a74:	e72b      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
 8000a76:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000a7a:	fab3 f383 	clz	r3, r3
 8000a7e:	440b      	add	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	2702      	movs	r7, #2
 8000a84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a86:	f7ff fbd3 	bl	8000230 <HAL_GetTick>
 8000a8a:	4680      	mov	r8, r0
 8000a8c:	fa97 f3a7 	rbit	r3, r7
 8000a90:	fa97 f3a7 	rbit	r3, r7
 8000a94:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a9a:	fa97 f3a7 	rbit	r3, r7
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	fa04 f303 	lsl.w	r3, r4, r3
 8000aaa:	4213      	tst	r3, r2
 8000aac:	f43f aebc 	beq.w	8000828 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ab0:	f7ff fbbe 	bl	8000230 <HAL_GetTick>
 8000ab4:	eba0 0008 	sub.w	r0, r0, r8
 8000ab8:	2802      	cmp	r0, #2
 8000aba:	d9e7      	bls.n	8000a8c <HAL_RCC_OscConfig+0x280>
 8000abc:	e707      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000abe:	4c1d      	ldr	r4, [pc, #116]	; (8000b34 <HAL_RCC_OscConfig+0x328>)
 8000ac0:	69e3      	ldr	r3, [r4, #28]
 8000ac2:	00d9      	lsls	r1, r3, #3
 8000ac4:	d434      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	69e3      	ldr	r3, [r4, #28]
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	61e3      	str	r3, [r4, #28]
 8000ace:	69e3      	ldr	r3, [r4, #28]
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	9301      	str	r3, [sp, #4]
 8000ad6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ad8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ada:	4f18      	ldr	r7, [pc, #96]	; (8000b3c <HAL_RCC_OscConfig+0x330>)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	05da      	lsls	r2, r3, #23
 8000ae0:	d52e      	bpl.n	8000b40 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae2:	68ab      	ldr	r3, [r5, #8]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d13c      	bne.n	8000b62 <HAL_RCC_OscConfig+0x356>
 8000ae8:	6a23      	ldr	r3, [r4, #32]
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000af0:	f7ff fb9e 	bl	8000230 <HAL_GetTick>
 8000af4:	2702      	movs	r7, #2
 8000af6:	4682      	mov	sl, r0
 8000af8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afa:	f04f 0801 	mov.w	r8, #1
 8000afe:	fa97 f3a7 	rbit	r3, r7
 8000b02:	fa97 f3a7 	rbit	r3, r7
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d06b      	beq.n	8000be2 <HAL_RCC_OscConfig+0x3d6>
 8000b0a:	6a22      	ldr	r2, [r4, #32]
 8000b0c:	fa99 f3a9 	rbit	r3, r9
 8000b10:	fab3 f383 	clz	r3, r3
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	fa08 f303 	lsl.w	r3, r8, r3
 8000b1c:	4213      	tst	r3, r2
 8000b1e:	d057      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	f43f ae85 	beq.w	8000830 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b26:	69e3      	ldr	r3, [r4, #28]
 8000b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61e3      	str	r3, [r4, #28]
 8000b2e:	e67f      	b.n	8000830 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000b30:	2600      	movs	r6, #0
 8000b32:	e7d2      	b.n	8000ada <HAL_RCC_OscConfig+0x2ce>
 8000b34:	40021000 	.word	0x40021000
 8000b38:	10908120 	.word	0x10908120
 8000b3c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b46:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000b48:	f7ff fb72 	bl	8000230 <HAL_GetTick>
 8000b4c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	d4c6      	bmi.n	8000ae2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b54:	f7ff fb6c 	bl	8000230 <HAL_GetTick>
 8000b58:	eba0 0008 	sub.w	r0, r0, r8
 8000b5c:	2864      	cmp	r0, #100	; 0x64
 8000b5e:	d9f6      	bls.n	8000b4e <HAL_RCC_OscConfig+0x342>
 8000b60:	e6b5      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b62:	bb3b      	cbnz	r3, 8000bb4 <HAL_RCC_OscConfig+0x3a8>
 8000b64:	6a23      	ldr	r3, [r4, #32]
 8000b66:	f023 0301 	bic.w	r3, r3, #1
 8000b6a:	6223      	str	r3, [r4, #32]
 8000b6c:	6a23      	ldr	r3, [r4, #32]
 8000b6e:	f023 0304 	bic.w	r3, r3, #4
 8000b72:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b74:	f7ff fb5c 	bl	8000230 <HAL_GetTick>
 8000b78:	2702      	movs	r7, #2
 8000b7a:	4682      	mov	sl, r0
 8000b7c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7e:	f04f 0801 	mov.w	r8, #1
 8000b82:	fa97 f3a7 	rbit	r3, r7
 8000b86:	fa97 f3a7 	rbit	r3, r7
 8000b8a:	b373      	cbz	r3, 8000bea <HAL_RCC_OscConfig+0x3de>
 8000b8c:	6a22      	ldr	r2, [r4, #32]
 8000b8e:	fa99 f3a9 	rbit	r3, r9
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	fa08 f303 	lsl.w	r3, r8, r3
 8000b9e:	4213      	tst	r3, r2
 8000ba0:	d0be      	beq.n	8000b20 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fb45 	bl	8000230 <HAL_GetTick>
 8000ba6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000baa:	eba0 000a 	sub.w	r0, r0, sl
 8000bae:	4298      	cmp	r0, r3
 8000bb0:	d9e7      	bls.n	8000b82 <HAL_RCC_OscConfig+0x376>
 8000bb2:	e68c      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	6a23      	ldr	r3, [r4, #32]
 8000bb8:	d103      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x3b6>
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6223      	str	r3, [r4, #32]
 8000bc0:	e792      	b.n	8000ae8 <HAL_RCC_OscConfig+0x2dc>
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	6223      	str	r3, [r4, #32]
 8000bc8:	6a23      	ldr	r3, [r4, #32]
 8000bca:	f023 0304 	bic.w	r3, r3, #4
 8000bce:	e78e      	b.n	8000aee <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd0:	f7ff fb2e 	bl	8000230 <HAL_GetTick>
 8000bd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bd8:	eba0 000a 	sub.w	r0, r0, sl
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	d98e      	bls.n	8000afe <HAL_RCC_OscConfig+0x2f2>
 8000be0:	e675      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
 8000be2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000be6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000be8:	e790      	b.n	8000b0c <HAL_RCC_OscConfig+0x300>
 8000bea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bf0:	e7cd      	b.n	8000b8e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bf2:	4c44      	ldr	r4, [pc, #272]	; (8000d04 <HAL_RCC_OscConfig+0x4f8>)
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	f43f ae42 	beq.w	8000884 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c00:	2a02      	cmp	r2, #2
 8000c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c06:	d158      	bne.n	8000cba <HAL_RCC_OscConfig+0x4ae>
 8000c08:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fb07 	bl	8000230 <HAL_GetTick>
 8000c22:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000c26:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c28:	2601      	movs	r6, #1
 8000c2a:	fa97 f3a7 	rbit	r3, r7
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	fa97 f3a7 	rbit	r3, r7
 8000c34:	fab3 f383 	clz	r3, r3
 8000c38:	f003 031f 	and.w	r3, r3, #31
 8000c3c:	fa06 f303 	lsl.w	r3, r6, r3
 8000c40:	4213      	tst	r3, r2
 8000c42:	d133      	bne.n	8000cac <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c46:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c48:	f023 030f 	bic.w	r3, r3, #15
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c50:	6862      	ldr	r2, [r4, #4]
 8000c52:	6a2b      	ldr	r3, [r5, #32]
 8000c54:	69e9      	ldr	r1, [r5, #28]
 8000c56:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	6063      	str	r3, [r4, #4]
 8000c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c64:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000c68:	fab3 f383 	clz	r3, r3
 8000c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c7a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fad8 	bl	8000230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c80:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000c82:	4607      	mov	r7, r0
 8000c84:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c88:	6822      	ldr	r2, [r4, #0]
 8000c8a:	fa95 f3a5 	rbit	r3, r5
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	f003 031f 	and.w	r3, r3, #31
 8000c96:	fa06 f303 	lsl.w	r3, r6, r3
 8000c9a:	4213      	tst	r3, r2
 8000c9c:	f47f adcc 	bne.w	8000838 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca0:	f7ff fac6 	bl	8000230 <HAL_GetTick>
 8000ca4:	1bc0      	subs	r0, r0, r7
 8000ca6:	2802      	cmp	r0, #2
 8000ca8:	d9ec      	bls.n	8000c84 <HAL_RCC_OscConfig+0x478>
 8000caa:	e610      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cac:	f7ff fac0 	bl	8000230 <HAL_GetTick>
 8000cb0:	eba0 0008 	sub.w	r0, r0, r8
 8000cb4:	2802      	cmp	r0, #2
 8000cb6:	d9b8      	bls.n	8000c2a <HAL_RCC_OscConfig+0x41e>
 8000cb8:	e609      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
 8000cba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000cbe:	fab3 f383 	clz	r3, r3
 8000cc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cd0:	f7ff faae 	bl	8000230 <HAL_GetTick>
 8000cd4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000cd8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cda:	2601      	movs	r6, #1
 8000cdc:	fa95 f3a5 	rbit	r3, r5
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	fa95 f3a5 	rbit	r3, r5
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	fa06 f303 	lsl.w	r3, r6, r3
 8000cf2:	4213      	tst	r3, r2
 8000cf4:	f43f ada0 	beq.w	8000838 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cf8:	f7ff fa9a 	bl	8000230 <HAL_GetTick>
 8000cfc:	1bc0      	subs	r0, r0, r7
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d9ec      	bls.n	8000cdc <HAL_RCC_OscConfig+0x4d0>
 8000d02:	e5e4      	b.n	80008ce <HAL_RCC_OscConfig+0xc2>
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000d08:	4911      	ldr	r1, [pc, #68]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x48>)
 8000d0a:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d0c:	f003 020c 	and.w	r2, r3, #12
 8000d10:	2a08      	cmp	r2, #8
 8000d12:	d11a      	bne.n	8000d4a <HAL_RCC_GetSysClockFreq+0x42>
 8000d14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000d18:	fa92 f2a2 	rbit	r2, r2
 8000d1c:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d1e:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000d24:	fa90 f0a0 	rbit	r0, r0
 8000d28:	fab0 f080 	clz	r0, r0
 8000d2c:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d34:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d36:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d3c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <HAL_RCC_GetSysClockFreq+0x54>)
 8000d40:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000d44:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000d46:	4348      	muls	r0, r1
 8000d48:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000
 8000d54:	08001bbc 	.word	0x08001bbc
 8000d58:	08001bcc 	.word	0x08001bcc
 8000d5c:	007a1200 	.word	0x007a1200

08000d60 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d60:	4a5c      	ldr	r2, [pc, #368]	; (8000ed4 <HAL_RCC_ClockConfig+0x174>)
 8000d62:	6813      	ldr	r3, [r2, #0]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	428b      	cmp	r3, r1
{
 8000d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d72:	d330      	bcc.n	8000dd6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d74:	6832      	ldr	r2, [r6, #0]
 8000d76:	0791      	lsls	r1, r2, #30
 8000d78:	d43a      	bmi.n	8000df0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d7a:	07d2      	lsls	r2, r2, #31
 8000d7c:	d440      	bmi.n	8000e00 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d7e:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <HAL_RCC_ClockConfig+0x174>)
 8000d80:	6813      	ldr	r3, [r2, #0]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	429d      	cmp	r5, r3
 8000d88:	f0c0 8092 	bcc.w	8000eb0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d8c:	6832      	ldr	r2, [r6, #0]
 8000d8e:	4c52      	ldr	r4, [pc, #328]	; (8000ed8 <HAL_RCC_ClockConfig+0x178>)
 8000d90:	f012 0f04 	tst.w	r2, #4
 8000d94:	f040 8097 	bne.w	8000ec6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d98:	0713      	lsls	r3, r2, #28
 8000d9a:	d506      	bpl.n	8000daa <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	6932      	ldr	r2, [r6, #16]
 8000da0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000da4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000da8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000daa:	f7ff ffad 	bl	8000d08 <HAL_RCC_GetSysClockFreq>
 8000dae:	6863      	ldr	r3, [r4, #4]
 8000db0:	22f0      	movs	r2, #240	; 0xf0
 8000db2:	fa92 f2a2 	rbit	r2, r2
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dbe:	40d3      	lsrs	r3, r2
 8000dc0:	4a46      	ldr	r2, [pc, #280]	; (8000edc <HAL_RCC_ClockConfig+0x17c>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	40d8      	lsrs	r0, r3
 8000dc6:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <HAL_RCC_ClockConfig+0x180>)
 8000dc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff fa02 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000dd0:	2000      	movs	r0, #0
}
 8000dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	f023 0307 	bic.w	r3, r3, #7
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000de0:	6813      	ldr	r3, [r2, #0]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d0c4      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df0:	4939      	ldr	r1, [pc, #228]	; (8000ed8 <HAL_RCC_ClockConfig+0x178>)
 8000df2:	68b0      	ldr	r0, [r6, #8]
 8000df4:	684b      	ldr	r3, [r1, #4]
 8000df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	604b      	str	r3, [r1, #4]
 8000dfe:	e7bc      	b.n	8000d7a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e00:	6872      	ldr	r2, [r6, #4]
 8000e02:	4c35      	ldr	r4, [pc, #212]	; (8000ed8 <HAL_RCC_ClockConfig+0x178>)
 8000e04:	2a01      	cmp	r2, #1
 8000e06:	d128      	bne.n	8000e5a <HAL_RCC_ClockConfig+0xfa>
 8000e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e10:	6821      	ldr	r1, [r4, #0]
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	d0e1      	beq.n	8000dea <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e26:	6863      	ldr	r3, [r4, #4]
 8000e28:	f023 0303 	bic.w	r3, r3, #3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000e30:	f7ff f9fe 	bl	8000230 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e34:	6873      	ldr	r3, [r6, #4]
 8000e36:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000e38:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e3e:	d11f      	bne.n	8000e80 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e40:	6863      	ldr	r3, [r4, #4]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d099      	beq.n	8000d7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4a:	f7ff f9f1 	bl	8000230 <HAL_GetTick>
 8000e4e:	1bc0      	subs	r0, r0, r7
 8000e50:	4540      	cmp	r0, r8
 8000e52:	d9f5      	bls.n	8000e40 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e5a:	2a02      	cmp	r2, #2
 8000e5c:	bf0c      	ite	eq
 8000e5e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000e62:	2302      	movne	r3, #2
 8000e64:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	6820      	ldr	r0, [r4, #0]
 8000e6a:	fa93 f3a3 	rbit	r3, r3
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4203      	tst	r3, r0
 8000e7e:	e7d1      	b.n	8000e24 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d110      	bne.n	8000ea6 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	f43f af77 	beq.w	8000d7e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e90:	f7ff f9ce 	bl	8000230 <HAL_GetTick>
 8000e94:	1bc0      	subs	r0, r0, r7
 8000e96:	4540      	cmp	r0, r8
 8000e98:	d9f4      	bls.n	8000e84 <HAL_RCC_ClockConfig+0x124>
 8000e9a:	e7db      	b.n	8000e54 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9c:	f7ff f9c8 	bl	8000230 <HAL_GetTick>
 8000ea0:	1bc0      	subs	r0, r0, r7
 8000ea2:	4540      	cmp	r0, r8
 8000ea4:	d8d6      	bhi.n	8000e54 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea6:	6863      	ldr	r3, [r4, #4]
 8000ea8:	f013 0f0c 	tst.w	r3, #12
 8000eac:	d1f6      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x13c>
 8000eae:	e766      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb0:	6813      	ldr	r3, [r2, #0]
 8000eb2:	f023 0307 	bic.w	r3, r3, #7
 8000eb6:	432b      	orrs	r3, r5
 8000eb8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eba:	6813      	ldr	r3, [r2, #0]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	429d      	cmp	r5, r3
 8000ec2:	d192      	bne.n	8000dea <HAL_RCC_ClockConfig+0x8a>
 8000ec4:	e762      	b.n	8000d8c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	68f1      	ldr	r1, [r6, #12]
 8000eca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ece:	430b      	orrs	r3, r1
 8000ed0:	6063      	str	r3, [r4, #4]
 8000ed2:	e761      	b.n	8000d98 <HAL_RCC_ClockConfig+0x38>
 8000ed4:	40022000 	.word	0x40022000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	08001bf7 	.word	0x08001bf7
 8000ee0:	200000c8 	.word	0x200000c8

08000ee4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <HAL_RCC_GetHCLKFreq+0x8>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000c8 	.word	0x200000c8

08000ef0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ef0:	6803      	ldr	r3, [r0, #0]
{
 8000ef2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ef6:	03df      	lsls	r7, r3, #15
{
 8000ef8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000efa:	d523      	bpl.n	8000f44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efc:	4d9b      	ldr	r5, [pc, #620]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000efe:	69eb      	ldr	r3, [r5, #28]
 8000f00:	00de      	lsls	r6, r3, #3
 8000f02:	f100 80d7 	bmi.w	80010b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	69eb      	ldr	r3, [r5, #28]
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	61eb      	str	r3, [r5, #28]
 8000f0e:	69eb      	ldr	r3, [r5, #28]
 8000f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f18:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	4f95      	ldr	r7, [pc, #596]	; (8001170 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	05d8      	lsls	r0, r3, #23
 8000f20:	f140 80ca 	bpl.w	80010b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000f24:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f26:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000f2a:	f040 80da 	bne.w	80010e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000f2e:	6a2b      	ldr	r3, [r5, #32]
 8000f30:	6862      	ldr	r2, [r4, #4]
 8000f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f36:	4313      	orrs	r3, r2
 8000f38:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f3a:	b11e      	cbz	r6, 8000f44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3c:	69eb      	ldr	r3, [r5, #28]
 8000f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f42:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f44:	6820      	ldr	r0, [r4, #0]
 8000f46:	07c3      	lsls	r3, r0, #31
 8000f48:	d506      	bpl.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f4a:	4a88      	ldr	r2, [pc, #544]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f4c:	68a1      	ldr	r1, [r4, #8]
 8000f4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f50:	f023 0303 	bic.w	r3, r3, #3
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f58:	0787      	lsls	r7, r0, #30
 8000f5a:	d506      	bpl.n	8000f6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f5c:	4a83      	ldr	r2, [pc, #524]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f5e:	68e1      	ldr	r1, [r4, #12]
 8000f60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f66:	430b      	orrs	r3, r1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000f6a:	0746      	lsls	r6, r0, #29
 8000f6c:	d506      	bpl.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000f6e:	4a7f      	ldr	r2, [pc, #508]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f70:	6921      	ldr	r1, [r4, #16]
 8000f72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f74:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f7c:	0685      	lsls	r5, r0, #26
 8000f7e:	d506      	bpl.n	8000f8e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f80:	4a7a      	ldr	r2, [pc, #488]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f82:	69e1      	ldr	r1, [r4, #28]
 8000f84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f86:	f023 0310 	bic.w	r3, r3, #16
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000f8e:	0381      	lsls	r1, r0, #14
 8000f90:	d506      	bpl.n	8000fa0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000f92:	4a76      	ldr	r2, [pc, #472]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000f94:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000f96:	6853      	ldr	r3, [r2, #4]
 8000f98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000fa0:	0642      	lsls	r2, r0, #25
 8000fa2:	d506      	bpl.n	8000fb2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000fa4:	4a71      	ldr	r2, [pc, #452]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fa6:	6a21      	ldr	r1, [r4, #32]
 8000fa8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000faa:	f023 0320 	bic.w	r3, r3, #32
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000fb2:	0343      	lsls	r3, r0, #13
 8000fb4:	d506      	bpl.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000fb6:	4a6d      	ldr	r2, [pc, #436]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000fba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000fc4:	0707      	lsls	r7, r0, #28
 8000fc6:	d506      	bpl.n	8000fd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000fc8:	4a68      	ldr	r2, [pc, #416]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fca:	6961      	ldr	r1, [r4, #20]
 8000fcc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000fd6:	06c6      	lsls	r6, r0, #27
 8000fd8:	d506      	bpl.n	8000fe8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000fda:	4a64      	ldr	r2, [pc, #400]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fdc:	69a1      	ldr	r1, [r4, #24]
 8000fde:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000fe0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000fe8:	0585      	lsls	r5, r0, #22
 8000fea:	d506      	bpl.n	8000ffa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000fec:	4a5f      	ldr	r2, [pc, #380]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000fee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ff0:	6853      	ldr	r3, [r2, #4]
 8000ff2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000ffa:	0601      	lsls	r1, r0, #24
 8000ffc:	d506      	bpl.n	800100c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000ffe:	4a5b      	ldr	r2, [pc, #364]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001000:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001004:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001008:	430b      	orrs	r3, r1
 800100a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800100c:	05c2      	lsls	r2, r0, #23
 800100e:	d506      	bpl.n	800101e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001012:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001014:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001016:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800101a:	430b      	orrs	r3, r1
 800101c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800101e:	04c3      	lsls	r3, r0, #19
 8001020:	d506      	bpl.n	8001030 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001022:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001026:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102c:	430b      	orrs	r3, r1
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001030:	0487      	lsls	r7, r0, #18
 8001032:	d506      	bpl.n	8001042 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001034:	4a4d      	ldr	r2, [pc, #308]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001036:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001038:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800103a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800103e:	430b      	orrs	r3, r1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001042:	02c6      	lsls	r6, r0, #11
 8001044:	d506      	bpl.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001046:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001048:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800104a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800104c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001050:	430b      	orrs	r3, r1
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001054:	0285      	lsls	r5, r0, #10
 8001056:	d506      	bpl.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001058:	4a44      	ldr	r2, [pc, #272]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800105a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800105c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800105e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001062:	430b      	orrs	r3, r1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001066:	0241      	lsls	r1, r0, #9
 8001068:	d506      	bpl.n	8001078 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800106c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800106e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001074:	430b      	orrs	r3, r1
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001078:	0202      	lsls	r2, r0, #8
 800107a:	d506      	bpl.n	800108a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800107c:	4a3b      	ldr	r2, [pc, #236]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800107e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001080:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001086:	430b      	orrs	r3, r1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800108a:	01c3      	lsls	r3, r0, #7
 800108c:	d506      	bpl.n	800109c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800108e:	4a37      	ldr	r2, [pc, #220]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001090:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001092:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001098:	430b      	orrs	r3, r1
 800109a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800109c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80010a0:	d01c      	beq.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80010a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80010a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80010b0:	2000      	movs	r0, #0
 80010b2:	e013      	b.n	80010dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80010b4:	2600      	movs	r6, #0
 80010b6:	e730      	b.n	8000f1a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80010c0:	f7ff f8b6 	bl	8000230 <HAL_GetTick>
 80010c4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	05d9      	lsls	r1, r3, #23
 80010ca:	f53f af2b 	bmi.w	8000f24 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff f8af 	bl	8000230 <HAL_GetTick>
 80010d2:	eba0 0008 	sub.w	r0, r0, r8
 80010d6:	2864      	cmp	r0, #100	; 0x64
 80010d8:	d9f5      	bls.n	80010c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80010da:	2003      	movs	r0, #3
}
 80010dc:	b002      	add	sp, #8
 80010de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80010e8:	4293      	cmp	r3, r2
 80010ea:	f43f af20 	beq.w	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010ee:	6a29      	ldr	r1, [r5, #32]
 80010f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80010f8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80010fc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001174 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001100:	fab2 f282 	clz	r2, r2
 8001104:	4472      	add	r2, lr
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	2701      	movs	r7, #1
 800110a:	6017      	str	r7, [r2, #0]
 800110c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	4473      	add	r3, lr
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800111c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800111e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001120:	f57f af05 	bpl.w	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001124:	f7ff f884 	bl	8000230 <HAL_GetTick>
 8001128:	f04f 0802 	mov.w	r8, #2
 800112c:	4682      	mov	sl, r0
 800112e:	46c1      	mov	r9, r8
 8001130:	fa98 f3a8 	rbit	r3, r8
 8001134:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	b1a3      	cbz	r3, 8001164 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800113a:	6a2a      	ldr	r2, [r5, #32]
 800113c:	fa99 f3a9 	rbit	r3, r9
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	fa07 f303 	lsl.w	r3, r7, r3
 800114c:	4213      	tst	r3, r2
 800114e:	f47f aeee 	bne.w	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff f86d 	bl	8000230 <HAL_GetTick>
 8001156:	f241 3388 	movw	r3, #5000	; 0x1388
 800115a:	eba0 000a 	sub.w	r0, r0, sl
 800115e:	4298      	cmp	r0, r3
 8001160:	d9e6      	bls.n	8001130 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001162:	e7ba      	b.n	80010da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001164:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001168:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800116a:	e7e7      	b.n	800113c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800116c:	40021000 	.word	0x40021000
 8001170:	40007000 	.word	0x40007000
 8001174:	10908100 	.word	0x10908100

08001178 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001178:	4a32      	ldr	r2, [pc, #200]	; (8001244 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800117a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800117c:	4290      	cmp	r0, r2
 800117e:	d012      	beq.n	80011a6 <TIM_Base_SetConfig+0x2e>
 8001180:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001184:	d00f      	beq.n	80011a6 <TIM_Base_SetConfig+0x2e>
 8001186:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800118a:	4290      	cmp	r0, r2
 800118c:	d00b      	beq.n	80011a6 <TIM_Base_SetConfig+0x2e>
 800118e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001192:	4290      	cmp	r0, r2
 8001194:	d007      	beq.n	80011a6 <TIM_Base_SetConfig+0x2e>
 8001196:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800119a:	4290      	cmp	r0, r2
 800119c:	d003      	beq.n	80011a6 <TIM_Base_SetConfig+0x2e>
 800119e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80011a2:	4290      	cmp	r0, r2
 80011a4:	d115      	bne.n	80011d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80011a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011ac:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011ae:	4a25      	ldr	r2, [pc, #148]	; (8001244 <TIM_Base_SetConfig+0xcc>)
 80011b0:	4290      	cmp	r0, r2
 80011b2:	d01d      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011b8:	d01a      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011be:	4290      	cmp	r0, r2
 80011c0:	d016      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c6:	4290      	cmp	r0, r2
 80011c8:	d012      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011ca:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80011ce:	4290      	cmp	r0, r2
 80011d0:	d00e      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <TIM_Base_SetConfig+0xd0>)
 80011d4:	4290      	cmp	r0, r2
 80011d6:	d00b      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011dc:	4290      	cmp	r0, r2
 80011de:	d007      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d003      	beq.n	80011f0 <TIM_Base_SetConfig+0x78>
 80011e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011ec:	4290      	cmp	r0, r2
 80011ee:	d103      	bne.n	80011f8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011f0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011f6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011f8:	694a      	ldr	r2, [r1, #20]
 80011fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011fe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001200:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001202:	688b      	ldr	r3, [r1, #8]
 8001204:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001206:	680b      	ldr	r3, [r1, #0]
 8001208:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <TIM_Base_SetConfig+0xcc>)
 800120c:	4298      	cmp	r0, r3
 800120e:	d013      	beq.n	8001238 <TIM_Base_SetConfig+0xc0>
 8001210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001214:	4298      	cmp	r0, r3
 8001216:	d00f      	beq.n	8001238 <TIM_Base_SetConfig+0xc0>
 8001218:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800121c:	4298      	cmp	r0, r3
 800121e:	d00b      	beq.n	8001238 <TIM_Base_SetConfig+0xc0>
 8001220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001224:	4298      	cmp	r0, r3
 8001226:	d007      	beq.n	8001238 <TIM_Base_SetConfig+0xc0>
 8001228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800122c:	4298      	cmp	r0, r3
 800122e:	d003      	beq.n	8001238 <TIM_Base_SetConfig+0xc0>
 8001230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001234:	4298      	cmp	r0, r3
 8001236:	d101      	bne.n	800123c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001238:	690b      	ldr	r3, [r1, #16]
 800123a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800123c:	2301      	movs	r3, #1
 800123e:	6143      	str	r3, [r0, #20]
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40014000 	.word	0x40014000

0800124c <HAL_TIM_PWM_Init>:
{
 800124c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800124e:	4604      	mov	r4, r0
 8001250:	b1a0      	cbz	r0, 800127c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001252:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800125a:	b91b      	cbnz	r3, 8001264 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800125c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001260:	f000 fbdc 	bl	8001a1c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001264:	2302      	movs	r3, #2
 8001266:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800126a:	6820      	ldr	r0, [r4, #0]
 800126c:	1d21      	adds	r1, r4, #4
 800126e:	f7ff ff83 	bl	8001178 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001272:	2301      	movs	r3, #1
 8001274:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001278:	2000      	movs	r0, #0
 800127a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800127c:	2001      	movs	r0, #1
}
 800127e:	bd10      	pop	{r4, pc}

08001280 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001280:	6a03      	ldr	r3, [r0, #32]
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001288:	6a03      	ldr	r3, [r0, #32]
{
 800128a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800128c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800128e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001290:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001292:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001296:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800129a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800129c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800129e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80012a2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80012a4:	4d1f      	ldr	r5, [pc, #124]	; (8001324 <TIM_OC1_SetConfig+0xa4>)
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d013      	beq.n	80012d2 <TIM_OC1_SetConfig+0x52>
 80012aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012ae:	42a8      	cmp	r0, r5
 80012b0:	d00f      	beq.n	80012d2 <TIM_OC1_SetConfig+0x52>
 80012b2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80012b6:	42a8      	cmp	r0, r5
 80012b8:	d00b      	beq.n	80012d2 <TIM_OC1_SetConfig+0x52>
 80012ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012be:	42a8      	cmp	r0, r5
 80012c0:	d007      	beq.n	80012d2 <TIM_OC1_SetConfig+0x52>
 80012c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d003      	beq.n	80012d2 <TIM_OC1_SetConfig+0x52>
 80012ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d122      	bne.n	8001318 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80012d2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80012d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80012d8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80012da:	4d12      	ldr	r5, [pc, #72]	; (8001324 <TIM_OC1_SetConfig+0xa4>)
 80012dc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80012de:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80012e2:	d013      	beq.n	800130c <TIM_OC1_SetConfig+0x8c>
 80012e4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80012e8:	42a8      	cmp	r0, r5
 80012ea:	d00f      	beq.n	800130c <TIM_OC1_SetConfig+0x8c>
 80012ec:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80012f0:	42a8      	cmp	r0, r5
 80012f2:	d00b      	beq.n	800130c <TIM_OC1_SetConfig+0x8c>
 80012f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012f8:	42a8      	cmp	r0, r5
 80012fa:	d007      	beq.n	800130c <TIM_OC1_SetConfig+0x8c>
 80012fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001300:	42a8      	cmp	r0, r5
 8001302:	d003      	beq.n	800130c <TIM_OC1_SetConfig+0x8c>
 8001304:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001308:	42a8      	cmp	r0, r5
 800130a:	d105      	bne.n	8001318 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800130c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001310:	698e      	ldr	r6, [r1, #24]
 8001312:	694c      	ldr	r4, [r1, #20]
 8001314:	4334      	orrs	r4, r6
 8001316:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001318:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800131a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800131c:	684a      	ldr	r2, [r1, #4]
 800131e:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001320:	6203      	str	r3, [r0, #32]
 8001322:	bd70      	pop	{r4, r5, r6, pc}
 8001324:	40012c00 	.word	0x40012c00

08001328 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001328:	6a03      	ldr	r3, [r0, #32]
 800132a:	f023 0310 	bic.w	r3, r3, #16
 800132e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001330:	6a03      	ldr	r3, [r0, #32]
{
 8001332:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001334:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001336:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001338:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800133a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800133e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001342:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001346:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001348:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800134c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001350:	4d1a      	ldr	r5, [pc, #104]	; (80013bc <TIM_OC2_SetConfig+0x94>)
 8001352:	42a8      	cmp	r0, r5
 8001354:	d007      	beq.n	8001366 <TIM_OC2_SetConfig+0x3e>
 8001356:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800135a:	42a8      	cmp	r0, r5
 800135c:	d003      	beq.n	8001366 <TIM_OC2_SetConfig+0x3e>
 800135e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001362:	42a8      	cmp	r0, r5
 8001364:	d10d      	bne.n	8001382 <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001366:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800136c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001370:	4d12      	ldr	r5, [pc, #72]	; (80013bc <TIM_OC2_SetConfig+0x94>)
 8001372:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001378:	d012      	beq.n	80013a0 <TIM_OC2_SetConfig+0x78>
 800137a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800137e:	42a8      	cmp	r0, r5
 8001380:	d00e      	beq.n	80013a0 <TIM_OC2_SetConfig+0x78>
 8001382:	4d0f      	ldr	r5, [pc, #60]	; (80013c0 <TIM_OC2_SetConfig+0x98>)
 8001384:	42a8      	cmp	r0, r5
 8001386:	d00b      	beq.n	80013a0 <TIM_OC2_SetConfig+0x78>
 8001388:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800138c:	42a8      	cmp	r0, r5
 800138e:	d007      	beq.n	80013a0 <TIM_OC2_SetConfig+0x78>
 8001390:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001394:	42a8      	cmp	r0, r5
 8001396:	d003      	beq.n	80013a0 <TIM_OC2_SetConfig+0x78>
 8001398:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800139c:	42a8      	cmp	r0, r5
 800139e:	d106      	bne.n	80013ae <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80013a0:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013a4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80013a6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013a8:	4334      	orrs	r4, r6
 80013aa:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013ae:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013b0:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80013b2:	684a      	ldr	r2, [r1, #4]
 80013b4:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80013b6:	6203      	str	r3, [r0, #32]
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
 80013ba:	bf00      	nop
 80013bc:	40012c00 	.word	0x40012c00
 80013c0:	40014000 	.word	0x40014000

080013c4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80013c4:	6a03      	ldr	r3, [r0, #32]
 80013c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013cc:	6a03      	ldr	r3, [r0, #32]
{
 80013ce:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80013d0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80013d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013da:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013de:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013e0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80013ea:	4d1a      	ldr	r5, [pc, #104]	; (8001454 <TIM_OC3_SetConfig+0x90>)
 80013ec:	42a8      	cmp	r0, r5
 80013ee:	d007      	beq.n	8001400 <TIM_OC3_SetConfig+0x3c>
 80013f0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013f4:	42a8      	cmp	r0, r5
 80013f6:	d003      	beq.n	8001400 <TIM_OC3_SetConfig+0x3c>
 80013f8:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80013fc:	42a8      	cmp	r0, r5
 80013fe:	d10d      	bne.n	800141c <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001400:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001406:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800140a:	4d12      	ldr	r5, [pc, #72]	; (8001454 <TIM_OC3_SetConfig+0x90>)
 800140c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800140e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001412:	d012      	beq.n	800143a <TIM_OC3_SetConfig+0x76>
 8001414:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001418:	42a8      	cmp	r0, r5
 800141a:	d00e      	beq.n	800143a <TIM_OC3_SetConfig+0x76>
 800141c:	4d0e      	ldr	r5, [pc, #56]	; (8001458 <TIM_OC3_SetConfig+0x94>)
 800141e:	42a8      	cmp	r0, r5
 8001420:	d00b      	beq.n	800143a <TIM_OC3_SetConfig+0x76>
 8001422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001426:	42a8      	cmp	r0, r5
 8001428:	d007      	beq.n	800143a <TIM_OC3_SetConfig+0x76>
 800142a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800142e:	42a8      	cmp	r0, r5
 8001430:	d003      	beq.n	800143a <TIM_OC3_SetConfig+0x76>
 8001432:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001436:	42a8      	cmp	r0, r5
 8001438:	d106      	bne.n	8001448 <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800143a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800143e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001440:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001442:	4334      	orrs	r4, r6
 8001444:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001448:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800144a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800144c:	684a      	ldr	r2, [r1, #4]
 800144e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001450:	6203      	str	r3, [r0, #32]
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	40012c00 	.word	0x40012c00
 8001458:	40014000 	.word	0x40014000

0800145c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800145c:	6a03      	ldr	r3, [r0, #32]
 800145e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001462:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001464:	6a03      	ldr	r3, [r0, #32]
{
 8001466:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001468:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800146a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800146c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800146e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001472:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001476:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800147a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800147c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001480:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001484:	4d10      	ldr	r5, [pc, #64]	; (80014c8 <TIM_OC4_SetConfig+0x6c>)
 8001486:	42a8      	cmp	r0, r5
 8001488:	d013      	beq.n	80014b2 <TIM_OC4_SetConfig+0x56>
 800148a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800148e:	42a8      	cmp	r0, r5
 8001490:	d00f      	beq.n	80014b2 <TIM_OC4_SetConfig+0x56>
 8001492:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001496:	42a8      	cmp	r0, r5
 8001498:	d00b      	beq.n	80014b2 <TIM_OC4_SetConfig+0x56>
 800149a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800149e:	42a8      	cmp	r0, r5
 80014a0:	d007      	beq.n	80014b2 <TIM_OC4_SetConfig+0x56>
 80014a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014a6:	42a8      	cmp	r0, r5
 80014a8:	d003      	beq.n	80014b2 <TIM_OC4_SetConfig+0x56>
 80014aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80014ae:	42a8      	cmp	r0, r5
 80014b0:	d104      	bne.n	80014bc <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80014b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80014b4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80014b8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014bc:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014be:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80014c0:	684a      	ldr	r2, [r1, #4]
 80014c2:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80014c4:	6203      	str	r3, [r0, #32]
 80014c6:	bd30      	pop	{r4, r5, pc}
 80014c8:	40012c00 	.word	0x40012c00

080014cc <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80014cc:	6a03      	ldr	r3, [r0, #32]
{
 80014ce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80014d0:	2401      	movs	r4, #1
 80014d2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80014d4:	ea23 0304 	bic.w	r3, r3, r4
 80014d8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80014da:	6a03      	ldr	r3, [r0, #32]
 80014dc:	408a      	lsls	r2, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	6202      	str	r2, [r0, #32]
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <HAL_TIM_PWM_Start>:
{
 80014e4:	b510      	push	{r4, lr}
 80014e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014e8:	2201      	movs	r2, #1
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	f7ff ffee 	bl	80014cc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_TIM_PWM_Start+0x50>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_TIM_PWM_Start+0x3c>
 80014f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00f      	beq.n	8001520 <HAL_TIM_PWM_Start+0x3c>
 8001500:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001504:	4293      	cmp	r3, r2
 8001506:	d00b      	beq.n	8001520 <HAL_TIM_PWM_Start+0x3c>
 8001508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <HAL_TIM_PWM_Start+0x3c>
 8001510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001514:	4293      	cmp	r3, r2
 8001516:	d003      	beq.n	8001520 <HAL_TIM_PWM_Start+0x3c>
 8001518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8001520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
} 
 8001530:	2000      	movs	r0, #0
 8001532:	bd10      	pop	{r4, pc}
 8001534:	40012c00 	.word	0x40012c00

08001538 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001538:	6a03      	ldr	r3, [r0, #32]
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001540:	6a03      	ldr	r3, [r0, #32]
{
 8001542:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001544:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001546:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001548:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800154a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800154e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001552:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001554:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001556:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800155a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800155e:	4d11      	ldr	r5, [pc, #68]	; (80015a4 <TIM_OC5_SetConfig+0x6c>)
 8001560:	42a8      	cmp	r0, r5
 8001562:	d013      	beq.n	800158c <TIM_OC5_SetConfig+0x54>
 8001564:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001568:	42a8      	cmp	r0, r5
 800156a:	d00f      	beq.n	800158c <TIM_OC5_SetConfig+0x54>
 800156c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001570:	42a8      	cmp	r0, r5
 8001572:	d00b      	beq.n	800158c <TIM_OC5_SetConfig+0x54>
 8001574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001578:	42a8      	cmp	r0, r5
 800157a:	d007      	beq.n	800158c <TIM_OC5_SetConfig+0x54>
 800157c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001580:	42a8      	cmp	r0, r5
 8001582:	d003      	beq.n	800158c <TIM_OC5_SetConfig+0x54>
 8001584:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001588:	42a8      	cmp	r0, r5
 800158a:	d104      	bne.n	8001596 <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800158c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800158e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001592:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001596:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001598:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800159a:	684a      	ldr	r2, [r1, #4]
 800159c:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800159e:	6203      	str	r3, [r0, #32]
 80015a0:	bd30      	pop	{r4, r5, pc}
 80015a2:	bf00      	nop
 80015a4:	40012c00 	.word	0x40012c00

080015a8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80015a8:	6a03      	ldr	r3, [r0, #32]
 80015aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015ae:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015b0:	6a03      	ldr	r3, [r0, #32]
{
 80015b2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80015b4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80015b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80015ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80015be:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80015c6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80015c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80015cc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015d0:	4d10      	ldr	r5, [pc, #64]	; (8001614 <TIM_OC6_SetConfig+0x6c>)
 80015d2:	42a8      	cmp	r0, r5
 80015d4:	d013      	beq.n	80015fe <TIM_OC6_SetConfig+0x56>
 80015d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015da:	42a8      	cmp	r0, r5
 80015dc:	d00f      	beq.n	80015fe <TIM_OC6_SetConfig+0x56>
 80015de:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80015e2:	42a8      	cmp	r0, r5
 80015e4:	d00b      	beq.n	80015fe <TIM_OC6_SetConfig+0x56>
 80015e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ea:	42a8      	cmp	r0, r5
 80015ec:	d007      	beq.n	80015fe <TIM_OC6_SetConfig+0x56>
 80015ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f2:	42a8      	cmp	r0, r5
 80015f4:	d003      	beq.n	80015fe <TIM_OC6_SetConfig+0x56>
 80015f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80015fa:	42a8      	cmp	r0, r5
 80015fc:	d104      	bne.n	8001608 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80015fe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001600:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001604:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001608:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800160a:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800160c:	684a      	ldr	r2, [r1, #4]
 800160e:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001610:	6203      	str	r3, [r0, #32]
 8001612:	bd30      	pop	{r4, r5, pc}
 8001614:	40012c00 	.word	0x40012c00

08001618 <HAL_TIM_PWM_ConfigChannel>:
{
 8001618:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800161a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800161e:	2b01      	cmp	r3, #1
{
 8001620:	4604      	mov	r4, r0
 8001622:	460d      	mov	r5, r1
 8001624:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001628:	d010      	beq.n	800164c <HAL_TIM_PWM_ConfigChannel+0x34>
 800162a:	2301      	movs	r3, #1
  switch (Channel)
 800162c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800162e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001632:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001636:	d043      	beq.n	80016c0 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001638:	d809      	bhi.n	800164e <HAL_TIM_PWM_ConfigChannel+0x36>
 800163a:	b1fa      	cbz	r2, 800167c <HAL_TIM_PWM_ConfigChannel+0x64>
 800163c:	2a04      	cmp	r2, #4
 800163e:	d02e      	beq.n	800169e <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001640:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001642:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001648:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800164c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800164e:	2a10      	cmp	r2, #16
 8001650:	d047      	beq.n	80016e2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001652:	2a14      	cmp	r2, #20
 8001654:	d056      	beq.n	8001704 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001656:	2a0c      	cmp	r2, #12
 8001658:	d1f2      	bne.n	8001640 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800165a:	6820      	ldr	r0, [r4, #0]
 800165c:	f7ff fefe 	bl	800145c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001660:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001662:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800166a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800166c:	69da      	ldr	r2, [r3, #28]
 800166e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001672:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800167a:	e030      	b.n	80016de <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	f7ff fdff 	bl	8001280 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001682:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001684:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001686:	699a      	ldr	r2, [r3, #24]
 8001688:	f042 0208 	orr.w	r2, r2, #8
 800168c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	f022 0204 	bic.w	r2, r2, #4
 8001694:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001696:	699a      	ldr	r2, [r3, #24]
 8001698:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800169a:	619a      	str	r2, [r3, #24]
    break;
 800169c:	e7d0      	b.n	8001640 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800169e:	6820      	ldr	r0, [r4, #0]
 80016a0:	f7ff fe42 	bl	8001328 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016a6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016be:	e7ec      	b.n	800169a <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80016c0:	6820      	ldr	r0, [r4, #0]
 80016c2:	f7ff fe7f 	bl	80013c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80016c8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	f042 0208 	orr.w	r2, r2, #8
 80016d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	f022 0204 	bic.w	r2, r2, #4
 80016d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80016de:	61da      	str	r2, [r3, #28]
    break;
 80016e0:	e7ae      	b.n	8001640 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80016e2:	6820      	ldr	r0, [r4, #0]
 80016e4:	f7ff ff28 	bl	8001538 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80016e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80016ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80016ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016ee:	f042 0208 	orr.w	r2, r2, #8
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80016f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016f6:	f022 0204 	bic.w	r2, r2, #4
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80016fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016fe:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001702:	e79d      	b.n	8001640 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001704:	6820      	ldr	r0, [r4, #0]
 8001706:	f7ff ff4f 	bl	80015a8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800170a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800170c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800170e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001714:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800171e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001720:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001724:	e7ec      	b.n	8001700 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08001728 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001728:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800172c:	2b01      	cmp	r3, #1
{
 800172e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001730:	d020      	beq.n	8001774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 8001732:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001734:	4d10      	ldr	r5, [pc, #64]	; (8001778 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8001736:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001738:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800173a:	42aa      	cmp	r2, r5
 800173c:	d007      	beq.n	800174e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800173e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001742:	42aa      	cmp	r2, r5
 8001744:	d003      	beq.n	800174e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8001746:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800174a:	42aa      	cmp	r2, r5
 800174c:	d103      	bne.n	8001756 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800174e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001750:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001754:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001756:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001758:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800175a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800175e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001760:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001764:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001766:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001768:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800176a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800176c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001770:	4618      	mov	r0, r3
 8001772:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001774:	2002      	movs	r0, #2
} 
 8001776:	bd30      	pop	{r4, r5, pc}
 8001778:	40012c00 	.word	0x40012c00

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b510      	push	{r4, lr}
 800177e:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001780:	2302      	movs	r3, #2
 8001782:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001784:	2301      	movs	r3, #1
 8001786:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001788:	2310      	movs	r3, #16
 800178a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800178e:	2300      	movs	r3, #0
 8001790:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f7ff f83b 	bl	800080c <HAL_RCC_OscConfig>
 8001796:	4601      	mov	r1, r0
 8001798:	b100      	cbz	r0, 800179c <SystemClock_Config+0x20>
 800179a:	e7fe      	b.n	800179a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179c:	230f      	movs	r3, #15
 800179e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017a0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80017a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017aa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80017ac:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ae:	f7ff fad7 	bl	8000d60 <HAL_RCC_ClockConfig>
 80017b2:	b100      	cbz	r0, 80017b6 <SystemClock_Config+0x3a>
 80017b4:	e7fe      	b.n	80017b4 <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM34;
 80017b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80017ba:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM34;
 80017be:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f7ff fb96 	bl	8000ef0 <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4604      	mov	r4, r0
 80017c6:	b100      	cbz	r0, 80017ca <SystemClock_Config+0x4e>
 80017c8:	e7fe      	b.n	80017c8 <SystemClock_Config+0x4c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017ca:	f7ff fb8b 	bl	8000ee4 <HAL_RCC_GetHCLKFreq>
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80017d6:	f7fe fd83 	bl	80002e0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017da:	2004      	movs	r0, #4
 80017dc:	f7fe fd96 	bl	800030c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017e0:	4622      	mov	r2, r4
 80017e2:	4621      	mov	r1, r4
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7fe fd3a 	bl	8000260 <HAL_NVIC_SetPriority>
}
 80017ec:	b026      	add	sp, #152	; 0x98
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <main>:
{
 80017f0:	b500      	push	{lr}
 80017f2:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80017f4:	f7fe fd02 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 80017f8:	f7ff ffc0 	bl	800177c <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <main+0x100>)
  htim3.Instance = TIM3;
 80017fe:	4c3d      	ldr	r4, [pc, #244]	; (80018f4 <main+0x104>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800180e:	9203      	str	r2, [sp, #12]
 8001810:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001820:	9204      	str	r2, [sp, #16]
 8001822:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001832:	9205      	str	r2, [sp, #20]
 8001834:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001848:	4611      	mov	r1, r2
 800184a:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800184e:	f7fe fd07 	bl	8000260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001852:	200e      	movs	r0, #14
 8001854:	f7fe fd38 	bl	80002c8 <HAL_NVIC_EnableIRQ>
  htim3.Init.Prescaler = 9999;
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <main+0x108>)
 800185a:	f242 760f 	movw	r6, #9999	; 0x270f
 800185e:	e884 0048 	stmia.w	r4, {r3, r6}
  htim3.Init.Period = 1;
 8001862:	2501      	movs	r5, #1
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001866:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 1;
 800186a:	60e5      	str	r5, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001870:	f7ff fcec 	bl	800124c <HAL_TIM_PWM_Init>
 8001874:	b100      	cbz	r0, 8001878 <main+0x88>
 8001876:	e7fe      	b.n	8001876 <main+0x86>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001878:	2370      	movs	r3, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800187c:	a906      	add	r1, sp, #24
 800187e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001880:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001882:	f7ff ff51 	bl	8001728 <HAL_TIMEx_MasterConfigSynchronization>
 8001886:	b100      	cbz	r0, 800188a <main+0x9a>
 8001888:	e7fe      	b.n	8001888 <main+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188e:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001890:	220c      	movs	r2, #12
 8001892:	a909      	add	r1, sp, #36	; 0x24
 8001894:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001896:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8001898:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800189a:	f7ff febd 	bl	8001618 <HAL_TIM_PWM_ConfigChannel>
 800189e:	b100      	cbz	r0, 80018a2 <main+0xb2>
 80018a0:	e7fe      	b.n	80018a0 <main+0xb0>
  hdac1.Instance = DAC1;
 80018a2:	4d16      	ldr	r5, [pc, #88]	; (80018fc <main+0x10c>)
  HAL_TIM_MspPostInit(&htim3);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f000 f8cd 	bl	8001a44 <HAL_TIM_MspPostInit>
  hdac1.Instance = DAC1;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <main+0x110>)
 80018ac:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80018ae:	4628      	mov	r0, r5
 80018b0:	f7fe fd3d 	bl	800032e <HAL_DAC_Init>
 80018b4:	b100      	cbz	r0, 80018b8 <main+0xc8>
 80018b6:	e7fe      	b.n	80018b6 <main+0xc6>
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 80018b8:	260c      	movs	r6, #12
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018ba:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018bc:	2210      	movs	r2, #16
 80018be:	a909      	add	r1, sp, #36	; 0x24
 80018c0:	4628      	mov	r0, r5
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 80018c2:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018c4:	f7fe fdc4 	bl	8000450 <HAL_DAC_ConfigChannel>
 80018c8:	b100      	cbz	r0, 80018cc <main+0xdc>
 80018ca:	e7fe      	b.n	80018ca <main+0xda>
  __HAL_REMAPTRIGGER_ENABLE(HAL_REMAPTRIGGER_DAC1_TRIG);
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <main+0x114>)
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6013      	str	r3, [r2, #0]
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,sine,100,DAC_ALIGN_12B_R);
 80018d6:	2110      	movs	r1, #16
 80018d8:	9000      	str	r0, [sp, #0]
 80018da:	2364      	movs	r3, #100	; 0x64
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <main+0x118>)
 80018de:	4628      	mov	r0, r5
 80018e0:	f7fe fd52 	bl	8000388 <HAL_DAC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80018e4:	4631      	mov	r1, r6
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fdfc 	bl	80014e4 <HAL_TIM_PWM_Start>
 80018ec:	e7fe      	b.n	80018ec <main+0xfc>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	20000144 	.word	0x20000144
 80018f8:	40000400 	.word	0x40000400
 80018fc:	20000130 	.word	0x20000130
 8001900:	40007400 	.word	0x40007400
 8001904:	40010000 	.word	0x40010000
 8001908:	20000000 	.word	0x20000000

0800190c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800190c:	e7fe      	b.n	800190c <_Error_Handler>
	...

08001910 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_MspInit+0x78>)
{
 8001912:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	619a      	str	r2, [r3, #24]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	f7fe fc88 	bl	800023c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	4611      	mov	r1, r2
 8001930:	f06f 000b 	mvn.w	r0, #11
 8001934:	f7fe fc94 	bl	8000260 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	4611      	mov	r1, r2
 800193c:	f06f 000a 	mvn.w	r0, #10
 8001940:	f7fe fc8e 	bl	8000260 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	4611      	mov	r1, r2
 8001948:	f06f 0009 	mvn.w	r0, #9
 800194c:	f7fe fc88 	bl	8000260 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	4611      	mov	r1, r2
 8001954:	f06f 0004 	mvn.w	r0, #4
 8001958:	f7fe fc82 	bl	8000260 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	4611      	mov	r1, r2
 8001960:	f06f 0003 	mvn.w	r0, #3
 8001964:	f7fe fc7c 	bl	8000260 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	4611      	mov	r1, r2
 800196c:	f06f 0001 	mvn.w	r0, #1
 8001970:	f7fe fc76 	bl	8000260 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	4611      	mov	r1, r2
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7fe fc70 	bl	8000260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001980:	b003      	add	sp, #12
 8001982:	f85d fb04 	ldr.w	pc, [sp], #4
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdac->Instance==DAC1)
 800198e:	6802      	ldr	r2, [r0, #0]
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_DAC_MspInit+0x7c>)
 8001992:	429a      	cmp	r2, r3
{
 8001994:	b087      	sub	sp, #28
 8001996:	4605      	mov	r5, r0
  if(hdac->Instance==DAC1)
 8001998:	d134      	bne.n	8001a04 <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800199a:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    /**DAC1 GPIO Configuration    
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2600      	movs	r6, #0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019a0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel4;
 80019a2:	4c1a      	ldr	r4, [pc, #104]	; (8001a0c <HAL_DAC_MspInit+0x80>)
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019a8:	61da      	str	r2, [r3, #28]
 80019aa:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	9603      	str	r6, [sp, #12]
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019b6:	2720      	movs	r7, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019be:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019c2:	9701      	str	r7, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f7fe fe52 	bl	800066c <HAL_GPIO_Init>
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_DAC_MspInit+0x84>)
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	60a6      	str	r6, [r4, #8]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019cc:	2310      	movs	r3, #16
 80019ce:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	60e3      	str	r3, [r4, #12]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019da:	6123      	str	r3, [r4, #16]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80019dc:	4620      	mov	r0, r4
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e2:	6163      	str	r3, [r4, #20]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80019e4:	61a7      	str	r7, [r4, #24]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80019e6:	61e6      	str	r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80019e8:	f7fe fd90 	bl	800050c <HAL_DMA_Init>
 80019ec:	b118      	cbz	r0, 80019f6 <HAL_DAC_MspInit+0x6a>
    {
      _Error_Handler(__FILE__, __LINE__);
 80019ee:	2172      	movs	r1, #114	; 0x72
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <HAL_DAC_MspInit+0x88>)
 80019f2:	f7ff ff8b 	bl	800190c <_Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM7_DAC1_CH2_DMA1_CH4);
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_DAC_MspInit+0x8c>)
 80019f8:	6813      	ldr	r3, [r2, #0]
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fe:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001a00:	60ec      	str	r4, [r5, #12]
 8001a02:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a04:	b007      	add	sp, #28
 8001a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a08:	40007400 	.word	0x40007400
 8001a0c:	200000ec 	.word	0x200000ec
 8001a10:	40020044 	.word	0x40020044
 8001a14:	08001bdc 	.word	0x08001bdc
 8001a18:	40010000 	.word	0x40010000

08001a1c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8001a1c:	6802      	ldr	r2, [r0, #0]
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_TIM_PWM_MspInit+0x24>)
 8001a20:	429a      	cmp	r2, r3
{
 8001a22:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8001a24:	d10a      	bne.n	8001a3c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a26:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	f042 0202 	orr.w	r2, r2, #2
 8001a30:	61da      	str	r2, [r3, #28]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a3c:	b002      	add	sp, #8
 8001a3e:	4770      	bx	lr
 8001a40:	40000400 	.word	0x40000400

08001a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8001a46:	6802      	ldr	r2, [r0, #0]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_TIM_MspPostInit+0x28>)
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d10a      	bne.n	8001a64 <HAL_TIM_MspPostInit+0x20>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a4e:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2200      	movs	r2, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	a901      	add	r1, sp, #4
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a56:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f7fe fe04 	bl	800066c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a64:	b007      	add	sp, #28
 8001a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a6a:	bf00      	nop
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	48000400 	.word	0x48000400

08001a74 <NMI_Handler>:
 8001a74:	4770      	bx	lr

08001a76 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler>

08001a78 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler>

08001a7a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler>

08001a7c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler>

08001a7e <SVC_Handler>:
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a82:	4770      	bx	lr

08001a84 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f7fe fbcb 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a8e:	f7fe bc4a 	b.w	8000326 <HAL_SYSTICK_IRQHandler>
	...

08001a94 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001a94:	4801      	ldr	r0, [pc, #4]	; (8001a9c <DMA1_Channel4_IRQHandler+0x8>)
 8001a96:	f7fe bda1 	b.w	80005dc <HAL_DMA_IRQHandler>
 8001a9a:	bf00      	nop
 8001a9c:	200000ec 	.word	0x200000ec

08001aa0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4915      	ldr	r1, [pc, #84]	; (8001af8 <SystemInit+0x58>)
 8001aa2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <SystemInit+0x5c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001ab8:	6858      	ldr	r0, [r3, #4]
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <SystemInit+0x60>)
 8001abc:	4002      	ands	r2, r0
 8001abe:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ac6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aca:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ada:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ade:	f022 020f 	bic.w	r2, r2, #15
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001ae4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <SystemInit+0x64>)
 8001ae8:	4002      	ands	r2, r0
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001af4:	608b      	str	r3, [r1, #8]
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f87fc00c 	.word	0xf87fc00c
 8001b04:	ff00fccc 	.word	0xff00fccc

08001b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b0e:	e003      	b.n	8001b18 <LoopCopyDataInit>

08001b10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b16:	3104      	adds	r1, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b20:	d3f6      	bcc.n	8001b10 <CopyDataInit>
	ldr	r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b24:	e002      	b.n	8001b2c <LoopFillZerobss>

08001b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b28:	f842 3b04 	str.w	r3, [r2], #4

08001b2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <LoopForever+0x16>)
	cmp	r2, r3
 8001b2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b30:	d3f9      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b32:	f7ff ffb5 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f000 f811 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3a:	f7ff fe59 	bl	80017f0 <main>

08001b3e <LoopForever>:

LoopForever:
    b LoopForever
 8001b3e:	e7fe      	b.n	8001b3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b40:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001b44:	08001c10 	.word	0x08001c10
	ldr	r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b4c:	200000cc 	.word	0x200000cc
	ldr	r2, =_sbss
 8001b50:	200000cc 	.word	0x200000cc
	ldr	r3, = _ebss
 8001b54:	20000184 	.word	0x20000184

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>
	...

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	4e0d      	ldr	r6, [pc, #52]	; (8001b94 <__libc_init_array+0x38>)
 8001b60:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <__libc_init_array+0x3c>)
 8001b62:	1ba4      	subs	r4, r4, r6
 8001b64:	10a4      	asrs	r4, r4, #2
 8001b66:	2500      	movs	r5, #0
 8001b68:	42a5      	cmp	r5, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	4e0b      	ldr	r6, [pc, #44]	; (8001b9c <__libc_init_array+0x40>)
 8001b6e:	4c0c      	ldr	r4, [pc, #48]	; (8001ba0 <__libc_init_array+0x44>)
 8001b70:	f000 f818 	bl	8001ba4 <_init>
 8001b74:	1ba4      	subs	r4, r4, r6
 8001b76:	10a4      	asrs	r4, r4, #2
 8001b78:	2500      	movs	r5, #0
 8001b7a:	42a5      	cmp	r5, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b84:	4798      	blx	r3
 8001b86:	3501      	adds	r5, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b8e:	4798      	blx	r3
 8001b90:	3501      	adds	r5, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08001c08 	.word	0x08001c08
 8001b98:	08001c08 	.word	0x08001c08
 8001b9c:	08001c08 	.word	0x08001c08
 8001ba0:	08001c0c 	.word	0x08001c0c

08001ba4 <_init>:
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	bf00      	nop
 8001ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001baa:	bc08      	pop	{r3}
 8001bac:	469e      	mov	lr, r3
 8001bae:	4770      	bx	lr

08001bb0 <_fini>:
 8001bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb2:	bf00      	nop
 8001bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bb6:	bc08      	pop	{r3}
 8001bb8:	469e      	mov	lr, r3
 8001bba:	4770      	bx	lr
